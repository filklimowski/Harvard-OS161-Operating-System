cscope 15 /nfs/ug/homes-1/k/klimowsk/ece344/os161/kern               0000507391
	@arch/mips/include/asmdefs.h

4 #i‚de‡
_MIPS_ASMDEFS_H_


5 
	#_MIPS_ASMDEFS_H_


	)

10 
	#z0
 
$0


	)

11 
	#AT
 
$1


	)

12 
	#v0
 
$2


	)

13 
	#v1
 
$3


	)

14 
	#a0
 
$4


	)

15 
	#a1
 
$5


	)

16 
	#a2
 
$6


	)

17 
	#a3
 
$7


	)

18 
	#t0
 
$8


	)

19 
	#t1
 
$9


	)

20 
	#t2
 
$10


	)

21 
	#t3
 
$11


	)

22 
	#t4
 
$12


	)

23 
	#t5
 
$13


	)

24 
	#t6
 
$14


	)

25 
	#t7
 
$15


	)

26 
	#s0
 
$16


	)

27 
	#s1
 
$17


	)

28 
	#s2
 
$18


	)

29 
	#s3
 
$19


	)

30 
	#s4
 
$20


	)

31 
	#s5
 
$21


	)

32 
	#s6
 
$22


	)

33 
	#s7
 
$23


	)

34 
	#t8
 
$24


	)

35 
	#t9
 
$25


	)

36 
	#k0
 
$26


	)

37 
	#k1
 
$27


	)

38 
	#gp
 
$28


	)

39 
	#•
 
$29


	)

40 
	#s8
 
$30


	)

41 
	#ø
 
$31


	)

44 
	#c0_ödex
 
$0


	)

45 
	#c0_øndom
 
$1


	)

46 
	#c0_íåylo
 
$2


	)

49 
	#c0_c⁄ãxt
 
$4


	)

52 
	#c0_vaddr
 
$8


	)

54 
	#c0_íåyhi
 
$10


	)

56 
	#c0_°©us
 
$12


	)

57 
	#c0_ˇu£
 
$13


	)

58 
	#c0_ïc
 
$14


	)

59 
	#c0_¥id
 
$15


	)

	@arch/mips/include/bus.h

1 #i‚de‡
_MIPS_BUS_H_


2 
	#_MIPS_BUS_H_


	)

11 
	~<machöe/vm.h
>

12 
	~<œmebus/œmebus.h
>

14 
	#bus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
) \

15 
	`œmebus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
)

	)

17 
	#bus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
) \

18 
	`œmebus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
)

	)

20 
	#bus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
) \

21 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
)

	)

28 
	#LB_BASEADDR
 (
MIPS_KSEG1
 + 0x1„00000)

	)

30 
mùs_œmebus_öãºu±
();

	@arch/mips/include/ktypes.h

1 #i‚de‡
_MIPS_KTYPES_H_


2 
	#_MIPS_KTYPES_H_


	)

9 
u_öt32_t
 
	t∑ddr_t
;

10 
u_öt32_t
 
	tvaddr_t
;

	@arch/mips/include/pcb.h

5 #i‚de‡
_MACHINE_PCB_H_


6 
	#_MACHINE_PCB_H_


	)

8 
	~<machöe/£tjmp.h
>

11 
	#STACK_SIZE
 4096

	)

14 
	#STACK_MASK
 0xfffff000

	)

17 
	#SAME_STACK
(
p1
,
p2
Ë((’1)&
STACK_MASK
)==(’2)&STACK_MASK))

	)

20 (*
	tpcb_Áu…func
)();

38 
	spcb
 {

39 
u_öt32_t
 
pcb_swôch°ack
;

40 
u_öt32_t
 
pcb_k°ack
;

41 
u_öt32_t
 
pcb_ööãºu±
;

43 
pcb_Áu…func
 
pcb_badÁu…func
;

44 
jmp_buf
 
pcb_c›yjmp
;

54 
	`md_öôpcb0
(
pcb
 *);

61 
	`md_öôpcb
(
pcb
 *, *
°ack
, *
d©a1
, 
d©a2
,

62 (*
func
)(*, ));

74 
	`md_u£rmode
(
¨gc
, 
u£Ωå_t
 
¨gv
, 
vaddr_t
 
°ack±r
,

75 
vaddr_t
 
íåypoöt
);

83 
	`md_powîoff
();

84 
	`md_ªboŸ
();

85 
	`md_hÆt
();

86 
	`md_∑nic
();

93 
	`mùs_öãºu±
(
u_öt32_t
 
ˇu£_ªgi°î
);

96 
å≠‰ame
;

97 
	`mùs_sysˇŒ
(
å≠‰ame
 *
tf
);

100 
u_öt32_t
 
	`mùs_ømsize
();

	@arch/mips/include/setjmp.h

1 #i‚de‡
_MIPS_SETJMP_H_


2 
	#_MIPS_SETJMP_H_


	)

8 
	#__JB_REGS
 11

	)

11 
u_öt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@arch/mips/include/specialreg.h

1 #i‚de‡
_MIPS_SPECIALREG_H_


2 
	#_MIPS_SPECIALREG_H_


	)

7 
	#CST_IEc
 0x00000001

	)

8 
	#CST_KUc
 0x00000002

	)

9 
	#CST_IEp
 0x00000004

	)

10 
	#CST_KUp
 0x00000008

	)

11 
	#CST_IEo
 0x00000010

	)

12 
	#CST_KUo
 0x00000020

	)

13 
	#CST_MODEMASK
 0x0000003‡

	)

14 
	#CST_IRQMASK
 0x0000ff00

	)

15 
	#CST_BEV
 0x00400000

	)

20 
	#CCA_UTLB
 0x00000001

	)

21 
	#CCA_CODE
 0x0000003¯

	)

22 
	#CCA_IRQS
 0x0000ff00

	)

23 
	#CCA_COPN
 0x30000000

	)

24 
	#CCA_JD
 0x80000000

	)

26 
	#CCA_CODESHIFT
 2

	)

31 
	#CIN_P
 0x80000000

	)

32 
	#CIN_INDEX
 0x00003f00

	)

34 
	#CIN_INDEXSHIFT
 8

	)

	@arch/mips/include/spl.h

1 #i‚de‡
_MACHINE_SPL_H_


2 
	#_MACHINE_SPL_H_


	)

50 
cur•l
;

51 
ö_öãºu±
;

53 
•lhigh
();

54 
•l0
();

55 
•lx
();

57 
˝u_idÀ
();

58 
˝u_hÆt
();

64 
	#SPL_HIGH
 15

	)

	@arch/mips/include/switchframe.h

1 #i‚de‡
_MIPS_SWITCHFRAME_H_


2 
	#_MIPS_SWITCHFRAME_H_


	)

10 
	sswôch‰ame
 {

11 
u_öt32_t
 
	msf_s0
;

12 
u_öt32_t
 
	msf_s1
;

13 
u_öt32_t
 
	msf_s2
;

14 
u_öt32_t
 
	msf_s3
;

15 
u_öt32_t
 
	msf_s4
;

16 
u_öt32_t
 
	msf_s5
;

17 
u_öt32_t
 
	msf_s6
;

18 
u_öt32_t
 
	msf_s7
;

19 
u_öt32_t
 
	msf_s8
;

20 
u_öt32_t
 
	msf_gp
;

21 
u_öt32_t
 
	msf_ø
;

	@arch/mips/include/tlb.h

1 #i‚de‡
_MACHINE_TLB_H_


2 
	#_MACHINE_TLB_H_


	)

29 
TLB_R™dom
(
u_öt32_t
 
íåyhi
, u_öt32_à
íåylo
);

30 
TLB_Wrôe
(
u_öt32_t
 
íåyhi
, u_öt32_à
íåylo
, u_öt32_à
ödex
);

31 
TLB_Ród
(
u_öt32_t
 *
íåyhi
, u_öt32_à*
íåylo
, u_öt32_à
ödex
);

32 
TLB_Probe
(
u_öt32_t
 
íåyhi
, u_öt32_à
íåylo
);

51 
	#TLBHI_VPAGE
 0xfffff000

	)

55 
	#TLBLO_PPAGE
 0xfffff000

	)

56 
	#TLBLO_NOCACHE
 0x00000800

	)

57 
	#TLBLO_DIRTY
 0x00000400

	)

58 
	#TLBLO_VALID
 0x00000200

	)

66 
	#TLBHI_INVALID
(
íåyno
Ë((0x80000+”¡ryno))<<12)

	)

67 
	#TLBLO_INVALID
(Ë(0)

	)

73 
	#NUM_TLB
 64

	)

	@arch/mips/include/trapframe.h

1 #i‚de‡
_MIPS_TRAPFRAME_H_


2 
	#_MIPS_TRAPFRAME_H_


	)

11 
	så≠‰ame
 {

12 
u_öt32_t
 
	mtf_vaddr
;

13 
u_öt32_t
 
	mtf_°©us
;

14 
u_öt32_t
 
	mtf_ˇu£
;

15 
u_öt32_t
 
	mtf_lo
;

16 
u_öt32_t
 
	mtf_hi
;

17 
u_öt32_t
 
	mtf_ø
;

18 
u_öt32_t
 
	mtf_©
;

19 
u_öt32_t
 
	mtf_v0
;

20 
u_öt32_t
 
	mtf_v1
;

21 
u_öt32_t
 
	mtf_a0
;

22 
u_öt32_t
 
	mtf_a1
;

23 
u_öt32_t
 
	mtf_a2
;

24 
u_öt32_t
 
	mtf_a3
;

25 
u_öt32_t
 
	mtf_t0
;

26 
u_öt32_t
 
	mtf_t1
;

27 
u_öt32_t
 
	mtf_t2
;

28 
u_öt32_t
 
	mtf_t3
;

29 
u_öt32_t
 
	mtf_t4
;

30 
u_öt32_t
 
	mtf_t5
;

31 
u_öt32_t
 
	mtf_t6
;

32 
u_öt32_t
 
	mtf_t7
;

33 
u_öt32_t
 
	mtf_s0
;

34 
u_öt32_t
 
	mtf_s1
;

35 
u_öt32_t
 
	mtf_s2
;

36 
u_öt32_t
 
	mtf_s3
;

37 
u_öt32_t
 
	mtf_s4
;

38 
u_öt32_t
 
	mtf_s5
;

39 
u_öt32_t
 
	mtf_s6
;

40 
u_öt32_t
 
	mtf_s7
;

41 
u_öt32_t
 
	mtf_t8
;

42 
u_öt32_t
 
	mtf_t9
;

43 
u_öt32_t
 
	mtf_k0
;

44 
u_öt32_t
 
	mtf_k1
;

45 
u_öt32_t
 
	mtf_gp
;

46 
u_öt32_t
 
	mtf_•
;

47 
u_öt32_t
 
	mtf_s8
;

48 
u_öt32_t
 
	mtf_ïc
;

54 
	#EX_IRQ
 0

	)

55 
	#EX_MOD
 1

	)

56 
	#EX_TLBL
 2

	)

57 
	#EX_TLBS
 3

	)

58 
	#EX_ADEL
 4

	)

59 
	#EX_ADES
 5

	)

60 
	#EX_IBE
 6

	)

61 
	#EX_DBE
 7

	)

62 
	#EX_SYS
 8

	)

63 
	#EX_BP
 9

	)

64 
	#EX_RI
 10

	)

65 
	#EX_CPU
 11

	)

66 
	#EX_OVF
 12

	)

74 
mùs_u£rmode
(
å≠‰ame
 *
tf
);

75 
md_f‹kíåy
(
å≠‰ame
 *
tf
);

	@arch/mips/include/types.h

1 #i‚de‡
_MIPS_TYPES_H_


2 
	#_MIPS_TYPES_H_


	)

21 
	töt8_t
;

22 
	töt16_t
;

23 
	töt32_t
;

24 
	töt64_t
;

26 
	tu_öt8_t
;

27 
	tu_öt16_t
;

28 
	tu_öt32_t
;

29 
	tu_öt64_t
;

39 
	tsize_t
;

41 
	tsize_t
;

44 
	töçå_t
;

45 
	tuöçå_t
;

51 
	#CHAR_BIT
 8

	)

57 #unde‡
NULL


58 
	#NULL
 ((*)0)

	)

65 #unde‡
_LITTLE_ENDIAN


66 
	#_BIG_ENDIAN


	)

	@arch/mips/include/vm.h

1 #i‚de‡
_MIPS_VM_H_


2 
	#_MIPS_VM_H_


	)

8 
	#PAGE_SIZE
 4096

	)

9 
	#PAGE_FRAME
 0xfffff000

	)

19 
	#MIPS_KUSEG
 0x00000000

	)

20 
	#MIPS_KSEG0
 0x80000000

	)

21 
	#MIPS_KSEG1
 0xa0000000

	)

22 
	#MIPS_KSEG2
 0xc0000000

	)

36 
	#PADDR_TO_KVADDR
(
∑ddr
Ë(’addr)+
MIPS_KSEG0
)

	)

42 
	#USERTOP
 
MIPS_KSEG0


	)

52 
	#USERSTACK
 
USERTOP


	)

69 
	#SET_VALID
(
x
Ë((xË| 0x00000001)

	)

71 
øm_boŸ°øp
();

72 
∑ddr_t
 
øm_°ólmem
(
≈ages
);

73 
øm_gësize
(
∑ddr_t
 *
lo
,Öaddr_à*
hi
);

74 
vm_boŸ°øp
();

79 
	#EM_MACHINE
 
EM_MIPS


	)

	@arch/mips/mips/cache_mips1.S

1 
	~<machöe/asmdefs.h
>

13 .
	gãxt


14 .
£t
 
	gn‹e‹dî


16 .
globl
 
	gmùs_Êushiˇche


17 .
ty≥
 
	gmùs_Êushiˇche
,@
	gfun˘i⁄


18 .
ít
 
mùs_Êushiˇche


19 
	gmùs_Êushiˇche
:

20 
j
 
ø


21 
n›


22 .
íd
 
mùs_Êushiˇche


	@arch/mips/mips/dumbvm.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~<thªad.h
>

5 
	~<cuπhªad.h
>

6 
	~<addr•a˚.h
>

7 
	~<vm.h
>

8 
	~<machöe/•l.h
>

9 
	~<machöe/éb.h
>

19 
	#DUMBVM_STACKPAGES
 12

	)

43 
vaddr_t


44 
	$Æloc_k∑ges
(
≈ages
)

46 
∑ddr_t
 
∑
;

47 
∑
 = 
	`gëµages
(
≈ages
);

48 i‡(
∑
==0) {

51  
	`PADDR_TO_KVADDR
(
∑
);

52 
	}
}

55 
	$‰ì_k∑ges
(
vaddr_t
 
addr
)

59 ()
addr
;

60 
	}
}

63 
	$vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
)

65 
vaddr_t
 
vba£1
, 
vt›1
, 
vba£2
, 
vt›2
, 
°ackba£
, 
°ackt›
;

66 
∑ddr_t
 
∑ddr
;

67 
i
;

68 
u_öt32_t
 
ehi
, 
ño
;

69 
addr•a˚
 *
as
;

70 
•l
;

72 
•l
 = 
	`•lhigh
();

74 
Áu…addªss
 &
PAGE_FRAME
;

76 
	`DEBUG
(
DB_VM
, "dumbvm: fau…: 0x%x\n", 
Áu…addªss
);

78 
Áu…ty≥
) {

79 
VM_FAULT_READONLY
:

81 
	`∑nic
("dumbvm: got VM_FAULT_READONLY\n");

82 
VM_FAULT_READ
:

83 
VM_FAULT_WRITE
:

86 
	`•lx
(
•l
);

87  
EINVAL
;

90 
as
 = 
cuπhªad
->
t_vm•a˚
;

91 i‡(
as
 =
NULL
) {

97  
EFAULT
;

101 
	`as£π
(
as
->
as_vba£1
 != 0);

102 
	`as£π
(
as
->
as_pba£1
 != 0);

103 
	`as£π
(
as
->
as_≈ages1
 != 0);

104 
	`as£π
(
as
->
as_vba£2
 != 0);

105 
	`as£π
(
as
->
as_pba£2
 != 0);

106 
	`as£π
(
as
->
as_≈ages2
 != 0);

107 
	`as£π
(
as
->
as_°ackpba£
 != 0);

108 
	`as£π
((
as
->
as_vba£1
 & 
PAGE_FRAME
) ==ás->as_vbase1);

109 
	`as£π
((
as
->
as_pba£1
 & 
PAGE_FRAME
) ==ás->as_pbase1);

110 
	`as£π
((
as
->
as_vba£2
 & 
PAGE_FRAME
) ==ás->as_vbase2);

111 
	`as£π
((
as
->
as_pba£2
 & 
PAGE_FRAME
) ==ás->as_pbase2);

112 
	`as£π
((
as
->
as_°ackpba£
 & 
PAGE_FRAME
) ==ás->as_stackpbase);

114 
vba£1
 = 
as
->
as_vba£1
;

115 
vt›1
 = 
vba£1
 + 
as
->
as_≈ages1
 * 
PAGE_SIZE
;

116 
vba£2
 = 
as
->
as_vba£2
;

117 
vt›2
 = 
vba£2
 + 
as
->
as_≈ages2
 * 
PAGE_SIZE
;

118 
°ackba£
 = 
USERSTACK
 - 
DUMBVM_STACKPAGES
 * 
PAGE_SIZE
;

119 
°ackt›
 = 
USERSTACK
;

121 i‡(
Áu…addªss
 >
vba£1
 && fau…addªs†< 
vt›1
) {

122 
∑ddr
 = (
Áu…addªss
 - 
vba£1
Ë+ 
as
->
as_pba£1
;

124 i‡(
Áu…addªss
 >
vba£2
 && fau…addªs†< 
vt›2
) {

125 
∑ddr
 = (
Áu…addªss
 - 
vba£2
Ë+ 
as
->
as_pba£2
;

127 i‡(
Áu…addªss
 >
°ackba£
 && fau…addªs†< 
°ackt›
) {

128 
∑ddr
 = (
Áu…addªss
 - 
°ackba£
Ë+ 
as
->
as_°ackpba£
;

131 
	`•lx
(
•l
);

132  
EFAULT
;

136 
	`as£π
((
∑ddr
 & 
PAGE_FRAME
)==paddr);

138 
i
=0; i<
NUM_TLB
; i++) {

139 
	`TLB_Ród
(&
ehi
, &
ño
, 
i
);

140 i‡(
ño
 & 
TLBLO_VALID
) {

143 
ehi
 = 
Áu…addªss
;

144 
ño
 = 
∑ddr
 | 
TLBLO_DIRTY
 | 
TLBLO_VALID
;

145 
	`DEBUG
(
DB_VM
, "dumbvm: 0x%x -> 0x%x\n", 
Áu…addªss
, 
∑ddr
);

146 
	`TLB_Wrôe
(
ehi
, 
ño
, 
i
);

147 
	`•lx
(
•l
);

151 
	`k¥ötf
("dumbvm: Ran out of TLBÉntries - cannot handleÖage fault\n");

152 
	`•lx
(
•l
);

153  
EFAULT
;

154 
	}
}

156 
addr•a˚
 *

157 
	$as_¸óã
()

159 
addr•a˚
 *
as
 = 
	`kmÆloc
((addrspace));

160 i‡(
as
==
NULL
) {

161  
NULL
;

164 
as
->
as_vba£1
 = 0;

165 
as
->
as_pba£1
 = 0;

166 
as
->
as_≈ages1
 = 0;

167 
as
->
as_vba£2
 = 0;

168 
as
->
as_pba£2
 = 0;

169 
as
->
as_≈ages2
 = 0;

170 
as
->
as_°ackpba£
 = 0;

172  
as
;

173 
	}
}

176 
	$as_de°roy
(
addr•a˚
 *
as
)

178 
	`k‰ì
(
as
);

179 
	}
}

182 
	$as_a˘iv©e
(
addr•a˚
 *
as
)

184 
i
, 
•l
;

186 ()
as
;

188 
•l
 = 
	`•lhigh
();

190 
i
=0; i<
NUM_TLB
; i++) {

191 
	`TLB_Wrôe
(
	`TLBHI_INVALID
(
i
), 
	`TLBLO_INVALID
(), i);

194 
	`•lx
(
•l
);

195 
	}
}

198 
	$as_deföe_ªgi⁄
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

199 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
)

201 
size_t
 
≈ages
;

204 
sz
 +
vaddr
 & ~(
vaddr_t
)
PAGE_FRAME
;

205 
vaddr
 &
PAGE_FRAME
;

208 
sz
 = (sz + 
PAGE_SIZE
 - 1Ë& 
PAGE_FRAME
;

210 
≈ages
 = 
sz
 / 
PAGE_SIZE
;

213 ()
ªadabÀ
;

214 ()
wrôóbÀ
;

215 ()
execuèbÀ
;

217 i‡(
as
->
as_vba£1
 == 0) {

218 
as
->
as_vba£1
 = 
vaddr
;

219 
as
->
as_≈ages1
 = 
≈ages
;

223 i‡(
as
->
as_vba£2
 == 0) {

224 
as
->
as_vba£2
 = 
vaddr
;

225 
as
->
as_≈ages2
 = 
≈ages
;

232 
	`k¥ötf
("dumbvm: Warning:Åoo manyÑegions\n");

233  
EUNIMP
;

234 
	}
}

237 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
)

239 
	`as£π
(
as
->
as_pba£1
 == 0);

240 
	`as£π
(
as
->
as_pba£2
 == 0);

241 
	`as£π
(
as
->
as_°ackpba£
 == 0);

243 
as
->
as_pba£1
 = 
	`gëµages
◊s->
as_≈ages1
);

244 i‡(
as
->
as_pba£1
 == 0) {

245  
ENOMEM
;

248 
as
->
as_pba£2
 = 
	`gëµages
◊s->
as_≈ages2
);

249 i‡(
as
->
as_pba£2
 == 0) {

250  
ENOMEM
;

253 
as
->
as_°ackpba£
 = 
	`gëµages
(
DUMBVM_STACKPAGES
);

254 i‡(
as
->
as_°ackpba£
 == 0) {

255  
ENOMEM
;

259 
	}
}

262 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
)

264 ()
as
;

266 
	}
}

269 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

271 
	`as£π
(
as
->
as_°ackpba£
 != 0);

273 *
°ack±r
 = 
USERSTACK
;

275 
	}
}

278 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

280 
addr•a˚
 *
√w
;

282 
√w
 = 
	`as_¸óã
();

283 i‡(
√w
==
NULL
) {

284  
ENOMEM
;

287 
√w
->
as_vba£1
 = 
ﬁd
->as_vbase1;

288 
√w
->
as_≈ages1
 = 
ﬁd
->as_npages1;

289 
√w
->
as_vba£2
 = 
ﬁd
->as_vbase2;

290 
√w
->
as_≈ages2
 = 
ﬁd
->as_npages2;

292 i‡(
	`as_¥ï¨e_lﬂd
(
√w
)) {

293 
	`as_de°roy
(
√w
);

294  
ENOMEM
;

297 
	`as£π
(
√w
->
as_pba£1
 != 0);

298 
	`as£π
(
√w
->
as_pba£2
 != 0);

299 
	`as£π
(
√w
->
as_°ackpba£
 != 0);

301 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£1
),

302 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£1
),

303 
ﬁd
->
as_≈ages1
*
PAGE_SIZE
);

305 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£2
),

306 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£2
),

307 
ﬁd
->
as_≈ages2
*
PAGE_SIZE
);

309 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_°ackpba£
),

310 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_°ackpba£
),

311 
DUMBVM_STACKPAGES
*
PAGE_SIZE
);

313 *
ªt
 = 
√w
;

315 
	}
}

	@arch/mips/mips/exception.S

5 
	~<machöe/asmdefs.h
>

6 
	~<machöe/•ecüÃeg.h
>

12 .
£t
 
	gnﬂt


13 .
£t
 
n‹e‹dî


26 .
	gãxt


27 .
globl
 
	guéb_ex˚±i⁄


28 .
ty≥
 
	guéb_ex˚±i⁄
,@
	gfun˘i⁄


29 .
ít
 
uéb_ex˚±i⁄


30 
	guéb_ex˚±i⁄
:

31 
move
 
k1
, 
•


32 
mfc0
 
	gk0
, 
c0_°©us


33 
™di
 
	gk0
, k0, 
CST_KUp


34 
beq
 
	gk0
, 
	g$0
, 1f

35 
n›


38 
œ
 
	gk0
, 
curk°ack


39 
lw
 
	g•
, 0(
	gk0
)

40 
	gn›


43 
mfc0
 
k0
, 
c0_ˇu£


44 
‹i
 
	gk0
, k0, 1

45 
j
 
comm⁄_ex˚±i⁄


46 
	gn›


47 .
globl
 
uéb_ex˚±i⁄_íd


48 
	guéb_ex˚±i⁄_íd
:

49 .
íd
 
uéb_ex˚±i⁄


60 .
ãxt


61 .
globl
 
ex˚±i⁄


62 .
ty≥
 
ex˚±i⁄
,@
	gfun˘i⁄


63 .
ít
 
ex˚±i⁄


64 
	gex˚±i⁄
:

65 
move
 
k1
, 
•


66 
mfc0
 
	gk0
, 
c0_°©us


67 
™di
 
	gk0
, k0, 
CST_KUp


68 
beq
 
	gk0
, 
	g$0
, 1f

69 
n›


72 
œ
 
	gk0
, 
curk°ack


73 
lw
 
	g•
, 0(
	gk0
)

74 
	gn›


77 
mfc0
 
k0
, 
c0_ˇu£


78 
j
 
comm⁄_ex˚±i⁄


79 
	gn›


81 .
globl
 
ex˚±i⁄_íd


82 
	gex˚±i⁄_íd
:

83 .
íd
 
ex˚±i⁄


86 
n›


95 .
ãxt


96 .
ty≥
 
comm⁄_ex˚±i⁄
,@
	gfun˘i⁄


97 .
ít
 
comm⁄_ex˚±i⁄


98 
	gcomm⁄_ex˚±i⁄
:

113 
addi
 
•
, 
	g•
, -164

141 
sw
 
	gø
, 160(
	g•
)

142 
sw
 
	gs8
, 156(
	g•
)

143 
sw
 
	g•
, 152(sp)

144 
sw
 
	ggp
, 148(
	g•
)

145 
sw
 
	gk1
, 144(
	g•
)

146 
sw
 
	gk0
, 140(
	g•
)

148 
sw
 
	gk1
, 152(
	g•
)

149 
n›


151 
mfc0
 
	gk1
, 
c0_ïc


152 
sw
 
	gk1
, 160(
	g•
)

154 
sw
 
	gt9
, 136(
	g•
)

155 
sw
 
	gt8
, 132(
	g•
)

156 
sw
 
	gs7
, 128(
	g•
)

157 
sw
 
	gs6
, 124(
	g•
)

158 
sw
 
	gs5
, 120(
	g•
)

159 
sw
 
	gs4
, 116(
	g•
)

160 
sw
 
	gs3
, 112(
	g•
)

161 
sw
 
	gs2
, 108(
	g•
)

162 
sw
 
	gs1
, 104(
	g•
)

163 
sw
 
	gs0
, 100(
	g•
)

164 
sw
 
	gt7
, 96(
	g•
)

165 
sw
 
	gt6
, 92(
	g•
)

166 
sw
 
	gt5
, 88(
	g•
)

167 
sw
 
	gt4
, 84(
	g•
)

168 
sw
 
	gt3
, 80(
	g•
)

169 
sw
 
	gt2
, 76(
	g•
)

170 
sw
 
	gt1
, 72(
	g•
)

171 
sw
 
	gt0
, 68(
	g•
)

172 
sw
 
	ga3
, 64(
	g•
)

173 
sw
 
	ga2
, 60(
	g•
)

174 
sw
 
	ga1
, 56(
	g•
)

175 
sw
 
	ga0
, 52(
	g•
)

176 
sw
 
	gv1
, 48(
	g•
)

177 
sw
 
	gv0
, 44(
	g•
)

178 
sw
 
	gAT
, 40(
	g•
)

180 
sw
 
	gø
, 36(
	g•
)

185 
mfhi
 
t0


186 
mÊo
 
t1


187 
sw
 
	gt0
, 32(
	g•
)

188 
sw
 
	gt1
, 28(
	g•
)

194 
sw
 
	gk0
, 24(
	g•
)

195 
mfc0
 
	gt1
, 
c0_°©us


196 
sw
 
	gt1
, 20(
	g•
)

197 
mfc0
 
	gt2
, 
c0_vaddr


198 
sw
 
	gt2
, 16(
	g•
)

203 
sw
 
	g$0
, 12(
	g•
)

209 
addiu
 
	ga0
, 
	g•
, 16

210 
jÆ
 
mùs_å≠


211 
n›


214 
n›


220 
	gex˚±i⁄_ªtu∫
:

223 
lw
 
t0
, 20(
	g•
)

224 
n›


225 
mtc0
 
	gt0
, 
c0_°©us


229 
lw
 
	gt1
, 28(
	g•
)

230 
lw
 
	gt0
, 32(
	g•
)

231 
méo
 
t1


232 
mthi
 
t0


235 
lw
 
	gø
, 36(
	g•
)

237 
lw
 
	gAT
, 40(
	g•
)

238 
lw
 
	gv0
, 44(
	g•
)

239 
lw
 
	gv1
, 48(
	g•
)

240 
lw
 
	ga0
, 52(
	g•
)

241 
lw
 
	ga1
, 56(
	g•
)

242 
lw
 
	ga2
, 60(
	g•
)

243 
lw
 
	ga3
, 64(
	g•
)

244 
lw
 
	gt0
, 68(
	g•
)

245 
lw
 
	gt1
, 72(
	g•
)

246 
lw
 
	gt2
, 76(
	g•
)

247 
lw
 
	gt3
, 80(
	g•
)

248 
lw
 
	gt4
, 84(
	g•
)

249 
lw
 
	gt5
, 88(
	g•
)

250 
lw
 
	gt6
, 92(
	g•
)

251 
lw
 
	gt7
, 96(
	g•
)

252 
lw
 
	gs0
, 100(
	g•
)

253 
lw
 
	gs1
, 104(
	g•
)

254 
lw
 
	gs2
, 108(
	g•
)

255 
lw
 
	gs3
, 112(
	g•
)

256 
lw
 
	gs4
, 116(
	g•
)

257 
lw
 
	gs5
, 120(
	g•
)

258 
lw
 
	gs6
, 124(
	g•
)

259 
lw
 
	gs7
, 128(
	g•
)

260 
lw
 
	gt8
, 132(
	g•
)

261 
lw
 
	gt9
, 136(
	g•
)

266 
lw
 
	ggp
, 148(
	g•
)

268 
lw
 
	gs8
, 156(
	g•
)

269 
lw
 
	gk0
, 160(
	g•
)

271 
lw
 
	g•
, 152(sp)

274 
jr
 
k0


275 
	gr„


276 .
íd
 
comm⁄_ex˚±i⁄


287 .
	gãxt


288 .
globl
 
	gasm_u£rmode


289 .
ty≥
 
	gasm_u£rmode
,@
	gfun˘i⁄


290 .
ít
 
asm_u£rmode


291 
	gasm_u£rmode
:

303 
j
 
ex˚±i⁄_ªtu∫


304 
addiu
 
•
, 
	ga0
, -16

305 .
íd
 
	gasm_u£rmode


	@arch/mips/mips/interrupt.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/bus.h
>

4 
	~<machöe/•l.h
>

5 
	~<machöe/pcb.h
>

8 
	gö_öãºu±
;

15 
	#LAMEBUS_IRQ_BIT
 0x00000400

	)

16 
	#LAMEBUS_NMI_BIT
 0x00000800

	)

19 
	$mùs_öãºu±
(
u_öt32_t
 
ˇu£
)

21 
ﬁd_ö
 = 
ö_öãºu±
;

22 
ö_öãºu±
 = 1;

25 
	`as£π
(
cur•l
>0);

27 i‡(
ˇu£
 & 
LAMEBUS_IRQ_BIT
) {

28 
	`mùs_œmebus_öãºu±
();

30 i‡(
ˇu£
 & 
LAMEBUS_NMI_BIT
) {

31 
	`∑nic
("Received NMI\n");

34 
	`∑nic
("Unknow¿öãºu±; cau£Ñegi°î i†%08x\n", 
ˇu£
);

37 
ö_öãºu±
 = 
ﬁd_ö
;

38 
	}
}

	@arch/mips/mips/lamebus_mips.c

1 
	~<ty≥s.h
>

2 
	~<kîn/uni°d.h
>

3 
	~<lib.h
>

4 
	~<synch.h
>

5 
	~<machöe/•l.h
>

6 
	~<machöe/pcb.h
>

7 
	~<dev.h
>

8 
	~<machöe/bus.h
>

9 
	~<œmebus/œmebus.h
>

10 
	~"autoc⁄f.h
"

13 
œmebus_so·c
 *
	gœmebus
;

16 
	$machdï_dev_boŸ°øp
()

19 
	`as£π
(
cur•l
>0);

22 
œmebus
 = 
	`œmebus_öô
();

27 
	`k¥ötf
("lamebus0 (system main bus)\n");

34 
	`•l0
();

40 
	`autoc⁄f_œmebus
(
œmebus
, 0);

41 
	}
}

49 
	$œmebus_m≠_¨ó
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
u_öt32_t
 
off£t
)

51 
u_öt32_t
 
addªss
;

53 ()
bus
;

55 
	`as£π
(
¶Ÿ
>=0 && slŸ<
LB_NSLOTS
);

57 
addªss
 = 
LB_BASEADDR
 + 
¶Ÿ
*
LB_SLOT_SIZE
 + 
off£t
;

58  (*)
addªss
;

59 
	}
}

64 
u_öt32_t


65 
	$œmebus_ªad_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
u_öt32_t
 
off£t
)

67 
u_öt32_t
 *
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

69  *
±r
;

70 
	}
}

76 
	$œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
,

77 
u_öt32_t
 
off£t
, u_öt32_à
vÆ
)

79 
u_öt32_t
 *
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

81 *
±r
 = 
vÆ
;

82 
	}
}

89 
	$md_powîoff
()

97 
	`œmebus_powîoff
(
œmebus
);

98 
	}
}

104 
	$md_ªboŸ
()

113 
	`k¥ötf
("CannotÑeboot -Öowering off instead, sorry.\n");

114 
	`md_powîoff
();

115 
	}
}

123 
	$md_hÆt
()

125 
	`˝u_hÆt
();

126 
	}
}

135 
	$md_∑nic
()

137 
	`md_powîoff
();

138 
	}
}

144 
u_öt32_t


145 
	$mùs_ømsize
()

147  
	`œmebus_ømsize
();

148 
	}
}

154 
	$mùs_œmebus_öãºu±
()

156 
	`œmebus_öãºu±
(
œmebus
);

157 
	}
}

	@arch/mips/mips/pcb.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/pcb.h
>

4 
	~<machöe/•l.h
>

5 
	~<machöe/swôch‰ame.h
>

6 
	~<thªad.h
>

9 
mùs_swôch
(
pcb
 *
ﬁd
, pcb *
nu
);

12 
mùs_thªad°¨t
( );

14 
u_öt32_t
 
	gcurk°ack
;

29 
	$md_öôpcb0
(
pcb
 *pcb)

31 
pcb
->
pcb_swôch°ack
 = 0;

32 
pcb
->
pcb_k°ack
 = 
curk°ack
;

33 
pcb
->
pcb_ööãºu±
 = 0;

35 
pcb
->
pcb_badÁu…func
 = 
NULL
;

36 
	}
}

52 
md_öôpcb
(
pcb
 *pcb, *
°ack
,

53 *
d©a1
, 
d©a2
,

54 (*
func
)(*, ))

60 
u_öt32_t
 
°ackt›
 = ((u_öt32_t)
°ack
Ë+ 
STACK_SIZE
;

65 
swôch‰ame
 *
sf
 = ((swôch‰amê*Ë
°ackt›
) - 1;

75 
pcb
->
pcb_badÁu…func
 = 
NULL
;

76 
pcb
->
pcb_k°ack
 = 
°ackt›
;

77 
pcb
->
pcb_swôch°ack
 = (
u_öt32_t
Ë
sf
;

78 
pcb
->
pcb_ööãºu±
 = 0;

83 
	`bzîo
(
sf
, (*sf));

104 
sf
->
sf_s0
 = (
u_öt32_t
)
d©a1
;

105 
sf
->
sf_s1
 = (
u_öt32_t
)
d©a2
;

106 
sf
->
sf_s2
 = (
u_öt32_t
)
func
;

107 
sf
->
sf_ø
 = (
u_öt32_t
)
mùs_thªad°¨t
;

108 
	}
}

118 
	$md_swôch
(
pcb
 *
ﬁd
, pcb *
nu
)

120 i‡(
ﬁd
==
nu
) {

129 
ﬁd
->
pcb_k°ack
 = 
curk°ack
;

130 
ﬁd
->
pcb_ööãºu±
 = 
ö_öãºu±
;

132 
curk°ack
 = 
nu
->
pcb_k°ack
;

133 
ö_öãºu±
 = 
nu
->
pcb_ööãºu±
;

135 
	`mùs_swôch
(
ﬁd
, 
nu
);

142 
	}
}

	@arch/mips/mips/ram.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<vm.h
>

4 
	~<machöe/pcb.h
>

6 
u_öt32_t
 
	gfú°‰ì
;

8 
u_öt32_t
 
	gfú°∑ddr
;

9 
u_öt32_t
 
	gœ°∑ddr
;

16 
	$øm_boŸ°øp
()

18 
u_öt32_t
 
ømsize
;

21 
ømsize
 = 
	`mùs_ømsize
();

30 i‡(
ømsize
 > 508*1024*1024) {

31 
ømsize
 = 508*1024*1024;

34 
œ°∑ddr
 = 
ømsize
;

40 
fú°∑ddr
 = 
fú°‰ì
 - 
MIPS_KSEG0
;

42 
	`k¥ötf
("Cpu is MIPSÑ2000/r3000\n");

43 
	`k¥ötf
("%ukÖhysical memoryávailable\n",

44 (
œ°∑ddr
-
fú°∑ddr
)/1024);

45 
	}
}

63 
∑ddr_t


64 
	$øm_°ólmem
(
≈ages
)

66 
u_öt32_t
 
size
 = 
≈ages
 * 
PAGE_SIZE
;

67 
u_öt32_t
 
∑ddr
;

69 i‡(
fú°∑ddr
 + 
size
 > 
œ°∑ddr
) {

73 
∑ddr
 = 
fú°∑ddr
;

74 
fú°∑ddr
 +
size
;

76  
∑ddr
;

77 
	}
}

85 
	$øm_gësize
(
u_öt32_t
 *
lo
, u_öt32_à*
hi
)

87 *
lo
 = 
fú°∑ddr
;

88 *
hi
 = 
œ°∑ddr
;

89 
fú°∑ddr
 = 
œ°∑ddr
 = 0;

90 
	}
}

	@arch/mips/mips/spl.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/•l.h
>

4 
	~<machöe/•ecüÃeg.h
>

18 
	#gë_°©us
(
x
Ë
__asm
 vﬁ©ûe("mfc0 %0,$12" : "Ù" (x))

	)

19 
	#£t_°©us
(
x
Ë
__asm
 vﬁ©ûe("mtc0 %0,$12" :: "r" (x))

	)

22 
ölöe


24 
	$öãºu±s_⁄
()

26 
u_öt32_t
 
x
;

27 
	`gë_°©us
(
x
);

28 
x
 |
CST_IEc
;

29 
	`£t_°©us
(
x
);

30 
	}
}

33 
ölöe


35 
	$öãºu±s_off
()

37 
u_öt32_t
 
x
;

38 
	`gë_°©us
(
x
);

39 
x
 &~(
u_öt32_t
Ë
CST_IEc
;

40 
	`£t_°©us
(
x
);

41 
	}
}

44 
ölöe


46 
	$öãºu±s_⁄off
()

48 
u_öt32_t
 
x
, 
x⁄
, 
xoff
;

49 
	`gë_°©us
(
x
);

50 
x⁄
 = 
x
 | 
CST_IEc
;

51 
xoff
 = 
x
 & ~(
u_öt32_t
Ë
CST_IEc
;

52 
	`£t_°©us
(
x⁄
);

53 
	`£t_°©us
(
xoff
);

54 
	}
}

64 
	gcur•l
 = 
SPL_HIGH
;

68 
	$•lx
(
√w•l
)

70 
ﬁd•l
;

97 i‡(
√w•l
>0) {

98 
	`öãºu±s_off
();

100 i‡(
√w•l
==0) {

101 
	`öãºu±s_⁄
();

104 
ﬁd•l
 = 
cur•l
;

105 
cur•l
 = 
√w•l
;

107  
ﬁd•l
;

108 
	}
}

112 
	$•lhigh
()

114  
	`•lx
(
SPL_HIGH
);

115 
	}
}

118 
	$•l0
()

120  
	`•lx
(0);

121 
	}
}

128 
	$˝u_idÀ
()

130 
	`as£π
(
cur•l
>0);

153 
__asm
 volatile(".long 0x42000020");

155 
	`öãºu±s_⁄off
();

156 
	}
}

162 
	$˝u_hÆt
()

168 
	`öãºu±s_off
();

171 
__asm
 volatile(".long 0x42000020");

173 
	}
}

	@arch/mips/mips/start.S

1 
	~<machöe/asmdefs.h
>

2 
	~<machöe/•ecüÃeg.h
>

4 .
£t
 
	gn‹e‹dî


6 .
	gãxt


7 .
globl
 
	g__°¨t


8 .
ty≥
 
	g__°¨t
,@
	gfun˘i⁄


9 .
ít
 
__°¨t


10 
	g__°¨t
:

22 .
‰ame
 
•
, 20, 
	g$0


23 .
	gmask
 0x80000000, -4

24 
addiu
 
	g•
, sp, -20

25 
sw
 
	gø
, 16(
	g•
)

59 
œ
 
	gs0
, 
_íd


61 
move
 
	ga1
, 
a0


62 
move
 
	ga0
, 
s0


63 
jÆ
 
°r˝y


64 
n›


66 
move
 
	ga0
, 
s0


67 
jÆ
 
°æí


68 
n›


70 
add
 
	gt0
, 
	gs0
, 
v0


71 
addi
 
	gt0
,Å0, 1

74 
addi
 
	gt0
,Å0, 4095

75 
li
 
	gt1
, 0xfffff000

76 
™d
 
	gt0
,Å0, 
t1


78 
addi
 
	gt0
,Å0, 4096

80 
move
 
	g•
, 
t0


81 
sw
 
	gt0
, 
curk°ack


83 
sw
 
	gt0
, 
fú°‰ì


96 
addiu
 
	g•
, sp, -20

97 
sw
 
	g$0
, 16(
	g•
)

103 
li
 
	ga0
, 0x80000000

104 
œ
 
	ga1
, 
uéb_ex˚±i⁄


105 
œ
 
	ga2
, 
uéb_ex˚±i⁄_íd


106 
sub
 
	ga2
,á2, 
a1


107 
jÆ
 
memmove


108 
n›


110 
li
 
	ga0
, 0x80000080

111 
œ
 
	ga1
, 
ex˚±i⁄


112 
œ
 
	ga2
, 
ex˚±i⁄_íd


113 
sub
 
	ga2
,á2, 
a1


114 
jÆ
 
memmove


115 
n›


121 
jÆ
 
mùs_Êushiˇche


122 
n›


127 
jÆ
 
TLB_Re£t


128 
n›


154 
li
 
	gt0
, 
CST_IRQMASK


155 
mtc0
 
	gt0
, 
c0_°©us


162 
jÆ
 
kmaö


163 
move
 
	ga0
, 
	gs0


171 
œ
 
a0
, 
∑nic°r


172 
jÆ
 
∑nic


173 
n›


174 
	gj
 1b

175 
	gn›


176 .
íd
 
	g__°¨t


178 .
rd©a


179 
	g∑nic°r
:

180 .
asciz
 "kmainÑeturned\n"

	@arch/mips/mips/switch.S

1 
	~<machöe/asmdefs.h
>

3 .
	gãxt


4 .
£t
 
	gn‹e‹dî


6 .
globl
 
	gmùs_swôch


7 .
ty≥
 
	gmùs_swôch
,@
	gfun˘i⁄


8 .
ít
 
mùs_swôch


9 
	gmùs_swôch
:

25 
addi
 
•
, 
	g•
, -44

28 
sw
 
	gø
, 40(
	g•
)

29 
sw
 
	ggp
, 36(
	g•
)

30 
sw
 
	gs8
, 32(
	g•
)

31 
sw
 
	gs7
, 28(
	g•
)

32 
sw
 
	gs6
, 24(
	g•
)

33 
sw
 
	gs5
, 20(
	g•
)

34 
sw
 
	gs4
, 16(
	g•
)

35 
sw
 
	gs3
, 12(
	g•
)

36 
sw
 
	gs2
, 8(
	g•
)

37 
sw
 
	gs1
, 4(
	g•
)

38 
sw
 
	gs0
, 0(
	g•
)

41 
sw
 
	g•
, 0(
	ga0
)

44 
lw
 
	g•
, 0(
	ga1
)

45 
n›


48 
lw
 
	gs0
, 0(
	g•
)

49 
lw
 
	gs1
, 4(
	g•
)

50 
lw
 
	gs2
, 8(
	g•
)

51 
lw
 
	gs3
, 12(
	g•
)

52 
lw
 
	gs4
, 16(
	g•
)

53 
lw
 
	gs5
, 20(
	g•
)

54 
lw
 
	gs6
, 24(
	g•
)

55 
lw
 
	gs7
, 28(
	g•
)

56 
lw
 
	gs8
, 32(
	g•
)

57 
lw
 
	ggp
, 36(
	g•
)

58 
lw
 
	gø
, 40(
	g•
)

59 
n›


62 
j
 
ø


63 
addi
 
	g•
, sp, 44

64 .
íd
 
	gmùs_swôch


	@arch/mips/mips/syscall.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~<machöe/pcb.h
>

5 
	~<machöe/•l.h
>

6 
	~<machöe/å≠‰ame.h
>

7 
	~<kîn/ˇŒno.h
>

8 
	~<sysˇŒ.h
>

49 
	$mùs_sysˇŒ
(
å≠‰ame
 *
tf
)

51 
ˇŒno
;

52 
öt32_t
 
ªtvÆ
;

53 
îr
, 
ch
;

54 
pid_t
 
pidªtu∫
;

55 *
ht›
;

57 
	`as£π
(
cur•l
==0);

59 
ˇŒno
 = 
tf
->
tf_v0
;

70 
ªtvÆ
 = 0;

72 
ˇŒno
) {

74 
SYS__exô
:

75 
	`sys_exô
(
tf
->
tf_a0
);

78 
SYS_execv
:

79 
îr
 = 
	`sys_execv
(
tf
->
tf_a0
,Åf->
tf_a1
);

82 
SYS_ªboŸ
:

83 
îr
 = 
	`sys_ªboŸ
(
tf
->
tf_a0
);

86 
SYS_¥ötch¨
:

87 
îr
 = 
	`sys_¥ötch¨
(
tf
->
tf_a0
);

90 
SYS_ªadch¨
:

91 
ch
 = 
	`sys_ªadch¨
();

92 
tf
->
tf_v0
 = 
ch
;

93 
tf
->
tf_a3
 = 0;

97 
SYS_f‹k
:

98 
pidªtu∫
 = 
	`sys_f‹k
(
tf
);

99 
tf
->
tf_v0
 = 
pidªtu∫
;

100 i‡(
pidªtu∫
== -1){

101 
tf
->
tf_v0
 = 
ENOMEM
;

102 
tf
->
tf_a3
 = 1;

104 
tf
->
tf_a3
 = 0;

107 
SYS_gëpid
:

108 
pidªtu∫
 = 
	`sys_gë_pid
();

109 
tf
->
tf_v0
 = 
pidªtu∫
;

110 
tf
->
tf_a3
 = 0;

113 
SYS_waôpid
:

114 
pidªtu∫
 = 
	`sys_waôpid
(
tf
->
tf_a0
,Åf->
tf_a1
,Åf->
tf_a2
);

115 
tf
->
tf_v0
 = 
pidªtu∫
;

116 
tf
->
tf_a3
 = 0;

119 
SYS_sbrk
:

120 
ht›
 = 
	`sys_sbrk
(
tf
->
tf_a0
, &
ªtvÆ
);

121 i‡(
ht›
 == (*)-1){

122 
tf
->
tf_v0
 = 
ªtvÆ
;

123 
tf
->
tf_a3
 = 1;

125 
tf
->
tf_v0
 = 
ht›
;

126 
tf
->
tf_a3
 = 0;

130 
	`k¥ötf
("Unknow¿sysˇŒ %d\n", 
ˇŒno
);

131 
îr
 = 
ENOSYS
;

135 i‡(
ˇŒno
!=
SYS_f‹k
 && cÆ o!=
SYS_gëpid
 && cÆ ÿ!
SYS_waôpid
 &&

136 
ˇŒno
!
SYS_ªadch¨
 && cÆ o!
SYS_sbrk
) {

137 i‡(
îr
) {

143 
tf
->
tf_v0
 = 
îr
;

144 
tf
->
tf_a3
 = 1;

148 
tf
->
tf_v0
 = 
ªtvÆ
;

149 
tf
->
tf_a3
 = 0;

158 
tf
->
tf_ïc
 += 4;

161 
	`as£π
(
cur•l
==0);

162 
	}
}

	@arch/mips/mips/threadstart.S

1 
	~<machöe/asmdefs.h
>

3 .
	gãxt


4 .
£t
 
	gn‹e‹dî


6 .
globl
 
	gmùs_thªad°¨t


7 .
ty≥
 
	gmùs_thªad°¨t
,@
	gfun˘i⁄


8 .
ít
 
mùs_thªad°¨t


9 
	gmùs_thªad°¨t
:

26 
addiu
 
•
, 
	g•
, -16

28 
move
 
	gø
, 
$0


30 
move
 
	ga0
, 
s0


31 
move
 
	ga1
, 
s1


32 
j
 
mi_thªad°¨t


33 
move
 
	ga2
, 
	gs2


35 .
íd
 
	gmùs_thªad°¨t


	@arch/mips/mips/tlb_mips1.S

1 
	~<machöe/asmdefs.h
>

2 
	~<machöe/•ecüÃeg.h
>

4 .
	gãxt


5 .
£t
 
	gn‹e‹dî


11 .
globl
 
	gTLB_R™dom


12 .
ty≥
 
	gTLB_R™dom
,@
	gfun˘i⁄


13 .
ít
 
TLB_R™dom


14 
	gTLB_R™dom
:

15 
mtc0
 
a0
, 
c0_íåyhi


16 
mtc0
 
	ga1
, 
c0_íåylo


17 
ébwr


18 
j
 
ø


19 
	gn›


20 .
íd
 
	gTLB_R™dom


26 .
	gãxt


27 .
globl
 
	gTLB_Wrôe


28 .
ty≥
 
	gTLB_Wrôe
,@
	gfun˘i⁄


29 .
ít
 
TLB_Wrôe


30 
	gTLB_Wrôe
:

31 
mtc0
 
a0
, 
c0_íåyhi


32 
mtc0
 
	ga1
, 
c0_íåylo


33 
¶l
 
	gt0
, 
	ga2
, 
CIN_INDEXSHIFT


34 
mtc0
 
	gt0
, 
c0_ödex


35 
ébwi


36 
j
 
ø


37 
	gn›


38 .
íd
 
	gTLB_Wrôe


44 .
	gãxt


45 .
globl
 
	gTLB_Ród


46 .
ty≥
 
	gTLB_Ród
,@
	gfun˘i⁄


47 .
ít
 
TLB_Ród


48 
	gTLB_Ród
:

49 
¶l
 
t0
, 
	ga2
, 
CIN_INDEXSHIFT


50 
mtc0
 
	gt0
, 
c0_ödex


51 
ébr


52 
mfc0
 
	gt0
, 
c0_íåyhi


53 
mfc0
 
	gt1
, 
c0_íåylo


54 
sw
 
	gt0
, 0(
	ga0
)

55 
sw
 
	gt1
, 0(
	ga1
)

56 
j
 
ø


57 
	gn›


58 .
íd
 
	gTLB_Ród


64 .
	gãxt


65 .
globl
 
	gTLB_Probe


66 .
ty≥
 
	gTLB_Probe
,@
	gfun˘i⁄


67 .
ít
 
TLB_Probe


68 
	gTLB_Probe
:

69 
mtc0
 
a0
, 
c0_íåyhi


70 
mtc0
 
	ga1
, 
c0_íåylo


71 
ébp


72 
mfc0
 
	gt0
, 
c0_ödex


79 
bgez
 
	gt0
, 1f

80 
n›


81 
addi
 
	gv0
, 
	gz0
, -1

82 
j
 
ø


83 
	gn›


87 
™di
 
t1
, 
	gt0
, 
CIN_INDEX


88 
j
 
ø


89 
§a
 
	gv0
, 
	gt1
, 
	gCIN_INDEXSHIFT


90 .
íd
 
	gTLB_Probe


105 .
	gãxt


106 .
globl
 
	gTLB_Re£t


107 .
ty≥
 
	gTLB_Re£t
,@
	gfun˘i⁄


108 .
ít
 
TLB_Re£t


109 
	gTLB_Re£t
:

110 
li
 
t0
, 0

111 
li
 
	gt1
, 0x81000000

113 
mtc0
 
$0
, 
c0_íåylo


114 
mtc0
 
	gt1
, 
c0_íåyhi


115 
ébp


116 
mfc0
 
	gt2
, 
c0_ödex


117 
bgez
 
	gt2
, 1b

118 
addiu
 
	gt1
,Å1, 0x1000

119 
mtc0
 
	gt0
, 
c0_ödex


120 
addiu
 
	gt0
,Å0, 0x100

121 
b√
 
	gt0
, 0x4000, 1b

122 
ébwi


123 
j
 
ø


124 
	gn›


125 .
íd
 
	gTLB_Re£t


	@arch/mips/mips/trap.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/å≠‰ame.h
>

4 
	~<machöe/•ecüÃeg.h
>

5 
	~<machöe/pcb.h
>

6 
	~<machöe/•l.h
>

7 
	~<vm.h
>

8 
	~<thªad.h
>

9 
	~<cuπhªad.h
>

11 
u_öt32_t
 
curk°ack
;

14 
asm_u£rmode
(
å≠‰ame
 *
tf
);

17 
	#NTRAPCODES
 13

	)

18 c⁄° *c⁄° 
	gå≠codíames
[
NTRAPCODES
] = {

39 
	$kûl_cuπhªad
(
u_öt32_t
 
ïc
, 
code
, u_öt32_à
vaddr
)

41 
	`as£π
(
code
<
NTRAPCODES
);

42 
	`k¥ötf
("Fatal user modeÅrap %u (%s,Épc 0x%x, vaddr 0x%x)\n",

43 
code
, 
å≠codíames
[code], 
ïc
, 
vaddr
);

45 
	`sys_exô
(0);

46 
	`∑nic
("I don't know howÅo handleÅhis\n");

47 
	}
}

55 
	$mùs_å≠
(
å≠‰ame
 *
tf
)

57 
u_öt32_t
 
code
, 
isuéb
, 
iskîn
;

58 
ßve•l
;

61 
	`as£π
((
å≠‰ame
)==(37*4));

64 
ßve•l
 = 
cur•l
;

67 
cur•l
 = 
SPL_HIGH
;

72 
code
 = (
tf
->
tf_ˇu£
 & 
CCA_CODE
Ë>> 
CCA_CODESHIFT
;

73 
isuéb
 = (
tf
->
tf_ˇu£
 & 
CCA_UTLB
);

74 
iskîn
 = (
tf
->
tf_°©us
 & 
CST_KUp
)==0;

76 
	`as£π
(
code
<
NTRAPCODES
);

79 i‡(
cuπhªad
 !
NULL
 && cuπhªad->
t_°ack
 != NULL) {

80 
	`as£π
((
vaddr_t
)
tf
 > (vaddr_t)
cuπhªad
->
t_°ack
);

81 
	`as£π
((
vaddr_t
)
tf
 < (vaddr_t)(
cuπhªad
->
t_°ack
+
STACK_SIZE
));

85 i‡(
code
 =
EX_IRQ
) {

86 
	`mùs_öãºu±
(
tf
->
tf_ˇu£
);

87 
d⁄e
;

95 
	`•lx
(
ßve•l
);

98 i‡(
code
 =
EX_SYS
) {

100 
	`as£π
(
cur•l
==0);

102 
	`DEBUG
(
DB_SYSCALL
, "syscall: #%d,árgs %x %x %x %x\n",

103 
tf
->
tf_v0
,Åf->
tf_a0
,Åf->
tf_a1
,Åf->
tf_a2
,Åf->
tf_a3
);

105 
	`mùs_sysˇŒ
(
tf
);

106 
d⁄e
;

114 
code
) {

115 
EX_MOD
:

116 i‡(
	`vm_Áu…
(
VM_FAULT_READONLY
, 
tf
->
tf_vaddr
)==0) {

117 
d⁄e
;

120 
EX_TLBL
:

121 i‡(
	`vm_Áu…
(
VM_FAULT_READ
, 
tf
->
tf_vaddr
)==0) {

122 
d⁄e
;

125 
EX_TLBS
:

126 i‡(
	`vm_Áu…
(
VM_FAULT_WRITE
, 
tf
->
tf_vaddr
)==0) {

127 
d⁄e
;

130 
EX_IBE
:

131 
EX_DBE
:

141 
	`∑nic
("Bu†îr‹Éx˚±i⁄, PC=0x%x\n", 
tf
->
tf_ïc
);

151 i‡(!
iskîn
) {

156 
	`kûl_cuπhªad
(
tf
->
tf_ïc
, 
code
,Åf->
tf_vaddr
);

157 
d⁄e
;

181 i‡(
cuπhªad
 !
NULL
 && cuπhªad->
t_pcb
.
pcb_badÁu…func
 != NULL) {

182 
tf
->
tf_ïc
 = (
vaddr_t
Ë
cuπhªad
->
t_pcb
.
pcb_badÁu…func
;

183 
d⁄e
;

190 
	`k¥ötf
("∑nic: F©ÆÉx˚±i⁄ %u (%sËö kî√»mode\n", 
code
,

191 
å≠codíames
[
code
]);

192 
	`k¥ötf
("panic: EPC 0x%x,Éxception vaddr 0x%x\n",

193 
tf
->
tf_ïc
,Åf->
tf_vaddr
);

195 
	`∑nic
("I can't handleÅhis... IÅhink I'll just dieÇow...\n");

197 
d⁄e
:

199 
	`•lhigh
();

207 
cur•l
 = 
ßve•l
;

218 
	`as£π
(
	`SAME_STACK
(
curk°ack
-1, (
vaddr_t
)
tf
));

219 
	}
}

237 
	$mùs_u£rmode
(
å≠‰ame
 *
tf
)

247 
	`•lhigh
();

248 
cur•l
 = 0;

263 
	`as£π
(
	`SAME_STACK
(
curk°ack
-1, (
vaddr_t
)
tf
));

268 
	`asm_u£rmode
(
tf
);

269 
	}
}

278 
	$md_u£rmode
(
¨gc
, 
u£Ωå_t
 
¨gv
, 
vaddr_t
 
°ack
, vaddr_à
íåy
)

280 
å≠‰ame
 
tf
;

282 
	`bzîo
(&
tf
, (tf));

284 
tf
.
tf_°©us
 = 
CST_IRQMASK
 | 
CST_IEp
 | 
CST_KUp
;

285 
tf
.
tf_ïc
 = 
íåy
;

286 
tf
.
tf_a0
 = 
¨gc
;

287 
tf
.
tf_a1
 = (
vaddr_t
)
¨gv
;

288 
tf
.
tf_•
 = 
°ack
;

290 
	`mùs_u£rmode
(&
tf
);

291 
	}
}

	@asst1/catlock.c

17 
	~<ty≥s.h
>

18 
	~<lib.h
>

19 
	~<ã°.h
>

20 
	~<thªad.h
>

21 
	~<synch.h
>

34 
	#NFOODBOWLS
 2

	)

40 
	#NCATS
 6

	)

46 
	#NMICE
 2

	)

48 
	#TIMES_EATING
 4

	)

49 
	#CAT
 'c'

	)

50 
	#MOUSE
 'm'

	)

51 
	#FREE
 'f'

	)

58 
	sbowl


60 
	mnumbî
;

61 
	mwho
;

64 
bowl
 *

65 
	$bowl_¸óã
 (
num
){

66 
bowl
 *
√w_bowl
;

67 
√w_bowl
 = 
	`kmÆloc
((
bowl
));

69 i‡(
√w_bowl
 =
NULL
) {

70  
NULL
;

73 
√w_bowl
->
numbî
 = 
num
;

74 
√w_bowl
->
who
 = 
FREE
;

75  
√w_bowl
;

76 
	}
}

78 
bowl
 *
	gbowl1
;

79 
bowl
 *
	gbowl2
;

81 
	s™imÆ


83 
	mnumbî
;

84 
	mwho
;

85 
	mtimes_óãn
;

88 
™imÆ
 *

89 
	$™imÆ_¸óã
 (
num
, 
wh
){

90 
™imÆ
 *
√w_™imÆ
;

91 
√w_™imÆ
 = 
	`kmÆloc
((
™imÆ
));

93 i‡(
√w_™imÆ
 =
NULL
) {

94  
NULL
;

97 
√w_™imÆ
->
numbî
 = 
num
;

98 
√w_™imÆ
->
who
 = 
wh
;

99 
√w_™imÆ
->
times_óãn
 = 0;

100  
√w_™imÆ
;

101 
	}
}

103 
lock
 *
	gbowl_1
;

104 
lock
 *
	gbowl_2
;

105 
lock
 *
	g›íbowl_lock
;

107 
cv
 *
	g‰ì_bowl
;

110 
	$lock_ót
(c⁄° *
who
, 
num
, 
bowl
, 
ôî©i⁄
)

112 
	`k¥ötf
("%s: %d sèπ†ótög: bow»%d, iãøti⁄ %d\n", 
who
, 
num
,

113 
bowl
, 
ôî©i⁄
);

114 
	`˛ock¶ìp
(1);

115 
	`k¥ötf
("%s: %dÉnd†ótög: bow»%d, iãøti⁄ %d\n", 
who
, 
num
,

116 
bowl
, 
ôî©i⁄
);

117 
	}
}

137 
	$ˇéock
(* 
unu£dpoöãr
,

138 
ˇäumbî
)

140 
i
;

141 
i
 = 0; i < 
TIMES_EATING
; i++)

143 
	`lock_acquúe
(
›íbowl_lock
);

144 
bowl1
->
who
 !
FREE
 && 
bowl2
->who != FREE) {

145 
	`cv_waô
(
‰ì_bowl
, 
›íbowl_lock
);

147 
bowl1
->
who
 =
MOUSE
 || 
bowl2
->who == MOUSE) {

148 
	`cv_waô
(
‰ì_bowl
, 
›íbowl_lock
);

151 i‡(
bowl1
->
who
 =
FREE
) {

154 
	`lock_acquúe
(
bowl_1
);

155 
bowl1
->
who
 = 
CAT
;

156 
	`lock_ªÀa£
(
›íbowl_lock
);

157 
	`lock_ót
("ˇt", 
ˇäumbî
, 1, 
i
);

158 
bowl1
->
who
 = 
FREE
;

159 
	`cv_sig«l
(
‰ì_bowl
, 
›íbowl_lock
);

160 
	`lock_ªÀa£
(
bowl_1
);

164 } i‡(
bowl2
 ->
who
 =
FREE
) {

167 
	`lock_acquúe
(
bowl_2
);

168 
bowl2
->
who
 = 
CAT
;

169 
	`lock_ªÀa£
(
›íbowl_lock
);

170 
	`lock_ót
("ˇt", 
ˇäumbî
, 2, 
i
);

171 
bowl2
->
who
 = 
FREE
;

172 
	`cv_sig«l
(
‰ì_bowl
, 
›íbowl_lock
);

173 
	`lock_ªÀa£
(
bowl_2
);

178 
i
--;

187 (Ë
unu£dpoöãr
;

188 (Ë
ˇäumbî
;

189 
	}
}

210 
	$mou£lock
(* 
unu£dpoöãr
,

211 
mou£numbî
)

213 
i
;

214 
i
 = 0; i < 
TIMES_EATING
; i++)

216 
	`lock_acquúe
(
›íbowl_lock
);

217 
bowl1
->
who
 !
FREE
 && 
bowl2
->who != FREE) {

218 
	`cv_waô
(
‰ì_bowl
, 
›íbowl_lock
);

220 
bowl1
->
who
 =
CAT
 || 
bowl2
->who == CAT) {

221 
	`cv_waô
(
‰ì_bowl
, 
›íbowl_lock
);

225 i‡(
bowl1
->
who
 =
FREE
) {

228 
	`lock_acquúe
(
bowl_1
);

229 
bowl1
->
who
 = 
MOUSE
;

230 
	`lock_ªÀa£
(
›íbowl_lock
);

231 
	`lock_ót
("mou£", 
mou£numbî
, 1, 
i
);

232 
bowl1
->
who
 = 
FREE
;

233 
	`cv_sig«l
(
‰ì_bowl
, 
›íbowl_lock
);

234 
	`lock_ªÀa£
(
bowl_1
);

236 } i‡(
bowl2
 ->
who
 =
FREE
) {

238 
	`lock_acquúe
(
bowl_2
);

239 
bowl2
->
who
 = 
MOUSE
;

240 
	`lock_ªÀa£
(
›íbowl_lock
);

241 
	`lock_ót
("mou£", 
mou£numbî
, 2, 
i
);

242 
bowl2
->
who
 = 
FREE
;

243 
	`cv_sig«l
(
‰ì_bowl
, 
›íbowl_lock
);

244 
	`lock_ªÀa£
(
bowl_2
);

248 
i
--;

259 (Ë
unu£dpoöãr
;

260 (Ë
mou£numbî
;

261 
	}
}

280 
	$ˇtmou£lock
(
«rgs
,

281 ** 
¨gs
)

283 
ödex
, 
îr‹
;

289 (Ë
«rgs
;

290 (Ë
¨gs
;

292 
bowl1
 = 
	`bowl_¸óã
(1);

293 
bowl2
 = 
	`bowl_¸óã
(2);

299 
bowl_1
 = 
	`lock_¸óã
("bowl_1");

300 
bowl_2
 = 
	`lock_¸óã
("bowl_2");

301 
›íbowl_lock
 = 
	`lock_¸óã
("openbowl_lock");

302 
‰ì_bowl
 = 
	`cv_¸óã
("free_bowl");

308 
ödex
 = 0; index < 
NCATS
; index++) {

309 
	`™imÆ_¸óã
 (
ödex
, 
CAT
);

310 
îr‹
 = 
	`thªad_f‹k
("catlockÅhread",

311 
NULL
,

312 
ödex
,

313 
ˇéock
,

314 
NULL


321 i‡(
îr‹
) {

323 
	`∑nic
("catlock:Åhread_fork failed: %s\n",

324 
	`°ªº‹
(
îr‹
)

333 
ödex
 = 0; index < 
NMICE
; index++) {

334 
	`™imÆ_¸óã
 (
ödex
, 
MOUSE
);

335 
îr‹
 = 
	`thªad_f‹k
("mouselockÅhread",

336 
NULL
,

337 
ödex
,

338 
mou£lock
,

339 
NULL


346 i‡(
îr‹
) {

348 
	`∑nic
("mouselock:Åhread_fork failed: %s\n",

349 
	`°ªº‹
(
îr‹
)

355 
	}
}

	@asst1/catsem.c

17 
	~<ty≥s.h
>

18 
	~<lib.h
>

19 
	~<ã°.h
>

20 
	~<thªad.h
>

33 
	#NFOODBOWLS
 2

	)

39 
	#NCATS
 6

	)

45 
	#NMICE
 2

	)

56 
	$£m_ót
(c⁄° *
who
, 
num
, 
bowl
, 
ôî©i⁄
)

58 
	`k¥ötf
("%s: %d sèπ†ótög: bow»%d, iãøti⁄ %d\n", 
who
, 
num
,

59 
bowl
, 
ôî©i⁄
);

60 
	`˛ock¶ìp
(1);

61 
	`k¥ötf
("%s: %dÉnd†ótög: bow»%d, iãøti⁄ %d\n", 
who
, 
num
,

62 
bowl
, 
ôî©i⁄
);

63 
	}
}

82 
	$ˇt£m
(* 
unu£dpoöãr
,

83 
ˇäumbî
)

89 (Ë
unu£dpoöãr
;

90 (Ë
ˇäumbî
;

91 
	}
}

112 
	$mou££m
(* 
unu£dpoöãr
,

113 
mou£numbî
)

119 (Ë
unu£dpoöãr
;

120 (Ë
mou£numbî
;

121 
	}
}

140 
	$ˇtmou££m
(
«rgs
,

141 ** 
¨gs
)

143 
ödex
, 
îr‹
;

149 (Ë
«rgs
;

150 (Ë
¨gs
;

156 
ödex
 = 0; index < 
NCATS
; index++) {

158 
îr‹
 = 
	`thªad_f‹k
("catsem Thread",

159 
NULL
,

160 
ödex
,

161 
ˇt£m
,

162 
NULL


169 i‡(
îr‹
) {

171 
	`∑nic
("catsem:Åhread_fork failed: %s\n",

172 
	`°ªº‹
(
îr‹
)

181 
ödex
 = 0; index < 
NMICE
; index++) {

183 
îr‹
 = 
	`thªad_f‹k
("mousesem Thread",

184 
NULL
,

185 
ödex
,

186 
mou££m
,

187 
NULL


194 i‡(
îr‹
) {

196 
	`∑nic
("mousesem:Åhread_fork failed: %s\n",

197 
	`°ªº‹
(
îr‹
)

203 
	}
}

	@asst1/stoplight.c

17 
	~<ty≥s.h
>

18 
	~<lib.h
>

19 
	~<ã°.h
>

20 
	~<thªad.h
>

21 
	~<synch.h
>

34 
	#NCARS
 20

	)

35 
	#SQUARELOCKED
 1

	)

36 
	#SQUAREUNLOCKED
 0

	)

37 
	#N
 0

	)

38 
	#E
 1

	)

39 
	#S
 2

	)

40 
	#W
 3

	)

42 
£m≠h‹e
 *
	gt£m
 = 
NULL
;

44 
cv
 *
	gcv≠¥ﬂch_N
;

45 
cv
 *
	gcv≠¥ﬂch_E
;

46 
cv
 *
	gcv≠¥ﬂch_W
;

47 
cv
 *
	gcv≠¥ﬂch_S
;

49 
cv
 *
	gcvsqu¨eNW
;

50 
cv
 *
	gcvsqu¨eNE
;

51 
cv
 *
	gcvsqu¨eSW
;

52 
cv
 *
	gcvsqu¨eSE
;

54 
lock
 *
	glock_NW
;

55 
lock
 *
	glock_NE
;

56 
lock
 *
	glock_SW
;

57 
lock
 *
	glock_SE
;

59 
lock
 *
	g≠¥ﬂch_N
;

60 
lock
 *
	g≠¥ﬂch_E
;

61 
lock
 *
	g≠¥ﬂch_W
;

62 
lock
 *
	g≠¥ﬂch_S
;

64 
dúe˘i⁄squ¨e
 *
	gsqu¨e1
;

65 
dúe˘i⁄squ¨e
 *
	gsqu¨e2
;

66 
dúe˘i⁄squ¨e
 *
	gsqu¨e3
;

67 
dúe˘i⁄squ¨e
 *
	gsqu¨e4
;

69 
dúe˘i⁄squ¨e
 *
	g≠pN
;

70 
dúe˘i⁄squ¨e
 *
	g≠pE
;

71 
dúe˘i⁄squ¨e
 *
	g≠pS
;

72 
dúe˘i⁄squ¨e
 *
	g≠pW
;

74 
dúe˘i⁄squ¨e
 *
	g¥ötout
;

75 
lock
 *
	g¥öt_lock
;

76 
cv
 *
	gcv_¥öt
;

83 c⁄° *
	gdúe˘i⁄s
[] = { "N", "E", "S", "W" };

85 c⁄° *
	gmsgs
[] = {

93 
	sdúe˘i⁄squ¨e


95 
	msqu¨íumbî
;

96 
	mi¶ocked
;

99 
dúe˘i⁄squ¨e
 *

100 
	$dúe˘i⁄squ¨e_¸óã
 (
squ¨íumbî
){

101 
dúe˘i⁄squ¨e
 *
√w_dúe˘i⁄squ¨e
;

102 
√w_dúe˘i⁄squ¨e
 = 
	`kmÆloc
((
dúe˘i⁄squ¨e
));

104 i‡(
√w_dúe˘i⁄squ¨e
 =
NULL
) {

105  
NULL
;

108 
√w_dúe˘i⁄squ¨e
->
squ¨íumbî
 = squarenumber;

109 
√w_dúe˘i⁄squ¨e
->
i¶ocked
 = 
SQUAREUNLOCKED
;

110  
√w_dúe˘i⁄squ¨e
;

111 
	}
}

114 íum { 
	mAPPROACHING
, 
	mREGION1
, 
	mREGION2
, 
	mREGION3
, 
	mLEAVING
 };

116 íum { 
	mSTRAIGHT
, 
	mLEFT
, 
	mRIGHT
 };

119 
	$mesßge
(
msg_ƒ
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
de°dúe˘i⁄
)

121 
¥ötout
 =
SQUARELOCKED
)

122 
	`cv_waô
(
cv_¥öt
, 
¥öt_lock
);

123 
	`lock_acquúe
 (
¥öt_lock
);

124 
¥ötout
 = 
SQUARELOCKED
;

126 
	`k¥ötf
("%s car = %2d, direction = %s, destination = %s\n",

127 
msgs
[
msg_ƒ
], 
ˇ∫umbî
,

128 
dúe˘i⁄s
[
ˇrdúe˘i⁄
], dúe˘i⁄s[
de°dúe˘i⁄
]);

130 
¥ötout

SQUAREUNLOCKED
;

131 
	`cv_sig«l
(
cv_¥öt
, 
¥öt_lock
);

132 
	`lock_ªÀa£
 (
¥öt_lock
);

133 
	}
}

154 
	$go°øight
(
ˇrdúe˘i⁄
,

155 
ˇ∫umbî
)

158 i‡(
ˇrdúe˘i⁄
 =
N
){

160 
squ¨e1
->
i¶ocked
 =
SQUARELOCKED
 || 
squ¨e3
->islocked == SQUARELOCKED) {

161 i‡(
squ¨e1
->
i¶ocked
 =
SQUARELOCKED
){

162 
	`cv_sig«l
(
cvsqu¨eSW
, 
lock_SW
);

163 
	`lock_ªÀa£
(
lock_SW
);

164 
	`cv_waô
(
cvsqu¨eNW
, 
lock_NW
);

166 i‡(
squ¨e3
->
i¶ocked
 =
SQUARELOCKED
) {

167 
	`cv_sig«l
(
cvsqu¨eNW
, 
lock_NW
);

168 
	`lock_ªÀa£
(
lock_NW
);

169 
	`cv_waô
(
cvsqu¨eSW
, 
lock_SW
);

172 
	`lock_acquúe
(
lock_NW
);

173 
	`lock_acquúe
(
lock_SW
);

174 
squ¨e1
->
i¶ocked
 = 
SQUARELOCKED
;

175 
squ¨e3
->
i¶ocked
 = 
SQUARELOCKED
;

176 
	`mesßge
(
REGION1
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
S
);

177 
≠pN
->
i¶ocked
 = 
SQUAREUNLOCKED
;

178 
	`cv_sig«l
(
cv≠¥ﬂch_N
, 
≠¥ﬂch_N
);

179 
	`lock_ªÀa£
(
≠¥ﬂch_N
);

180 
	`mesßge
(
REGION2
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
S
);

181 
squ¨e1
->
i¶ocked
 = 
SQUAREUNLOCKED
;

182 
	`cv_sig«l
(
cvsqu¨eNW
, 
lock_NW
);

183 
	`lock_ªÀa£
(
lock_NW
);

184 
	`mesßge
(
LEAVING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
S
);

185 
squ¨e3
->
i¶ocked
 =
SQUAREUNLOCKED
;

186 
	`cv_sig«l
(
cvsqu¨eSW
, 
lock_SW
);

187 
	`lock_ªÀa£
(
lock_SW
);

190 i‡(
ˇrdúe˘i⁄
 =
E
){

192 
squ¨e2
->
i¶ocked
 =
SQUARELOCKED
 || 
squ¨e1
->islocked == SQUARELOCKED) {

193 i‡(
squ¨e2
->
i¶ocked
 =
SQUARELOCKED
){

194 
	`cv_sig«l
(
cvsqu¨eNW
, 
lock_NW
);

195 
	`lock_ªÀa£
(
lock_NW
);

196 
	`cv_waô
(
cvsqu¨eNE
, 
lock_NE
);

198 i‡(
squ¨e1
->
i¶ocked
 =
SQUARELOCKED
) {

199 
	`cv_sig«l
(
cvsqu¨eNE
, 
lock_NE
);

200 
	`lock_ªÀa£
(
lock_NE
);

201 
	`cv_waô
(
cvsqu¨eNW
, 
lock_NW
);

204 
	`lock_acquúe
(
lock_NE
);

205 
	`lock_acquúe
(
lock_NW
);;

206 
squ¨e2
->
i¶ocked
 = 
SQUARELOCKED
;

207 
squ¨e1
->
i¶ocked
 = 
SQUARELOCKED
;

208 
	`mesßge
(
REGION1
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
W
);

209 
≠pE
->
i¶ocked
 = 
SQUAREUNLOCKED
;

210 
	`cv_sig«l
(
cv≠¥ﬂch_E
, 
≠¥ﬂch_E
);

211 
	`lock_ªÀa£
(
≠¥ﬂch_E
);

212 
	`mesßge
(
REGION2
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
W
);

213 
squ¨e2
->
i¶ocked
 = 
SQUAREUNLOCKED
;

214 
	`cv_sig«l
(
cvsqu¨eNE
, 
lock_NE
);

215 
	`lock_ªÀa£
(
lock_NE
);

216 
	`mesßge
(
LEAVING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
W
);

217 
squ¨e1
->
i¶ocked
 =
SQUAREUNLOCKED
;

218 
	`cv_sig«l
(
cvsqu¨eNW
, 
lock_NW
);

219 
	`lock_ªÀa£
(
lock_NW
);

222 i‡(
ˇrdúe˘i⁄
 =
W
){

224 
squ¨e3
->
i¶ocked
 =
SQUARELOCKED
 || 
squ¨e4
->islocked == SQUARELOCKED) {

225 i‡(
squ¨e3
->
i¶ocked
 =
SQUARELOCKED
){

226 
	`cv_sig«l
(
cvsqu¨eSE
, 
lock_SE
);

227 
	`lock_ªÀa£
(
lock_SE
);

228 
	`cv_waô
(
cvsqu¨eSW
, 
lock_SW
);

230 i‡(
squ¨e4
->
i¶ocked
 =
SQUARELOCKED
) {

231 
	`cv_sig«l
(
cvsqu¨eSW
, 
lock_SW
);

232 
	`lock_ªÀa£
(
lock_SW
);

233 
	`cv_waô
(
cvsqu¨eSE
, 
lock_SE
);

236 
	`lock_acquúe
(
lock_SW
);

237 
	`lock_acquúe
(
lock_SE
);

238 
squ¨e3
->
i¶ocked
 = 
SQUARELOCKED
;

239 
squ¨e4
->
i¶ocked
 = 
SQUARELOCKED
;

240 
	`mesßge
(
REGION1
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
E
);

241 
≠pW
->
i¶ocked
 = 
SQUAREUNLOCKED
;

242 
	`cv_sig«l
(
cv≠¥ﬂch_W
, 
≠¥ﬂch_W
);

243 
	`lock_ªÀa£
(
≠¥ﬂch_W
);

244 
	`mesßge
(
REGION2
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
E
);

245 
squ¨e3
->
i¶ocked
 = 
SQUAREUNLOCKED
;

246 
	`cv_sig«l
(
cvsqu¨eSW
, 
lock_SW
);

247 
	`lock_ªÀa£
(
lock_SW
);

248 
	`mesßge
(
LEAVING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
E
);

249 
squ¨e4
->
i¶ocked
 =
SQUAREUNLOCKED
;

250 
	`cv_sig«l
(
cvsqu¨eSE
, 
lock_SE
);

251 
	`lock_ªÀa£
(
lock_SE
);

254 i‡(
ˇrdúe˘i⁄
 =
S
){

256 
squ¨e4
->
i¶ocked
 =
SQUARELOCKED
 || 
squ¨e2
->islocked == SQUARELOCKED) {

257 i‡(
squ¨e4
->
i¶ocked
 =
SQUARELOCKED
){

258 
	`cv_sig«l
(
cvsqu¨eNE
, 
lock_NE
);

259 
	`lock_ªÀa£
(
lock_NE
);

260 
	`cv_waô
(
cvsqu¨eSE
, 
lock_SE
);

262 i‡(
squ¨e2
->
i¶ocked
 =
SQUARELOCKED
) {

263 
	`cv_sig«l
(
cvsqu¨eSE
, 
lock_SE
);

264 
	`lock_ªÀa£
(
lock_SE
);

265 
	`cv_waô
(
cvsqu¨eNE
, 
lock_NE
);

268 
	`lock_acquúe
(
lock_SE
);

269 
	`lock_acquúe
(
lock_NE
);;

270 
squ¨e4
->
i¶ocked
 = 
SQUARELOCKED
;

271 
squ¨e2
->
i¶ocked
 = 
SQUARELOCKED
;

272 
	`mesßge
(
REGION1
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
N
);

273 
≠pS
->
i¶ocked
 = 
SQUAREUNLOCKED
;

274 
	`cv_sig«l
(
cv≠¥ﬂch_S
, 
≠¥ﬂch_S
);

275 
	`lock_ªÀa£
(
≠¥ﬂch_S
);

276 
	`mesßge
(
REGION2
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
N
);

277 
squ¨e4
->
i¶ocked
 = 
SQUAREUNLOCKED
;

278 
	`cv_sig«l
(
cvsqu¨eSE
, 
lock_SE
);

279 
	`lock_ªÀa£
(
lock_SE
);

280 
	`mesßge
(
LEAVING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
N
);

281 
squ¨e2
->
i¶ocked
 =
SQUAREUNLOCKED
;

282 
	`cv_sig«l
(
cvsqu¨eNE
, 
lock_NE
);

283 
	`lock_ªÀa£
(
lock_NE
);

286 
	}
}

308 
	$tu∫À·
(
ˇrdúe˘i⁄
,

309 
ˇ∫umbî
)

312 i‡(
ˇrdúe˘i⁄
 =
N
){

314 
squ¨e1
->
i¶ocked
 =
SQUARELOCKED
 || 
squ¨e3
->islocked == SQUARELOCKED) {

315 i‡(
squ¨e1
->
i¶ocked
 =
SQUARELOCKED
){

316 
	`cv_sig«l
(
cvsqu¨eSW
, 
lock_SW
);

317 
	`lock_ªÀa£
(
lock_SW
);

318 
	`cv_waô
(
cvsqu¨eNW
, 
lock_NW
);

320 i‡(
squ¨e3
->
i¶ocked
 =
SQUARELOCKED
) {

321 
	`cv_sig«l
(
cvsqu¨eNW
, 
lock_NW
);

322 
	`lock_ªÀa£
(
lock_NW
);

323 
	`cv_waô
(
cvsqu¨eSW
, 
lock_SW
);

326 
	`lock_acquúe
(
lock_NW
);

327 
	`lock_acquúe
(
lock_SW
);

328 
squ¨e1
->
i¶ocked
 = 
SQUARELOCKED
;

329 
squ¨e3
->
i¶ocked
 = 
SQUARELOCKED
;

330 
	`mesßge
(
REGION1
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
E
);

331 
≠pN
->
i¶ocked
 = 
SQUAREUNLOCKED
;

332 
	`cv_sig«l
(
cv≠¥ﬂch_N
, 
≠¥ﬂch_N
);

333 
	`lock_ªÀa£
(
≠¥ﬂch_N
);

334 
	`mesßge
(
REGION2
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
E
);

335 
squ¨e1
->
i¶ocked
 = 
SQUAREUNLOCKED
;

336 
	`cv_sig«l
(
cvsqu¨eNW
, 
lock_NW
);

337 
	`lock_ªÀa£
(
lock_NW
);

339 
squ¨e4
->
i¶ocked
==
SQUARELOCKED
) {

340 
	`cv_waô
(
cvsqu¨eSE
, 
lock_SE
);

343 
	`lock_acquúe
(
lock_SE
);

345 
squ¨e4
->
i¶ocked
 = 
SQUARELOCKED
;

346 
	`mesßge
(
REGION3
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
E
);

347 
squ¨e3
->
i¶ocked
 = 
SQUAREUNLOCKED
;

348 
	`cv_sig«l
(
cvsqu¨eSW
, 
lock_SW
);

349 
	`lock_ªÀa£
(
lock_SW
);

350 
	`mesßge
(
LEAVING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
E
);

351 
squ¨e4
->
i¶ocked
 =
SQUAREUNLOCKED
;

352 
	`cv_sig«l
(
cvsqu¨eSE
, 
lock_SE
);

353 
	`lock_ªÀa£
(
lock_SE
);

356 i‡(
ˇrdúe˘i⁄
 =
E
){

358 
squ¨e2
->
i¶ocked
 =
SQUARELOCKED
 || 
squ¨e1
->islocked == SQUARELOCKED) {

359 i‡(
squ¨e2
->
i¶ocked
 =
SQUARELOCKED
){

360 
	`cv_sig«l
(
cvsqu¨eNW
, 
lock_NW
);

361 
	`lock_ªÀa£
(
lock_NW
);

362 
	`cv_waô
(
cvsqu¨eNE
, 
lock_NE
);

364 i‡(
squ¨e1
->
i¶ocked
 =
SQUARELOCKED
) {

365 
	`cv_sig«l
(
cvsqu¨eNE
, 
lock_NE
);

366 
	`lock_ªÀa£
(
lock_NE
);

367 
	`cv_waô
(
cvsqu¨eNW
, 
lock_NW
);

370 
	`lock_acquúe
(
lock_NE
);

371 
	`lock_acquúe
(
lock_NW
);;

372 
squ¨e2
->
i¶ocked
 = 
SQUARELOCKED
;

373 
squ¨e1
->
i¶ocked
 = 
SQUARELOCKED
;

374 
	`mesßge
(
REGION1
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
S
);

375 
≠pE
->
i¶ocked
 = 
SQUAREUNLOCKED
;

376 
	`cv_sig«l
(
cv≠¥ﬂch_E
, 
≠¥ﬂch_E
);

377 
	`lock_ªÀa£
(
≠¥ﬂch_E
);

378 
	`mesßge
(
REGION2
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
S
);

379 
squ¨e2
->
i¶ocked
 = 
SQUAREUNLOCKED
;

380 
	`cv_sig«l
(
cvsqu¨eNE
, 
lock_NE
);

381 
	`lock_ªÀa£
(
lock_NE
);

383 
squ¨e3
->
i¶ocked
==
SQUARELOCKED
) {

384 
	`cv_waô
(
cvsqu¨eSW
, 
lock_SW
);

387 
	`lock_acquúe
(
lock_SW
);

389 
squ¨e3
->
i¶ocked
 = 
SQUARELOCKED
;

390 
	`mesßge
(
REGION3
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
S
);

391 
squ¨e1
->
i¶ocked
 = 
SQUAREUNLOCKED
;

392 
	`cv_sig«l
(
cvsqu¨eNW
, 
lock_NW
);

393 
	`lock_ªÀa£
(
lock_NW
);

395 
	`mesßge
(
LEAVING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
S
);

396 
squ¨e3
->
i¶ocked
 =
SQUAREUNLOCKED
;

397 
	`cv_sig«l
(
cvsqu¨eSW
, 
lock_SW
);

398 
	`lock_ªÀa£
(
lock_SW
);

401 i‡(
ˇrdúe˘i⁄
 =
W
){

403 
squ¨e3
->
i¶ocked
 =
SQUARELOCKED
 || 
squ¨e4
->islocked == SQUARELOCKED) {

404 i‡(
squ¨e3
->
i¶ocked
 =
SQUARELOCKED
){

405 
	`cv_sig«l
(
cvsqu¨eSE
, 
lock_SE
);

406 
	`lock_ªÀa£
(
lock_SE
);

407 
	`cv_waô
(
cvsqu¨eSW
, 
lock_SW
);

409 i‡(
squ¨e4
->
i¶ocked
 =
SQUARELOCKED
) {

410 
	`cv_sig«l
(
cvsqu¨eSW
, 
lock_SW
);

411 
	`lock_ªÀa£
(
lock_SW
);

412 
	`cv_waô
(
cvsqu¨eSE
, 
lock_SE
);

415 
	`lock_acquúe
(
lock_SW
);

416 
	`lock_acquúe
(
lock_SE
);

417 
squ¨e3
->
i¶ocked
 = 
SQUARELOCKED
;

418 
squ¨e4
->
i¶ocked
 = 
SQUARELOCKED
;

419 
	`mesßge
(
REGION1
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
N
);

420 
≠pW
->
i¶ocked
 = 
SQUAREUNLOCKED
;

421 
	`cv_sig«l
(
cv≠¥ﬂch_W
, 
≠¥ﬂch_W
);

422 
	`lock_ªÀa£
(
≠¥ﬂch_W
);

423 
	`mesßge
(
REGION2
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
N
);

424 
squ¨e3
->
i¶ocked
 = 
SQUAREUNLOCKED
;

425 
	`cv_sig«l
(
cvsqu¨eSW
, 
lock_SW
);

426 
	`lock_ªÀa£
(
lock_SW
);

428 
squ¨e2
->
i¶ocked
==
SQUARELOCKED
) {

429 
	`cv_waô
(
cvsqu¨eNE
, 
lock_NE
);

432 
	`lock_acquúe
(
lock_NE
);

434 
squ¨e2
->
i¶ocked
 = 
SQUARELOCKED
;

435 
	`mesßge
(
REGION3
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
N
);

436 
squ¨e4
->
i¶ocked
 = 
SQUAREUNLOCKED
;

437 
	`cv_sig«l
(
cvsqu¨eSE
, 
lock_SE
);

438 
	`lock_ªÀa£
(
lock_SE
);

441 
	`mesßge
(
LEAVING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
N
);

442 
squ¨e2
->
i¶ocked
 =
SQUAREUNLOCKED
;

443 
	`cv_sig«l
(
cvsqu¨eNE
, 
lock_NE
);

444 
	`lock_ªÀa£
(
lock_NE
);

447 i‡(
ˇrdúe˘i⁄
 =
S
){

449 
squ¨e4
->
i¶ocked
 =
SQUARELOCKED
 || 
squ¨e2
->islocked == SQUARELOCKED) {

450 i‡(
squ¨e4
->
i¶ocked
 =
SQUARELOCKED
){

451 
	`cv_sig«l
(
cvsqu¨eNE
, 
lock_NE
);

452 
	`lock_ªÀa£
(
lock_NE
);

453 
	`cv_waô
(
cvsqu¨eSE
, 
lock_SE
);

455 i‡(
squ¨e2
->
i¶ocked
 =
SQUARELOCKED
) {

456 
	`cv_sig«l
(
cvsqu¨eSE
, 
lock_SE
);

457 
	`lock_ªÀa£
(
lock_SE
);

458 
	`cv_waô
(
cvsqu¨eNE
, 
lock_NE
);

461 
	`lock_acquúe
(
lock_SE
);

462 
	`lock_acquúe
(
lock_NE
);;

463 
squ¨e4
->
i¶ocked
 = 
SQUARELOCKED
;

464 
squ¨e2
->
i¶ocked
 = 
SQUARELOCKED
;

465 
	`mesßge
(
REGION1
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
W
);

466 
≠pS
->
i¶ocked
 = 
SQUAREUNLOCKED
;

467 
	`cv_sig«l
(
cv≠¥ﬂch_S
, 
≠¥ﬂch_S
);

468 
	`lock_ªÀa£
(
≠¥ﬂch_S
);

469 
	`mesßge
(
REGION2
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
W
);

470 
squ¨e4
->
i¶ocked
 = 
SQUAREUNLOCKED
;

471 
	`cv_sig«l
(
cvsqu¨eSE
, 
lock_SE
);

472 
	`lock_ªÀa£
(
lock_SE
);

474 
squ¨e1
->
i¶ocked
==
SQUARELOCKED
) {

475 
	`cv_waô
(
cvsqu¨eNW
, 
lock_NW
);

478 
	`lock_acquúe
(
lock_NW
);

480 
squ¨e1
->
i¶ocked
 = 
SQUARELOCKED
;

481 
	`mesßge
(
REGION3
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
W
);

482 
squ¨e2
->
i¶ocked
 = 
SQUAREUNLOCKED
;

483 
	`cv_sig«l
(
cvsqu¨eNE
, 
lock_NE
);

484 
	`lock_ªÀa£
(
lock_NE
);

486 
	`mesßge
(
LEAVING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
W
);

487 
squ¨e1
->
i¶ocked
 =
SQUAREUNLOCKED
;

488 
	`cv_sig«l
(
cvsqu¨eNW
, 
lock_NW
);

489 
	`lock_ªÀa£
(
lock_NW
);

491 
	}
}

513 
	$tu∫right
(
ˇrdúe˘i⁄
,

514 
ˇ∫umbî
)

516 i‡(
ˇrdúe˘i⁄
 =
N
){

518 
squ¨e1
->
i¶ocked
==
SQUARELOCKED
) {

519 
	`cv_waô
(
cvsqu¨eNW
, 
lock_NW
);

522 
	`lock_acquúe
(
lock_NW
);

524 
squ¨e1
->
i¶ocked
 = 
SQUARELOCKED
;

525 
	`mesßge
(
REGION1
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
W
);

526 
≠pN
->
i¶ocked
 = 
SQUAREUNLOCKED
;

527 
	`cv_sig«l
(
cv≠¥ﬂch_N
, 
≠¥ﬂch_N
);

528 
	`lock_ªÀa£
(
≠¥ﬂch_N
);

529 
	`mesßge
(
LEAVING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
W
);

530 
squ¨e1
->
i¶ocked
 = 
SQUAREUNLOCKED
;

531 
	`cv_sig«l
(
cvsqu¨eNW
, 
lock_NW
);

532 
	`lock_ªÀa£
(
lock_NW
);

535 i‡(
ˇrdúe˘i⁄
 =
E
){

537 
squ¨e2
->
i¶ocked
==
SQUARELOCKED
) {

538 
	`cv_waô
(
cvsqu¨eNE
, 
lock_NE
);

541 
	`lock_acquúe
(
lock_NE
);

543 
squ¨e2
->
i¶ocked
 = 
SQUARELOCKED
;

544 
	`mesßge
(
REGION1
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
N
);

545 
≠pE
->
i¶ocked
 = 
SQUAREUNLOCKED
;

546 
	`cv_sig«l
(
cv≠¥ﬂch_E
, 
≠¥ﬂch_E
);

547 
	`lock_ªÀa£
(
≠¥ﬂch_E
);

548 
	`mesßge
(
LEAVING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
N
);

549 
squ¨e2
->
i¶ocked
 = 
SQUAREUNLOCKED
;

550 
	`cv_sig«l
(
cvsqu¨eNE
, 
lock_NE
);

551 
	`lock_ªÀa£
(
lock_NE
);

554 i‡(
ˇrdúe˘i⁄
 =
W
){

556 
squ¨e3
->
i¶ocked
==
SQUARELOCKED
) {

557 
	`cv_waô
(
cvsqu¨eSW
, 
lock_SW
);

560 
	`lock_acquúe
(
lock_SW
);

562 
squ¨e3
->
i¶ocked
 = 
SQUARELOCKED
;

563 
	`mesßge
(
REGION1
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
S
);

564 
≠pW
->
i¶ocked
 = 
SQUAREUNLOCKED
;

565 
	`cv_sig«l
(
cv≠¥ﬂch_W
, 
≠¥ﬂch_W
);

566 
	`lock_ªÀa£
(
≠¥ﬂch_W
);

567 
	`mesßge
(
LEAVING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
S
);

568 
squ¨e3
->
i¶ocked
 = 
SQUAREUNLOCKED
;

569 
	`cv_sig«l
(
cvsqu¨eSW
, 
lock_SW
);

570 
	`lock_ªÀa£
(
lock_SW
);

573 i‡(
ˇrdúe˘i⁄
 =
S
){

575 
squ¨e4
->
i¶ocked
==
SQUARELOCKED
) {

576 
	`cv_waô
(
cvsqu¨eSE
, 
lock_SE
);

579 
	`lock_acquúe
(
lock_SE
);

581 
squ¨e4
->
i¶ocked
 = 
SQUARELOCKED
;

582 
	`mesßge
(
REGION1
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
E
);

583 
≠pS
->
i¶ocked
 = 
SQUAREUNLOCKED
;

584 
	`cv_sig«l
(
cv≠¥ﬂch_S
, 
≠¥ﬂch_S
);

585 
	`lock_ªÀa£
(
≠¥ﬂch_S
);

586 
	`mesßge
(
LEAVING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
E
);

587 
squ¨e4
->
i¶ocked
 = 
SQUAREUNLOCKED
;

588 
	`cv_sig«l
(
cvsqu¨eSE
, 
lock_SE
);

589 
	`lock_ªÀa£
(
lock_SE
);

597 (Ë
ˇrdúe˘i⁄
;

598 (Ë
ˇ∫umbî
;

599 
	}
}

624 
	$≠¥ﬂchöãr£˘i⁄
(* 
unu£dpoöãr
,

625 
ˇ∫umbî
)

627 
ˇrdúe˘i⁄
;

628 
tu∫_dúe˘i⁄
;

634 (Ë
unu£dpoöãr
;

635 (Ë
ˇ∫umbî
;

636 (Ë
go°øight
;

637 (Ë
tu∫À·
;

638 (Ë
tu∫right
;

645 
ˇrdúe˘i⁄
 = 
	`øndom
() % 4;

647 
tu∫_dúe˘i⁄
 = 
	`øndom
() % 3;

652 i‡(
ˇrdúe˘i⁄
 =
N
){

653 if(
tu∫_dúe˘i⁄
 =0Ë
	`mesßge
(
APPROACHING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
S
);

654 if(
tu∫_dúe˘i⁄
 =1Ë
	`mesßge
(
APPROACHING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
E
);

655 if(
tu∫_dúe˘i⁄
 =2Ë
	`mesßge
(
APPROACHING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
W
);

656 
≠pN
->
i¶ocked
==
SQUARELOCKED
) {

657 
	`cv_waô
(
cv≠¥ﬂch_N
, 
≠¥ﬂch_N
);

659 
	`lock_acquúe
(
≠¥ﬂch_N
);

660 
≠pN
->
i¶ocked
 = 
SQUARELOCKED
;

662 i‡(
ˇrdúe˘i⁄
 =
E
){

663 if(
tu∫_dúe˘i⁄
 =0Ë
	`mesßge
(
APPROACHING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
W
);

664 if(
tu∫_dúe˘i⁄
 =1Ë
	`mesßge
(
APPROACHING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
S
);

665 if(
tu∫_dúe˘i⁄
 =2Ë
	`mesßge
(
APPROACHING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
N
);

666 
≠pE
->
i¶ocked
==
SQUARELOCKED
) {

667 
	`cv_waô
(
cv≠¥ﬂch_E
, 
≠¥ﬂch_E
);

669 
	`lock_acquúe
(
≠¥ﬂch_E
);

670 
≠pE
->
i¶ocked
 = 
SQUARELOCKED
;

672 i‡(
ˇrdúe˘i⁄
 =
W
){

673 if(
tu∫_dúe˘i⁄
 =0Ë
	`mesßge
(
APPROACHING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
E
);

674 if(
tu∫_dúe˘i⁄
 =1Ë
	`mesßge
(
APPROACHING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
N
);

675 if(
tu∫_dúe˘i⁄
 =2Ë
	`mesßge
(
APPROACHING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
S
);

676 
≠pW
->
i¶ocked
==
SQUARELOCKED
) {

677 
	`cv_waô
(
cv≠¥ﬂch_W
, 
≠¥ﬂch_W
);

679 
	`lock_acquúe
(
≠¥ﬂch_W
);

680 
≠pW
->
i¶ocked
 = 
SQUARELOCKED
;

682 i‡(
ˇrdúe˘i⁄
 =
S
){

683 if(
tu∫_dúe˘i⁄
 =0Ë
	`mesßge
(
APPROACHING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
N
);

684 if(
tu∫_dúe˘i⁄
 =1Ë
	`mesßge
(
APPROACHING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
W
);

685 if(
tu∫_dúe˘i⁄
 =2Ë
	`mesßge
(
APPROACHING
, 
ˇ∫umbî
, 
ˇrdúe˘i⁄
, 
E
);

686 
≠pS
->
i¶ocked
==
SQUARELOCKED
) {

687 
	`cv_waô
(
cv≠¥ﬂch_S
, 
≠¥ﬂch_S
);

689 
	`lock_acquúe
(
≠¥ﬂch_S
);

690 
≠pS
->
i¶ocked
 = 
SQUARELOCKED
;

695 i‡(
tu∫_dúe˘i⁄
 == 0)

696 
	`go°øight
(
ˇrdúe˘i⁄
,
ˇ∫umbî
);

697 i‡(
tu∫_dúe˘i⁄
 == 1)

698 
	`tu∫À·
(
ˇrdúe˘i⁄
, 
ˇ∫umbî
);

699 i‡(
tu∫_dúe˘i⁄
 ==2)

700 
	`tu∫right
(
ˇrdúe˘i⁄
, 
ˇ∫umbî
);

702 
	`V
(
t£m
);

704 
	}
}

722 
	$¸óãˇrs
(
«rgs
,

723 ** 
¨gs
)

725 
ödex
, 
îr‹
;

731 (Ë
«rgs
;

732 (Ë
¨gs
;

734 
squ¨e1
 = 
	`dúe˘i⁄squ¨e_¸óã
(1);

735 
squ¨e2
 = 
	`dúe˘i⁄squ¨e_¸óã
(2);

736 
squ¨e3
 = 
	`dúe˘i⁄squ¨e_¸óã
(3);

737 
squ¨e4
 = 
	`dúe˘i⁄squ¨e_¸óã
(4);

739 
≠pN
 = 
	`dúe˘i⁄squ¨e_¸óã
(1);

740 
≠pE
 = 
	`dúe˘i⁄squ¨e_¸óã
(2);

741 
≠pS
 = 
	`dúe˘i⁄squ¨e_¸óã
(3);

742 
≠pW
 = 
	`dúe˘i⁄squ¨e_¸óã
(4);

744 
cv≠¥ﬂch_N
 = 
	`cv_¸óã
("approach_N");

745 
cv≠¥ﬂch_E
 = 
	`cv_¸óã
("approach_E");

746 
cv≠¥ﬂch_W
 = 
	`cv_¸óã
("approach_W");

747 
cv≠¥ﬂch_S
 = 
	`cv_¸óã
("approach_S");

749 
cvsqu¨eNW

	`cv_¸óã
("cvsquareNW");

750 
cvsqu¨eNE
 = 
	`cv_¸óã
("cvsquareNE");

751 
cvsqu¨eSW
 = 
	`cv_¸óã
("cvsquareSW");

752 
cvsqu¨eSE
 = 
	`cv_¸óã
("cvsquareSE");

754 
lock_NW
 = 
	`lock_¸óã
("lock_NW");

755 
lock_NE
 = 
	`lock_¸óã
("lock_NE");

756 
lock_SW
 = 
	`lock_¸óã
("lock_SW");

757 
lock_SE
 = 
	`lock_¸óã
("lock_SE");

759 
≠¥ﬂch_N
 = 
	`lock_¸óã
("Approach N");

760 
≠¥ﬂch_E
 = 
	`lock_¸óã
("Approach E");

761 
≠¥ﬂch_W
 = 
	`lock_¸óã
("Approach W");

762 
≠¥ﬂch_S
 = 
	`lock_¸óã
("Approach S");

764 
¥ötout
 = 
	`dúe˘i⁄squ¨e_¸óã
(0);

765 
cv_¥öt
 = 
	`cv_¸óã
("print");

766 
¥öt_lock
 = 
	`lock_¸óã
("printout");

772 
i
 = 0;

774 i‡(
t£m
==
NULL
) {

775 
t£m
 = 
	`£m_¸óã
("tsem", 0);

776 i‡(
t£m
 =
NULL
) {

777 
	`∑nic
("threadtest: sem_create failed\n");

782 
ödex
 = 0; index < 
NCARS
; index++) {

784 
îr‹
 = 
	`thªad_f‹k
("approachintersectionÅhread",

785 
NULL
,

786 
ödex
,

787 
≠¥ﬂchöãr£˘i⁄
,

788 
NULL


795 i‡(
îr‹
) {

797 
	`∑nic
("approachintersection:Åhread_fork failed: %s\n",

798 
	`°ªº‹
(
îr‹
)

803 
i
=0; i<
NCARS
; i++) {

804 
	`P
(
t£m
);

808 
	}
}

	@compile/ASST0/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_p£ud‹™d
(
p£ud‹™d_so·c
 *, );

15 
autoc⁄f_øndom
(
øndom_so·c
 *, );

16 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

17 
	g√xtunô_bìp
;

18 
	g√xtunô_c⁄
;

19 
	g√xtunô_emu
;

20 
	g√xtunô_lhd
;

21 
	g√xtunô_Ã™dom
;

22 
	g√xtunô_l£r
;

23 
	g√xtunô_…imî
;

24 
	g√xtunô_…ø˚
;

25 
	g√xtunô_øndom
;

26 
	g√xtunô_π˛ock
;

30 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

32 
emu_so·c
 *
dev
;

33 
ªsu…
;

35 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

36 i‡(
dev
==
NULL
) {

39 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

40 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

41 i‡(
ªsu…
 != 0) {

42 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

44  
ªsu…
;

46 
	`k¥ötf
("\n");

47 
√xtunô_emu
 = 
devunô
+1;

48 
	`autoc⁄f_emu
(
dev
, 
devunô
);

50 
	}
}

54 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

56 
…ø˚_so·c
 *
dev
;

57 
ªsu…
;

59 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

60 i‡(
dev
==
NULL
) {

63 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

64 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

65 i‡(
ªsu…
 != 0) {

66 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

68  
ªsu…
;

70 
	`k¥ötf
("\n");

71 
√xtunô_…ø˚
 = 
devunô
+1;

72 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

74 
	}
}

78 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

80 
…imî_so·c
 *
dev
;

81 
ªsu…
;

83 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

84 i‡(
dev
==
NULL
) {

87 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

88 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

89 i‡(
ªsu…
 != 0) {

90 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

92  
ªsu…
;

94 
	`k¥ötf
("\n");

95 
√xtunô_…imî
 = 
devunô
+1;

96 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

98 
	}
}

102 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

104 
Ã™dom_so·c
 *
dev
;

105 
ªsu…
;

107 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

108 i‡(
dev
==
NULL
) {

111 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

112 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

113 i‡(
ªsu…
 != 0) {

114 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

116  
ªsu…
;

118 
	`k¥ötf
("\n");

119 
√xtunô_Ã™dom
 = 
devunô
+1;

120 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

122 
	}
}

126 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

128 
lhd_so·c
 *
dev
;

129 
ªsu…
;

131 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

132 i‡(
dev
==
NULL
) {

135 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

136 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

137 i‡(
ªsu…
 != 0) {

138 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

140  
ªsu…
;

142 
	`k¥ötf
("\n");

143 
√xtunô_lhd
 = 
devunô
+1;

144 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

146 
	}
}

150 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

152 
l£r_so·c
 *
dev
;

153 
ªsu…
;

155 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

156 i‡(
dev
==
NULL
) {

159 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

160 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

161 i‡(
ªsu…
 != 0) {

162 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

164  
ªsu…
;

166 
	`k¥ötf
("\n");

167 
√xtunô_l£r
 = 
devunô
+1;

168 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

170 
	}
}

174 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

176 
bìp_so·c
 *
dev
;

177 
ªsu…
;

179 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

180 i‡(
dev
==
NULL
) {

183 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

184 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

185 i‡(
ªsu…
 != 0) {

186 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

188  
ªsu…
;

190 
	`k¥ötf
("\n");

191 
√xtunô_bìp
 = 
devunô
+1;

192 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

194 
	}
}

198 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

200 
c⁄_so·c
 *
dev
;

201 
ªsu…
;

203 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

204 i‡(
dev
==
NULL
) {

207 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

208 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

209 i‡(
ªsu…
 != 0) {

210 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

212  
ªsu…
;

214 
	`k¥ötf
("\n");

215 
√xtunô_c⁄
 = 
devunô
+1;

216 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

218 
	}
}

222 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

224 
π˛ock_so·c
 *
dev
;

225 
ªsu…
;

227 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

228 i‡(
dev
==
NULL
) {

231 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

232 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

233 i‡(
ªsu…
 != 0) {

234 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

236  
ªsu…
;

238 
	`k¥ötf
("\n");

239 
√xtunô_π˛ock
 = 
devunô
+1;

240 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

242 
	}
}

246 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

248 
øndom_so·c
 *
dev
;

249 
ªsu…
;

251 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

252 i‡(
dev
==
NULL
) {

255 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

256 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

257 i‡(
ªsu…
 != 0) {

258 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

260  
ªsu…
;

262 
	`k¥ötf
("\n");

263 
√xtunô_øndom
 = 
devunô
+1;

264 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

266 
	}
}

270 
	$åy©èch_øndom_to_p£ud‹™d
(
devunô
, 
p£ud‹™d_so·c
 *
bus
, 
busunô
)

272 
øndom_so·c
 *
dev
;

273 
ªsu…
;

275 
dev
 = 
	`©èch_øndom_to_p£ud‹™d
(
devunô
, 
bus
);

276 i‡(
dev
==
NULL
) {

279 
	`k¥ötf
("øndom%dáàp£ud‹™d%d", 
devunô
, 
busunô
);

280 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

281 i‡(
ªsu…
 != 0) {

282 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

284  
ªsu…
;

286 
	`k¥ötf
("\n");

287 
√xtunô_øndom
 = 
devunô
+1;

288 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

290 
	}
}

295 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

297 ()
bus
; ()
busunô
;

298 
	}
}

302 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

304 ()
bus
; ()
busunô
;

306 i‡(
√xtunô_c⁄
 <= 0) {

307 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

310 
	}
}

314 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

316 ()
bus
; ()
busunô
;

317 
	}
}

321 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

323 ()
bus
; ()
busunô
;

324 
	}
}

327 
	$autoc⁄f_p£ud‹™d
(
p£ud‹™d_so·c
 *
bus
, 
busunô
)

329 ()
bus
; ()
busunô
;

330 i‡(
busunô
==0) {

331 i‡(
√xtunô_øndom
 <= 0) {

332 
	`åy©èch_øndom_to_p£ud‹™d
(0, 
bus
, 
busunô
);

335 
	}
}

339 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

341 ()
bus
; ()
busunô
;

342 
	}
}

346 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

348 ()
bus
; ()
busunô
;

350 i‡(
√xtunô_bìp
 <= 0) {

351 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

355 i‡(
√xtunô_π˛ock
 <= 0) {

356 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

359 
	}
}

362 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

364 ()
bus
; ()
busunô
;

366 
ªsu…
, 
devunô
=
√xtunô_emu
;

368 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

369 
devunô
++;

370 } 
ªsu…
==0);

373 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

375 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

376 
devunô
++;

377 } 
ªsu…
==0);

380 
ªsu…
, 
devunô
=
√xtunô_…imî
;

382 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

383 
devunô
++;

384 } 
ªsu…
==0);

387 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

389 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

390 
devunô
++;

391 } 
ªsu…
==0);

394 
ªsu…
, 
devunô
=
√xtunô_lhd
;

396 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

397 
devunô
++;

398 } 
ªsu…
==0);

401 
ªsu…
, 
devunô
=
√xtunô_l£r
;

403 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

404 
devunô
++;

405 } 
ªsu…
==0);

407 
	}
}

411 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

413 ()
bus
; ()
busunô
;

414 
	}
}

418 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

420 ()
bus
; ()
busunô
;

422 i‡(
√xtunô_øndom
 <= 0) {

423 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

426 
	}
}

430 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

432 ()
bus
; ()
busunô
;

433 
	}
}

437 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

439 ()
bus
; ()
busunô
;

440 
	}
}

443 
	$p£udoc⁄fig
()

446 
p£ud‹™d_so·c
 *
s
;

448 
s
 = 
	`p£udﬂâach_p£ud‹™d
(0);

449 i‡(
s
!=
NULL
) {

450 
	`k¥ötf
("pseudorand0 (virtual)\n");

451 
	`autoc⁄f_p£ud‹™d
(
s
, 0);

454 
	}
}

	@compile/ASST0/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

16 
	gp£ud‹™d_so·c
;

17 
	gøndom_so·c
;

19 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

21 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

26 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

27 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

29 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

30 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

31 
p£ud‹™d_so·c
 *
p£udﬂâach_p£ud‹™d
(
devunô
);

32 
øndom_so·c
 *
©èch_øndom_to_p£ud‹™d
(
devunô
, 
p£ud‹™d_so·c
 *
bus
);

34 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

35 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

36 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

37 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

38 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

39 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

40 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

41 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

42 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

43 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

44 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

46 
p£udoc⁄fig
();

	@compile/ASST0/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@compile/ASST0/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@compile/ASST0/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@compile/ASST0/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@compile/ASST0/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@compile/ASST0/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 67;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST0";

	@compile/ASST1/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_p£ud‹™d
(
p£ud‹™d_so·c
 *, );

15 
autoc⁄f_øndom
(
øndom_so·c
 *, );

16 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

17 
	g√xtunô_bìp
;

18 
	g√xtunô_c⁄
;

19 
	g√xtunô_emu
;

20 
	g√xtunô_lhd
;

21 
	g√xtunô_Ã™dom
;

22 
	g√xtunô_l£r
;

23 
	g√xtunô_…imî
;

24 
	g√xtunô_…ø˚
;

25 
	g√xtunô_øndom
;

26 
	g√xtunô_π˛ock
;

30 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

32 
emu_so·c
 *
dev
;

33 
ªsu…
;

35 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

36 i‡(
dev
==
NULL
) {

39 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

40 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

41 i‡(
ªsu…
 != 0) {

42 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

44  
ªsu…
;

46 
	`k¥ötf
("\n");

47 
√xtunô_emu
 = 
devunô
+1;

48 
	`autoc⁄f_emu
(
dev
, 
devunô
);

50 
	}
}

54 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

56 
…ø˚_so·c
 *
dev
;

57 
ªsu…
;

59 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

60 i‡(
dev
==
NULL
) {

63 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

64 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

65 i‡(
ªsu…
 != 0) {

66 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

68  
ªsu…
;

70 
	`k¥ötf
("\n");

71 
√xtunô_…ø˚
 = 
devunô
+1;

72 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

74 
	}
}

78 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

80 
…imî_so·c
 *
dev
;

81 
ªsu…
;

83 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

84 i‡(
dev
==
NULL
) {

87 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

88 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

89 i‡(
ªsu…
 != 0) {

90 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

92  
ªsu…
;

94 
	`k¥ötf
("\n");

95 
√xtunô_…imî
 = 
devunô
+1;

96 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

98 
	}
}

102 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

104 
Ã™dom_so·c
 *
dev
;

105 
ªsu…
;

107 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

108 i‡(
dev
==
NULL
) {

111 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

112 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

113 i‡(
ªsu…
 != 0) {

114 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

116  
ªsu…
;

118 
	`k¥ötf
("\n");

119 
√xtunô_Ã™dom
 = 
devunô
+1;

120 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

122 
	}
}

126 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

128 
lhd_so·c
 *
dev
;

129 
ªsu…
;

131 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

132 i‡(
dev
==
NULL
) {

135 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

136 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

137 i‡(
ªsu…
 != 0) {

138 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

140  
ªsu…
;

142 
	`k¥ötf
("\n");

143 
√xtunô_lhd
 = 
devunô
+1;

144 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

146 
	}
}

150 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

152 
l£r_so·c
 *
dev
;

153 
ªsu…
;

155 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

156 i‡(
dev
==
NULL
) {

159 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

160 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

161 i‡(
ªsu…
 != 0) {

162 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

164  
ªsu…
;

166 
	`k¥ötf
("\n");

167 
√xtunô_l£r
 = 
devunô
+1;

168 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

170 
	}
}

174 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

176 
bìp_so·c
 *
dev
;

177 
ªsu…
;

179 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

180 i‡(
dev
==
NULL
) {

183 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

184 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

185 i‡(
ªsu…
 != 0) {

186 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

188  
ªsu…
;

190 
	`k¥ötf
("\n");

191 
√xtunô_bìp
 = 
devunô
+1;

192 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

194 
	}
}

198 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

200 
c⁄_so·c
 *
dev
;

201 
ªsu…
;

203 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

204 i‡(
dev
==
NULL
) {

207 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

208 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

209 i‡(
ªsu…
 != 0) {

210 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

212  
ªsu…
;

214 
	`k¥ötf
("\n");

215 
√xtunô_c⁄
 = 
devunô
+1;

216 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

218 
	}
}

222 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

224 
π˛ock_so·c
 *
dev
;

225 
ªsu…
;

227 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

228 i‡(
dev
==
NULL
) {

231 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

232 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

233 i‡(
ªsu…
 != 0) {

234 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

236  
ªsu…
;

238 
	`k¥ötf
("\n");

239 
√xtunô_π˛ock
 = 
devunô
+1;

240 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

242 
	}
}

246 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

248 
øndom_so·c
 *
dev
;

249 
ªsu…
;

251 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

252 i‡(
dev
==
NULL
) {

255 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

256 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

257 i‡(
ªsu…
 != 0) {

258 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

260  
ªsu…
;

262 
	`k¥ötf
("\n");

263 
√xtunô_øndom
 = 
devunô
+1;

264 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

266 
	}
}

270 
	$åy©èch_øndom_to_p£ud‹™d
(
devunô
, 
p£ud‹™d_so·c
 *
bus
, 
busunô
)

272 
øndom_so·c
 *
dev
;

273 
ªsu…
;

275 
dev
 = 
	`©èch_øndom_to_p£ud‹™d
(
devunô
, 
bus
);

276 i‡(
dev
==
NULL
) {

279 
	`k¥ötf
("øndom%dáàp£ud‹™d%d", 
devunô
, 
busunô
);

280 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

281 i‡(
ªsu…
 != 0) {

282 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

284  
ªsu…
;

286 
	`k¥ötf
("\n");

287 
√xtunô_øndom
 = 
devunô
+1;

288 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

290 
	}
}

295 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

297 ()
bus
; ()
busunô
;

298 
	}
}

302 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

304 ()
bus
; ()
busunô
;

306 i‡(
√xtunô_c⁄
 <= 0) {

307 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

310 
	}
}

314 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

316 ()
bus
; ()
busunô
;

317 
	}
}

321 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

323 ()
bus
; ()
busunô
;

324 
	}
}

327 
	$autoc⁄f_p£ud‹™d
(
p£ud‹™d_so·c
 *
bus
, 
busunô
)

329 ()
bus
; ()
busunô
;

330 i‡(
busunô
==0) {

331 i‡(
√xtunô_øndom
 <= 0) {

332 
	`åy©èch_øndom_to_p£ud‹™d
(0, 
bus
, 
busunô
);

335 
	}
}

339 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

341 ()
bus
; ()
busunô
;

342 
	}
}

346 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

348 ()
bus
; ()
busunô
;

350 i‡(
√xtunô_bìp
 <= 0) {

351 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

355 i‡(
√xtunô_π˛ock
 <= 0) {

356 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

359 
	}
}

362 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

364 ()
bus
; ()
busunô
;

366 
ªsu…
, 
devunô
=
√xtunô_emu
;

368 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

369 
devunô
++;

370 } 
ªsu…
==0);

373 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

375 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

376 
devunô
++;

377 } 
ªsu…
==0);

380 
ªsu…
, 
devunô
=
√xtunô_…imî
;

382 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

383 
devunô
++;

384 } 
ªsu…
==0);

387 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

389 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

390 
devunô
++;

391 } 
ªsu…
==0);

394 
ªsu…
, 
devunô
=
√xtunô_lhd
;

396 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

397 
devunô
++;

398 } 
ªsu…
==0);

401 
ªsu…
, 
devunô
=
√xtunô_l£r
;

403 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

404 
devunô
++;

405 } 
ªsu…
==0);

407 
	}
}

411 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

413 ()
bus
; ()
busunô
;

414 
	}
}

418 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

420 ()
bus
; ()
busunô
;

422 i‡(
√xtunô_øndom
 <= 0) {

423 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

426 
	}
}

430 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

432 ()
bus
; ()
busunô
;

433 
	}
}

437 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

439 ()
bus
; ()
busunô
;

440 
	}
}

443 
	$p£udoc⁄fig
()

446 
p£ud‹™d_so·c
 *
s
;

448 
s
 = 
	`p£udﬂâach_p£ud‹™d
(0);

449 i‡(
s
!=
NULL
) {

450 
	`k¥ötf
("pseudorand0 (virtual)\n");

451 
	`autoc⁄f_p£ud‹™d
(
s
, 0);

454 
	}
}

	@compile/ASST1/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

16 
	gp£ud‹™d_so·c
;

17 
	gøndom_so·c
;

19 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

21 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

26 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

27 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

29 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

30 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

31 
p£ud‹™d_so·c
 *
p£udﬂâach_p£ud‹™d
(
devunô
);

32 
øndom_so·c
 *
©èch_øndom_to_p£ud‹™d
(
devunô
, 
p£ud‹™d_so·c
 *
bus
);

34 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

35 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

36 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

37 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

38 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

39 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

40 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

41 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

42 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

43 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

44 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

46 
p£udoc⁄fig
();

	@compile/ASST1/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@compile/ASST1/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@compile/ASST1/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@compile/ASST1/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@compile/ASST1/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 1

	)

	@compile/ASST1/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 72;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST1";

	@compile/ASST2/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_p£ud‹™d
(
p£ud‹™d_so·c
 *, );

15 
autoc⁄f_øndom
(
øndom_so·c
 *, );

16 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

17 
	g√xtunô_bìp
;

18 
	g√xtunô_c⁄
;

19 
	g√xtunô_emu
;

20 
	g√xtunô_lhd
;

21 
	g√xtunô_Ã™dom
;

22 
	g√xtunô_l£r
;

23 
	g√xtunô_…imî
;

24 
	g√xtunô_…ø˚
;

25 
	g√xtunô_øndom
;

26 
	g√xtunô_π˛ock
;

30 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

32 
emu_so·c
 *
dev
;

33 
ªsu…
;

35 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

36 i‡(
dev
==
NULL
) {

39 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

40 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

41 i‡(
ªsu…
 != 0) {

42 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

44  
ªsu…
;

46 
	`k¥ötf
("\n");

47 
√xtunô_emu
 = 
devunô
+1;

48 
	`autoc⁄f_emu
(
dev
, 
devunô
);

50 
	}
}

54 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

56 
…ø˚_so·c
 *
dev
;

57 
ªsu…
;

59 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

60 i‡(
dev
==
NULL
) {

63 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

64 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

65 i‡(
ªsu…
 != 0) {

66 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

68  
ªsu…
;

70 
	`k¥ötf
("\n");

71 
√xtunô_…ø˚
 = 
devunô
+1;

72 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

74 
	}
}

78 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

80 
…imî_so·c
 *
dev
;

81 
ªsu…
;

83 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

84 i‡(
dev
==
NULL
) {

87 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

88 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

89 i‡(
ªsu…
 != 0) {

90 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

92  
ªsu…
;

94 
	`k¥ötf
("\n");

95 
√xtunô_…imî
 = 
devunô
+1;

96 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

98 
	}
}

102 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

104 
Ã™dom_so·c
 *
dev
;

105 
ªsu…
;

107 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

108 i‡(
dev
==
NULL
) {

111 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

112 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

113 i‡(
ªsu…
 != 0) {

114 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

116  
ªsu…
;

118 
	`k¥ötf
("\n");

119 
√xtunô_Ã™dom
 = 
devunô
+1;

120 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

122 
	}
}

126 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

128 
lhd_so·c
 *
dev
;

129 
ªsu…
;

131 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

132 i‡(
dev
==
NULL
) {

135 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

136 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

137 i‡(
ªsu…
 != 0) {

138 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

140  
ªsu…
;

142 
	`k¥ötf
("\n");

143 
√xtunô_lhd
 = 
devunô
+1;

144 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

146 
	}
}

150 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

152 
l£r_so·c
 *
dev
;

153 
ªsu…
;

155 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

156 i‡(
dev
==
NULL
) {

159 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

160 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

161 i‡(
ªsu…
 != 0) {

162 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

164  
ªsu…
;

166 
	`k¥ötf
("\n");

167 
√xtunô_l£r
 = 
devunô
+1;

168 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

170 
	}
}

174 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

176 
bìp_so·c
 *
dev
;

177 
ªsu…
;

179 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

180 i‡(
dev
==
NULL
) {

183 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

184 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

185 i‡(
ªsu…
 != 0) {

186 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

188  
ªsu…
;

190 
	`k¥ötf
("\n");

191 
√xtunô_bìp
 = 
devunô
+1;

192 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

194 
	}
}

198 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

200 
c⁄_so·c
 *
dev
;

201 
ªsu…
;

203 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

204 i‡(
dev
==
NULL
) {

207 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

208 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

209 i‡(
ªsu…
 != 0) {

210 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

212  
ªsu…
;

214 
	`k¥ötf
("\n");

215 
√xtunô_c⁄
 = 
devunô
+1;

216 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

218 
	}
}

222 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

224 
π˛ock_so·c
 *
dev
;

225 
ªsu…
;

227 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

228 i‡(
dev
==
NULL
) {

231 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

232 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

233 i‡(
ªsu…
 != 0) {

234 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

236  
ªsu…
;

238 
	`k¥ötf
("\n");

239 
√xtunô_π˛ock
 = 
devunô
+1;

240 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

242 
	}
}

246 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

248 
øndom_so·c
 *
dev
;

249 
ªsu…
;

251 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

252 i‡(
dev
==
NULL
) {

255 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

256 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

257 i‡(
ªsu…
 != 0) {

258 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

260  
ªsu…
;

262 
	`k¥ötf
("\n");

263 
√xtunô_øndom
 = 
devunô
+1;

264 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

266 
	}
}

270 
	$åy©èch_øndom_to_p£ud‹™d
(
devunô
, 
p£ud‹™d_so·c
 *
bus
, 
busunô
)

272 
øndom_so·c
 *
dev
;

273 
ªsu…
;

275 
dev
 = 
	`©èch_øndom_to_p£ud‹™d
(
devunô
, 
bus
);

276 i‡(
dev
==
NULL
) {

279 
	`k¥ötf
("øndom%dáàp£ud‹™d%d", 
devunô
, 
busunô
);

280 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

281 i‡(
ªsu…
 != 0) {

282 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

284  
ªsu…
;

286 
	`k¥ötf
("\n");

287 
√xtunô_øndom
 = 
devunô
+1;

288 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

290 
	}
}

295 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

297 ()
bus
; ()
busunô
;

298 
	}
}

302 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

304 ()
bus
; ()
busunô
;

306 i‡(
√xtunô_c⁄
 <= 0) {

307 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

310 
	}
}

314 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

316 ()
bus
; ()
busunô
;

317 
	}
}

321 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

323 ()
bus
; ()
busunô
;

324 
	}
}

327 
	$autoc⁄f_p£ud‹™d
(
p£ud‹™d_so·c
 *
bus
, 
busunô
)

329 ()
bus
; ()
busunô
;

330 i‡(
busunô
==0) {

331 i‡(
√xtunô_øndom
 <= 0) {

332 
	`åy©èch_øndom_to_p£ud‹™d
(0, 
bus
, 
busunô
);

335 
	}
}

339 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

341 ()
bus
; ()
busunô
;

342 
	}
}

346 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

348 ()
bus
; ()
busunô
;

350 i‡(
√xtunô_bìp
 <= 0) {

351 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

355 i‡(
√xtunô_π˛ock
 <= 0) {

356 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

359 
	}
}

362 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

364 ()
bus
; ()
busunô
;

366 
ªsu…
, 
devunô
=
√xtunô_emu
;

368 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

369 
devunô
++;

370 } 
ªsu…
==0);

373 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

375 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

376 
devunô
++;

377 } 
ªsu…
==0);

380 
ªsu…
, 
devunô
=
√xtunô_…imî
;

382 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

383 
devunô
++;

384 } 
ªsu…
==0);

387 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

389 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

390 
devunô
++;

391 } 
ªsu…
==0);

394 
ªsu…
, 
devunô
=
√xtunô_lhd
;

396 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

397 
devunô
++;

398 } 
ªsu…
==0);

401 
ªsu…
, 
devunô
=
√xtunô_l£r
;

403 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

404 
devunô
++;

405 } 
ªsu…
==0);

407 
	}
}

411 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

413 ()
bus
; ()
busunô
;

414 
	}
}

418 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

420 ()
bus
; ()
busunô
;

422 i‡(
√xtunô_øndom
 <= 0) {

423 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

426 
	}
}

430 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

432 ()
bus
; ()
busunô
;

433 
	}
}

437 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

439 ()
bus
; ()
busunô
;

440 
	}
}

443 
	$p£udoc⁄fig
()

446 
p£ud‹™d_so·c
 *
s
;

448 
s
 = 
	`p£udﬂâach_p£ud‹™d
(0);

449 i‡(
s
!=
NULL
) {

450 
	`k¥ötf
("pseudorand0 (virtual)\n");

451 
	`autoc⁄f_p£ud‹™d
(
s
, 0);

454 
	}
}

	@compile/ASST2/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

16 
	gp£ud‹™d_so·c
;

17 
	gøndom_so·c
;

19 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

21 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

26 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

27 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

29 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

30 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

31 
p£ud‹™d_so·c
 *
p£udﬂâach_p£ud‹™d
(
devunô
);

32 
øndom_so·c
 *
©èch_øndom_to_p£ud‹™d
(
devunô
, 
p£ud‹™d_so·c
 *
bus
);

34 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

35 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

36 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

37 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

38 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

39 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

40 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

41 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

42 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

43 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

44 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

46 
p£udoc⁄fig
();

	@compile/ASST2/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@compile/ASST2/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@compile/ASST2/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@compile/ASST2/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@compile/ASST2/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@compile/ASST2/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 144;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST2";

	@compile/ASST3/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_p£ud‹™d
(
p£ud‹™d_so·c
 *, );

15 
autoc⁄f_øndom
(
øndom_so·c
 *, );

16 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

17 
	g√xtunô_bìp
;

18 
	g√xtunô_c⁄
;

19 
	g√xtunô_emu
;

20 
	g√xtunô_lhd
;

21 
	g√xtunô_Ã™dom
;

22 
	g√xtunô_l£r
;

23 
	g√xtunô_…imî
;

24 
	g√xtunô_…ø˚
;

25 
	g√xtunô_øndom
;

26 
	g√xtunô_π˛ock
;

30 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

32 
emu_so·c
 *
dev
;

33 
ªsu…
;

35 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

36 i‡(
dev
==
NULL
) {

39 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

40 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

41 i‡(
ªsu…
 != 0) {

42 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

44  
ªsu…
;

46 
	`k¥ötf
("\n");

47 
√xtunô_emu
 = 
devunô
+1;

48 
	`autoc⁄f_emu
(
dev
, 
devunô
);

50 
	}
}

54 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

56 
…ø˚_so·c
 *
dev
;

57 
ªsu…
;

59 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

60 i‡(
dev
==
NULL
) {

63 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

64 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

65 i‡(
ªsu…
 != 0) {

66 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

68  
ªsu…
;

70 
	`k¥ötf
("\n");

71 
√xtunô_…ø˚
 = 
devunô
+1;

72 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

74 
	}
}

78 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

80 
…imî_so·c
 *
dev
;

81 
ªsu…
;

83 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

84 i‡(
dev
==
NULL
) {

87 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

88 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

89 i‡(
ªsu…
 != 0) {

90 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

92  
ªsu…
;

94 
	`k¥ötf
("\n");

95 
√xtunô_…imî
 = 
devunô
+1;

96 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

98 
	}
}

102 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

104 
Ã™dom_so·c
 *
dev
;

105 
ªsu…
;

107 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

108 i‡(
dev
==
NULL
) {

111 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

112 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

113 i‡(
ªsu…
 != 0) {

114 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

116  
ªsu…
;

118 
	`k¥ötf
("\n");

119 
√xtunô_Ã™dom
 = 
devunô
+1;

120 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

122 
	}
}

126 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

128 
lhd_so·c
 *
dev
;

129 
ªsu…
;

131 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

132 i‡(
dev
==
NULL
) {

135 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

136 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

137 i‡(
ªsu…
 != 0) {

138 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

140  
ªsu…
;

142 
	`k¥ötf
("\n");

143 
√xtunô_lhd
 = 
devunô
+1;

144 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

146 
	}
}

150 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

152 
l£r_so·c
 *
dev
;

153 
ªsu…
;

155 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

156 i‡(
dev
==
NULL
) {

159 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

160 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

161 i‡(
ªsu…
 != 0) {

162 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

164  
ªsu…
;

166 
	`k¥ötf
("\n");

167 
√xtunô_l£r
 = 
devunô
+1;

168 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

170 
	}
}

174 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

176 
bìp_so·c
 *
dev
;

177 
ªsu…
;

179 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

180 i‡(
dev
==
NULL
) {

183 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

184 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

185 i‡(
ªsu…
 != 0) {

186 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

188  
ªsu…
;

190 
	`k¥ötf
("\n");

191 
√xtunô_bìp
 = 
devunô
+1;

192 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

194 
	}
}

198 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

200 
c⁄_so·c
 *
dev
;

201 
ªsu…
;

203 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

204 i‡(
dev
==
NULL
) {

207 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

208 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

209 i‡(
ªsu…
 != 0) {

210 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

212  
ªsu…
;

214 
	`k¥ötf
("\n");

215 
√xtunô_c⁄
 = 
devunô
+1;

216 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

218 
	}
}

222 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

224 
π˛ock_so·c
 *
dev
;

225 
ªsu…
;

227 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

228 i‡(
dev
==
NULL
) {

231 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

232 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

233 i‡(
ªsu…
 != 0) {

234 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

236  
ªsu…
;

238 
	`k¥ötf
("\n");

239 
√xtunô_π˛ock
 = 
devunô
+1;

240 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

242 
	}
}

246 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

248 
øndom_so·c
 *
dev
;

249 
ªsu…
;

251 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

252 i‡(
dev
==
NULL
) {

255 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

256 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

257 i‡(
ªsu…
 != 0) {

258 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

260  
ªsu…
;

262 
	`k¥ötf
("\n");

263 
√xtunô_øndom
 = 
devunô
+1;

264 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

266 
	}
}

270 
	$åy©èch_øndom_to_p£ud‹™d
(
devunô
, 
p£ud‹™d_so·c
 *
bus
, 
busunô
)

272 
øndom_so·c
 *
dev
;

273 
ªsu…
;

275 
dev
 = 
	`©èch_øndom_to_p£ud‹™d
(
devunô
, 
bus
);

276 i‡(
dev
==
NULL
) {

279 
	`k¥ötf
("øndom%dáàp£ud‹™d%d", 
devunô
, 
busunô
);

280 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

281 i‡(
ªsu…
 != 0) {

282 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

284  
ªsu…
;

286 
	`k¥ötf
("\n");

287 
√xtunô_øndom
 = 
devunô
+1;

288 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

290 
	}
}

295 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

297 ()
bus
; ()
busunô
;

298 
	}
}

302 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

304 ()
bus
; ()
busunô
;

306 i‡(
√xtunô_c⁄
 <= 0) {

307 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

310 
	}
}

314 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

316 ()
bus
; ()
busunô
;

317 
	}
}

321 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

323 ()
bus
; ()
busunô
;

324 
	}
}

327 
	$autoc⁄f_p£ud‹™d
(
p£ud‹™d_so·c
 *
bus
, 
busunô
)

329 ()
bus
; ()
busunô
;

330 i‡(
busunô
==0) {

331 i‡(
√xtunô_øndom
 <= 0) {

332 
	`åy©èch_øndom_to_p£ud‹™d
(0, 
bus
, 
busunô
);

335 
	}
}

339 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

341 ()
bus
; ()
busunô
;

342 
	}
}

346 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

348 ()
bus
; ()
busunô
;

350 i‡(
√xtunô_bìp
 <= 0) {

351 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

355 i‡(
√xtunô_π˛ock
 <= 0) {

356 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

359 
	}
}

362 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

364 ()
bus
; ()
busunô
;

366 
ªsu…
, 
devunô
=
√xtunô_emu
;

368 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

369 
devunô
++;

370 } 
ªsu…
==0);

373 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

375 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

376 
devunô
++;

377 } 
ªsu…
==0);

380 
ªsu…
, 
devunô
=
√xtunô_…imî
;

382 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

383 
devunô
++;

384 } 
ªsu…
==0);

387 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

389 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

390 
devunô
++;

391 } 
ªsu…
==0);

394 
ªsu…
, 
devunô
=
√xtunô_lhd
;

396 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

397 
devunô
++;

398 } 
ªsu…
==0);

401 
ªsu…
, 
devunô
=
√xtunô_l£r
;

403 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

404 
devunô
++;

405 } 
ªsu…
==0);

407 
	}
}

411 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

413 ()
bus
; ()
busunô
;

414 
	}
}

418 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

420 ()
bus
; ()
busunô
;

422 i‡(
√xtunô_øndom
 <= 0) {

423 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

426 
	}
}

430 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

432 ()
bus
; ()
busunô
;

433 
	}
}

437 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

439 ()
bus
; ()
busunô
;

440 
	}
}

443 
	$p£udoc⁄fig
()

446 
p£ud‹™d_so·c
 *
s
;

448 
s
 = 
	`p£udﬂâach_p£ud‹™d
(0);

449 i‡(
s
!=
NULL
) {

450 
	`k¥ötf
("pseudorand0 (virtual)\n");

451 
	`autoc⁄f_p£ud‹™d
(
s
, 0);

454 
	}
}

	@compile/ASST3/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

16 
	gp£ud‹™d_so·c
;

17 
	gøndom_so·c
;

19 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

21 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

26 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

27 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

29 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

30 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

31 
p£ud‹™d_so·c
 *
p£udﬂâach_p£ud‹™d
(
devunô
);

32 
øndom_so·c
 *
©èch_øndom_to_p£ud‹™d
(
devunô
, 
p£ud‹™d_so·c
 *
bus
);

34 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

35 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

36 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

37 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

38 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

39 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

40 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

41 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

42 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

43 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

44 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

46 
p£udoc⁄fig
();

	@compile/ASST3/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 0

	)

	@compile/ASST3/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@compile/ASST3/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@compile/ASST3/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@compile/ASST3/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@compile/ASST3/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 187;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST3";

	@dev/generic/beep.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~<gíîic/bìp.h
>

5 
	~"autoc⁄f.h
"

18 
bìp_so·c
 *
	gthe_bìp
 = 
NULL
;

21 
	$c⁄fig_bìp
(
bìp_so·c
 *
bs
, 
unô
)

24 i‡(
unô
!=0) {

25  
ENODEV
;

28 
	`as£π
(
the_bìp
==
NULL
);

29 
the_bìp
 = 
bs
;

31 
	}
}

34 
	$bìp
()

36 i‡(
the_bìp
!=
NULL
) {

37 
the_bìp
->
	`bs_bìp
—he_bìp->
bs_devd©a
);

40 
	`k¥ötf
("beep: Warning:Ço beep device\n");

42 
	}
}

	@dev/generic/beep.h

1 #i‚de‡
_GENERIC_BEEP_H_


2 
	#_GENERIC_BEEP_H_


	)

9 
	sbìp_so·c
 {

10 *
	mbs_devd©a
;

11 (*
	mbs_bìp
)(*
	mdevd©a
);

	@dev/generic/console.c

24 
	~<ty≥s.h
>

25 
	~<kîn/î∫o.h
>

26 
	~<lib.h
>

27 
	~<machöe/•l.h
>

28 
	~<synch.h
>

29 
	~<gíîic/c⁄sﬁe.h
>

30 
	~<dev.h
>

31 
	~<vfs.h
>

32 
	~<uio.h
>

33 
	~"autoc⁄f.h
"

38 
c⁄_so·c
 *
	gthe_c⁄sﬁe
 = 
NULL
;

44 
lock
 *
	gc⁄_u£æock_ªad
 = 
NULL
;

45 
lock
 *
	gc⁄_u£æock_wrôe
 = 
NULL
;

54 
	#DELAYBUFSIZE
 1024

	)

55 
	gdñayed_outbuf
[
DELAYBUFSIZE
];

56 
size_t
 
	gdñayed_outbuf_pos
=0;

60 
	$putch_dñayed
(
ch
)

67 
	`as£π
(
dñayed_outbuf_pos
 < (
dñayed_outbuf
));

68 
dñayed_outbuf
[
dñayed_outbuf_pos
++] = 
ch
;

69 
	}
}

73 
	$Êush_dñay_buf
()

75 
size_t
 
i
;

76 
i
=0; i<
dñayed_outbuf_pos
; i++) {

77 
	`putch
(
dñayed_outbuf
[
i
]);

79 
dñayed_outbuf_pos
 = 0;

80 
	}
}

90 
	$putch_pﬁÀd
(
c⁄_so·c
 *
cs
, 
ch
)

92 
cs
->
	`cs_£ndpﬁÀd
(cs->
cs_devd©a
, 
ch
);

93 
	}
}

103 
	$putch_öå
(
c⁄_so·c
 *
cs
, 
ch
)

105 
	`P
(
cs
->
cs_w£m
);

106 
cs
->
	`cs_£nd
(cs->
cs_devd©a
, 
ch
);

107 
	}
}

115 
	$gëch_öå
(
c⁄_so·c
 *
cs
)

117 
	`P
(
cs
->
cs_r£m
);

118  
cs
->
cs_gŸch¨
;

119 
	}
}

125 
	$c⁄_öput
(*
vcs
, 
ch
)

127 
c⁄_so·c
 *
cs
 = 
vcs
;

129 
cs
->
cs_gŸch¨
 = 
ch
;

130 
	`V
(
cs
->
cs_r£m
);

131 
	}
}

137 
	$c⁄_°¨t
(*
vcs
)

139 
c⁄_so·c
 *
cs
 = 
vcs
;

141 
	`V
(
cs
->
cs_w£m
);

142 
	}
}

155 
	$putch
(
ch
)

157 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

159 i‡(
cs
==
NULL
) {

160 
	`putch_dñayed
(
ch
);

162 i‡(
ö_öãºu±
 || 
cur•l
>0) {

163 
	`putch_pﬁÀd
(
cs
, 
ch
);

166 
	`putch_öå
(
cs
, 
ch
);

168 
	}
}

171 
	$gëch
()

173 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

174 
	`as£π
(
cs
!=
NULL
);

175 
	`as£π
(!
ö_öãºu±
 && 
cur•l
==0);

177  
	`gëch_öå
(
cs
);

178 
	}
}

188 
	$c⁄_›í
(
devi˚
 *
dev
, 
›íÊags
)

190 ()
dev
;

191 ()
›íÊags
;

193 
	}
}

197 
	$c⁄_˛o£
(
devi˚
 *
dev
)

199 ()
dev
;

201 
	}
}

205 
	$c⁄_io
(
devi˚
 *
dev
, 
uio
 *uio)

207 
ªsu…
;

208 
ch
;

209 
lock
 *
lk
;

211 ()
dev
;

213 i‡(
uio
->
uio_rw
==
UIO_READ
) {

214 
lk
 = 
c⁄_u£æock_ªad
;

217 
lk
 = 
c⁄_u£æock_wrôe
;

220 
	`as£π
(
lk
 !
NULL
);

221 
	`lock_acquúe
(
lk
);

223 
uio
->
uio_ªsid
 > 0) {

224 i‡(
uio
->
uio_rw
==
UIO_READ
) {

225 
ch
 = 
	`gëch
();

226 i‡(
ch
=='\r') {

227 
ch
 = '\n';

229 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

230 i‡(
ªsu…
) {

231 
	`lock_ªÀa£
(
lk
);

232  
ªsu…
;

234 i‡(
ch
=='\n') {

239 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

240 i‡(
ªsu…
) {

241 
	`lock_ªÀa£
(
lk
);

242  
ªsu…
;

244 i‡(
ch
=='\n') {

245 
	`putch
('\r');

247 
	`putch
(
ch
);

250 
	`lock_ªÀa£
(
lk
);

252 
	}
}

256 
	$c⁄_io˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

259 ()
dev
;

260 ()
›
;

261 ()
d©a
;

262  
EINVAL
;

263 
	}
}

267 
	$©èch_c⁄sﬁe_to_vfs
(
c⁄_so·c
 *
cs
)

269 
devi˚
 *
dev
;

270 
ªsu…
;

272 
dev
 = 
	`kmÆloc
((*dev));

273 i‡(
dev
==
NULL
) {

274  
ENOMEM
;

277 
dev
->
d_›í
 = 
c⁄_›í
;

278 
dev
->
d_˛o£
 = 
c⁄_˛o£
;

279 
dev
->
d_io
 = 
c⁄_io
;

280 
dev
->
d_io˘l
 = 
c⁄_io˘l
;

281 
dev
->
d_blocks
 = 0;

282 
dev
->
d_blocksize
 = 1;

283 
dev
->
d_d©a
 = 
cs
;

285 
ªsu…
 = 
	`vfs_adddev
("c⁄", 
dev
, 0);

286 i‡(
ªsu…
) {

287 
	`k‰ì
(
dev
);

288  
ªsu…
;

292 
	}
}

301 
	$c⁄fig_c⁄
(
c⁄_so·c
 *
cs
, 
unô
)

303 
£m≠h‹e
 *
r£m
, *
w£m
;

304 
lock
 *
æk
, *
wlk
;

313 i‡(
unô
>0) {

314 
	`as£π
(
the_c⁄sﬁe
!=
NULL
);

315  
ENODEV
;

317 
	`as£π
(
the_c⁄sﬁe
==
NULL
);

319 
r£m
 = 
	`£m_¸óã
("consoleÑead", 0);

320 i‡(
r£m
 =
NULL
) {

321  
ENOMEM
;

323 
w£m
 = 
	`£m_¸óã
("console write", 1);

324 i‡(
w£m
 =
NULL
) {

325 
	`£m_de°roy
(
r£m
);

326  
ENOMEM
;

328 
æk
 = 
	`lock_¸óã
("console-lock-read");

329 i‡(
æk
 =
NULL
) {

330 
	`£m_de°roy
(
r£m
);

331 
	`£m_de°roy
(
w£m
);

332  
ENOMEM
;

334 
wlk
 = 
	`lock_¸óã
("console-lock-write");

335 i‡(
wlk
 =
NULL
) {

336 
	`lock_de°roy
(
æk
);

337 
	`£m_de°roy
(
r£m
);

338 
	`£m_de°roy
(
w£m
);

339  
ENOMEM
;

342 
cs
->
cs_r£m
 = 
r£m
;

343 
cs
->
cs_w£m
 = 
w£m
;

344 
cs
->
cs_gŸch¨
 = 0;

346 
the_c⁄sﬁe
 = 
cs
;

347 
c⁄_u£æock_ªad
 = 
æk
;

348 
c⁄_u£æock_wrôe
 = 
wlk
;

350 
	`Êush_dñay_buf
();

352  
	`©èch_c⁄sﬁe_to_vfs
(
cs
);

353 
	}
}

	@dev/generic/console.h

1 #i‚de‡
_GENERIC_CONSOLE_H_


2 
	#_GENERIC_CONSOLE_H_


	)

11 
	sc⁄_so·c
 {

13 *
	mcs_devd©a
;

14 (*
	mcs_£nd
)(*
	mdevd©a
, 
	mch
);

15 (*
	mcs_£ndpﬁÀd
)(*
	mdevd©a
, 
	mch
);

18 
£m≠h‹e
 *
	mcs_r£m
;

19 
£m≠h‹e
 *
	mcs_w£m
;

20 
	mcs_gŸch¨
;

26 
c⁄_öput
–*
cs
, 
ch
);

27 
c⁄_°¨t
–*
cs
);

	@dev/generic/pseudorand.c

9 
	~<ty≥s.h
>

10 
	~<lib.h
>

11 
	~<uio.h
>

12 
	~<gíîic/p£ud‹™d.h
>

13 
	~"autoc⁄f.h
"

15 
	#MULTIPLIER
 16807

	)

16 
	#MODULUS
 0x7fffffff

	)

17 
	#K1
 127773

	)

18 
	#K2
 2836

	)

20 
u_öt32_t


21 
	$p£ud‹™d_øndom
(*
devd©a
)

23 
p£ud‹™d_so·c
 *
ps
 = 
devd©a
;

24 
öt32_t
 
hi
, 
lo
, 
tmp
;

26 
hi
 = 
ps
->
ps_£ed
 / 
K1
;

27 
lo
 = 
ps
->
ps_£ed
 % 
K1
;

28 
tmp
 = 
MULTIPLIER
 * 
lo
 - 
K2
 * 
hi
;

29 i‡(
tmp
 <= 0) {

30 
tmp
 +
MODULUS
;

32 
ps
->
ps_£ed
 = 
tmp
;

38  
ps
->
ps_£ed
 - 1;

39 
	}
}

41 
u_öt32_t


42 
	$p£ud‹™d_øndmax
(*
devd©a
)

44 ()
devd©a
;

47  
MODULUS
 - 2;

48 
	}
}

50 
p£ud‹™d_so·c
 *

51 
	$p£udﬂâach_p£ud‹™d
(
unô
)

53 
p£ud‹™d_so·c
 *
ps
 = 
	`kmÆloc
((pseudorand_softc));

54 i‡(
ps
==
NULL
) {

55  
NULL
;

58 (Ë
unô
;

66 
ps
->
ps_£ed
 = 305824;

68  
ps
;

69 
	}
}

79 
	$p£ud‹™d_ªad
(*
devd©a
, 
uio
 *uio)

81 
u_öt32_t
 
vÆ
;

82 
u_öt8_t
 
byãs
[3];

83 
ªsu…
;

85 
uio
->
uio_ªsid
 > 0) {

86 
vÆ
 = 
	`p£ud‹™d_øndom
(
devd©a
);

99 
byãs
[0] = (
vÆ
 & 0x00000ff0) >> 4;

100 
byãs
[1] = (
vÆ
 & 0x000ff000) >> 12;

101 
byãs
[2] = (
vÆ
 & 0x0ff00000) >> 20;

103 
ªsu…
 = 
	`uiomove
(
byãs
, (byãs), 
uio
);

104 i‡(
ªsu…
) {

105  
ªsu…
;

110 
	}
}

	@dev/generic/pseudorand.h

1 #i‚de‡
_GENERIC_PSEUDORAND_H_


2 
	#_GENERIC_PSEUDORAND_H_


	)

4 
	guio
;

6 
	sp£ud‹™d_so·c
 {

7 
u_öt32_t
 
	mps_£ed
;

10 
u_öt32_t
 
p£ud‹™d_øndom
–*
devd©a
);

11 
u_öt32_t
 
p£ud‹™d_øndmax
–*
devd©a
);

12 
p£ud‹™d_ªad
–*, 
uio
 *);

	@dev/generic/pseudorand_att.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<gíîic/øndom.h
>

9 
	~<gíîic/p£ud‹™d.h
>

10 
	~"autoc⁄f.h
"

12 
øndom_so·c
 *

13 
	$©èch_øndom_to_p£ud‹™d
(
øndomno
, 
p£ud‹™d_so·c
 *
ls
)

15 
øndom_so·c
 *
rs
 = 
	`kmÆloc
((random_softc));

16 i‡(
rs
==
NULL
) {

17  
NULL
;

20 ()
øndomno
;

22 
rs
->
rs_devd©a
 = 
ls
;

23 
rs
->
rs_øndom
 = 
p£ud‹™d_øndom
;

24 
rs
->
rs_øndmax
 = 
p£ud‹™d_øndmax
;

25 
rs
->
rs_ªad
 = 
p£ud‹™d_ªad
;

27  
rs
;

28 
	}
}

	@dev/generic/random.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<lib.h
>

5 
	~<uio.h
>

6 
	~<vfs.h
>

7 
	~<gíîic/øndom.h
>

8 
	~"autoc⁄f.h
"

21 
øndom_so·c
 *
	gthe_øndom
 = 
NULL
;

29 
	$ønd›í
(
devi˚
 *
dev
, 
›íÊags
)

31 ()
dev
;

33 i‡(
›íÊags
 !
O_RDONLY
) {

34  
EIO
;

38 
	}
}

45 
	$ønd˛o£
(
devi˚
 *
dev
)

47 ()
dev
;

49 
	}
}

56 
	$øndio
(
devi˚
 *
dev
, 
uio
 *uio)

58 
øndom_so·c
 *
rs
 = 
dev
->
d_d©a
;

60 i‡(
uio
->
uio_rw
 !
UIO_READ
) {

61  
EIO
;

64  
rs
->
	`rs_ªad
‘s->
rs_devd©a
, 
uio
);

65 
	}
}

72 
	$øndio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

77 ()
dev
;

78 ()
›
;

79 ()
d©a
;

80  
EIOCTL
;

81 
	}
}

87 
	$c⁄fig_øndom
(
øndom_so·c
 *
rs
, 
unô
)

89 
ªsu…
;

92 i‡(
unô
!=0) {

93  
ENODEV
;

96 
	`as£π
(
the_øndom
==
NULL
);

97 
the_øndom
 = 
rs
;

99 
rs
->
rs_dev
.
d_›í
 = 
ønd›í
;

100 
rs
->
rs_dev
.
d_˛o£
 = 
ønd˛o£
;

101 
rs
->
rs_dev
.
d_io
 = 
øndio
;

102 
rs
->
rs_dev
.
d_io˘l
 = 
øndio˘l
;

103 
rs
->
rs_dev
.
d_blocks
 = 0;

104 
rs
->
rs_dev
.
d_blocksize
 = 1;

105 
rs
->
rs_dev
.
d_d©a
 =Ñs;

108 
ªsu…
 = 
	`vfs_adddev
("øndom", &
rs
->
rs_dev
, 0);

109 i‡(
ªsu…
) {

110  
ªsu…
;

114 
	}
}

121 
u_öt32_t


122 
	$øndom
()

124 i‡(
the_øndom
==
NULL
) {

125 
	`∑nic
("NoÑandom device\n");

127  
the_øndom
->
	`rs_øndom
—he_øndom->
rs_devd©a
);

128 
	}
}

130 
u_öt32_t


131 
	$øndmax
()

133 i‡(
the_øndom
==
NULL
) {

134 
	`∑nic
("NoÑandom device\n");

136  
the_øndom
->
	`rs_øndmax
—he_øndom->
rs_devd©a
);

137 
	}
}

	@dev/generic/random.h

1 #i‚de‡
_GENERIC_RANDOM_H_


2 
	#_GENERIC_RANDOM_H_


	)

4 
	~<dev.h
>

5 
	guio
;

7 
	søndom_so·c
 {

9 *
	mrs_devd©a
;

10 
u_öt32_t
 (*
rs_øndom
)(*
	mdevd©a
);

11 
u_öt32_t
 (*
rs_øndmax
)(*
	mdevd©a
);

12 (*
	mrs_ªad
)(*
	mdevd©a
, 
uio
 *
	muio
);

14 
devi˚
 
	mrs_dev
;

	@dev/generic/rtclock.c

14 
	~<ty≥s.h
>

15 
	~<kîn/î∫o.h
>

16 
	~<lib.h
>

17 
	~<˛ock.h
>

18 
	~<gíîic/π˛ock.h
>

19 
	~"autoc⁄f.h
"

21 
π˛ock_so·c
 *
	gthe_˛ock
 = 
NULL
;

24 
	$c⁄fig_π˛ock
(
π˛ock_so·c
 *
πc
, 
unô
)

27 i‡(
unô
!=0) {

28  
ENODEV
;

31 
	`as£π
(
the_˛ock
==
NULL
);

32 
the_˛ock
 = 
πc
;

34 
	}
}

37 
	$gëtime
(
time_t
 *
£cs
, 
u_öt32_t
 *
n£cs
)

39 
	`as£π
(
the_˛ock
!=
NULL
);

40 
the_˛ock
->
	`πc_gëtime
—he_˛ock->
πc_devd©a
, 
£cs
, 
n£cs
);

41 
	}
}

	@dev/generic/rtclock.h

1 #i‚de‡
_GENERIC_RTCLOCK_H_


2 
	#_GENERIC_RTCLOCK_H_


	)

9 
	sπ˛ock_so·c
 {

10 *
	mπc_devd©a
;

11 (*
	mπc_gëtime
)(*
	mdevd©a
, 
time_t
 *
	m£cs
, 
u_öt32_t
 *
	mn£cs
);

	@dev/init.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/•l.h
>

4 
	~<dev.h
>

5 
	~"autoc⁄f.h
"

18 
	$dev_boŸ°øp
()

21 
	`as£π
(
cur•l
>0);

23 
	`k¥ötf
("DeviceÖrobe...\n");

24 
	`machdï_dev_boŸ°øp
();

27 
	`as£π
(
cur•l
==0);

30 
	`p£udoc⁄fig
();

32 
	`k¥ötf
("\n");

33 
	}
}

	@dev/lamebus/beep_ltimer.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<gíîic/bìp.h
>

9 
	~<œmebus/…imî.h
>

10 
	~"autoc⁄f.h
"

12 
bìp_so·c
 *

13 
	$©èch_bìp_to_…imî
(
bì≤o
, 
…imî_so·c
 *
ls
)

15 
bìp_so·c
 *
bs
 = 
	`kmÆloc
((beep_softc));

16 i‡(
bs
==
NULL
) {

17  
NULL
;

20 ()
bì≤o
;

22 
bs
->
bs_devd©a
 = 
ls
;

23 
bs
->
bs_bìp
 = 
…imî_bìp
;

25  
bs
;

26 
	}
}

	@dev/lamebus/con_lscreen.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<gíîic/c⁄sﬁe.h
>

9 
	~<œmebus/ls¸ìn.h
>

10 
	~"autoc⁄f.h
"

12 
c⁄_so·c
 *

13 
	$©èch_c⁄_to_ls¸ìn
(
c⁄¢o
, 
ls¸ìn_so·c
 *
ls
)

15 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

16 i‡(
cs
==
NULL
) {

17  
NULL
;

20 
cs
->
cs_devd©a
 = 
ls
;

21 
cs
->
cs_£nd
 = 
ls¸ìn_wrôe
;

22 
cs
->
cs_£ndpﬁÀd
 = 
ls¸ìn_wrôe
;

24 
ls
->
ls_devd©a
 = 
cs
;

25 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

26 
ls
->
ls_öput
 = 
c⁄_öput
;

28  
cs
;

29 
	}
}

	@dev/lamebus/con_lser.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<gíîic/c⁄sﬁe.h
>

9 
	~<œmebus/l£r.h
>

10 
	~"autoc⁄f.h
"

12 
c⁄_so·c
 *

13 
	$©èch_c⁄_to_l£r
(
c⁄¢o
, 
l£r_so·c
 *
ls
)

15 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

16 i‡(
cs
==
NULL
) {

17  
NULL
;

20 ()
c⁄¢o
;

22 
cs
->
cs_devd©a
 = 
ls
;

23 
cs
->
cs_£nd
 = 
l£r_wrôe
;

24 
cs
->
cs_£ndpﬁÀd
 = 
l£r_wrôïﬁÀd
;

26 
ls
->
ls_devd©a
 = 
cs
;

27 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

28 
ls
->
ls_öput
 = 
c⁄_öput
;

30  
cs
;

31 
	}
}

	@dev/lamebus/emu.c

14 
	~<ty≥s.h
>

15 
	~<kîn/î∫o.h
>

16 
	~<kîn/uni°d.h
>

17 
	~<kîn/°©.h
>

18 
	~<lib.h
>

19 
	~<synch.h
>

20 
	~<¨øy.h
>

21 
	~<uio.h
>

22 
	~<vfs.h
>

23 
	~<emufs.h
>

24 
	~<œmebus/emu.h
>

25 
	~<machöe/bus.h
>

26 
	~"autoc⁄f.h
"

29 
	#REG_HANDLE
 0

	)

30 
	#REG_OFFSET
 4

	)

31 
	#REG_IOLEN
 8

	)

32 
	#REG_OPER
 12

	)

33 
	#REG_RESULT
 16

	)

36 
	#EMU_BUFFER
 32768

	)

39 
	#EMU_OP_OPEN
 1

	)

40 
	#EMU_OP_CREATE
 2

	)

41 
	#EMU_OP_EXCLCREATE
 3

	)

42 
	#EMU_OP_CLOSE
 4

	)

43 
	#EMU_OP_READ
 5

	)

44 
	#EMU_OP_READDIR
 6

	)

45 
	#EMU_OP_WRITE
 7

	)

46 
	#EMU_OP_GETSIZE
 8

	)

47 
	#EMU_OP_TRUNC
 9

	)

50 
	#EMU_RES_SUCCESS
 1

	)

51 
	#EMU_RES_BADHANDLE
 2

	)

52 
	#EMU_RES_BADOP
 3

	)

53 
	#EMU_RES_BADPATH
 4

	)

54 
	#EMU_RES_BADSIZE
 5

	)

55 
	#EMU_RES_EXISTS
 6

	)

56 
	#EMU_RES_ISDIR
 7

	)

57 
	#EMU_RES_MEDIA
 8

	)

58 
	#EMU_RES_NOHANDLES
 9

	)

59 
	#EMU_RES_NOSPACE
 10

	)

60 
	#EMU_RES_NOTDIR
 11

	)

61 
	#EMU_RES_UNKNOWN
 12

	)

62 
	#EMU_RES_UNSUPP
 13

	)

73 
ölöe


74 
u_öt32_t


75 
	$emu_ºeg
(
emu_so·c
 *
sc
, 
u_öt32_t
 
ªg
)

77  
	`bus_ªad_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
);

78 
	}
}

84 
ölöe


86 
	$emu_wªg
(
emu_so·c
 *
sc
, 
u_öt32_t
 
ªg
, u_öt32_à
vÆ
)

88 
	`bus_wrôe_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
, 
vÆ
);

89 
	}
}

95 
	$emu_úq
(*
dev
)

97 
emu_so·c
 *
sc
 = 
dev
;

99 
sc
->
e_ªsu…
 = 
	`emu_ºeg
(sc, 
REG_RESULT
);

100 
	`emu_wªg
(
sc
, 
REG_RESULT
, 0);

102 
	`V
(
sc
->
e_£m
);

103 
	}
}

110 
u_öt32_t


111 
	$å™¶©e_îr
(
emu_so·c
 *
sc
, 
u_öt32_t
 
code
)

113 
code
) {

114 
EMU_RES_SUCCESS
:  0;

115 
EMU_RES_BADHANDLE
:

116 
EMU_RES_BADOP
:

117 
EMU_RES_BADSIZE
:

118 
	`∑nic
("emu%d: gŸ f©ÆÑesu… codê%d\n", 
sc
->
e_unô
, 
code
);

119 
EMU_RES_BADPATH
:  
ENOENT
;

120 
EMU_RES_EXISTS
:  
EEXIST
;

121 
EMU_RES_ISDIR
:  
EISDIR
;

122 
EMU_RES_MEDIA
:  
EIO
;

123 
EMU_RES_NOHANDLES
:  
ENFILE
;

124 
EMU_RES_NOSPACE
:  
ENOSPC
;

125 
EMU_RES_NOTDIR
:  
ENOTDIR
;

126 
EMU_RES_UNKNOWN
:  
EIO
;

127 
EMU_RES_UNSUPP
:  
EUNIMP
;

129 
	`k¥ötf
("emu%d: Unknow¿ªsu… codê%d\n", 
sc
->
e_unô
, 
code
);

130  
EAGAIN
;

131 
	}
}

138 
	$emu_waôd⁄e
(
emu_so·c
 *
sc
)

140 
	`P
(
sc
->
e_£m
);

141  
	`å™¶©e_îr
(
sc
, sc->
e_ªsu…
);

142 
	}
}

152 
	$emu_›í
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, c⁄° *
«me
,

153 
¸óã
, 
ex˛
, 
u_öt32_t
 *
√wh™dÀ
, *
√wisdú
)

155 
u_öt32_t
 
›
;

156 
ªsu…
;

158 i‡(
	`°æí
(
«me
)+1 > 
EMU_MAXIO
) {

159  
ENAMETOOLONG
;

162 i‡(
¸óã
 && 
ex˛
) {

163 
›
 = 
EMU_OP_EXCLCREATE
;

165 i‡(
¸óã
) {

166 
›
 = 
EMU_OP_CREATE
;

169 
›
 = 
EMU_OP_OPEN
;

172 
	`lock_acquúe
(
sc
->
e_lock
);

174 
	`°r˝y
(
sc
->
e_iobuf
, 
«me
);

175 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
	`°æí
(
«me
));

176 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

177 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

178 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

180 i‡(
ªsu…
==0) {

181 *
√wh™dÀ
 = 
	`emu_ºeg
(
sc
, 
REG_HANDLE
);

182 *
√wisdú
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
)>0;

185 
	`lock_ªÀa£
(
sc
->
e_lock
);

186  
ªsu…
;

187 
	}
}

196 
	$emu_˛o£
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
)

198 
ªsu…
;

199 
möe
;

200 
ªåõs
=0;

202 
möe
 = 
	`lock_do_i_hﬁd
(
sc
->
e_lock
);

203 i‡(!
möe
) {

204 
	`lock_acquúe
(
sc
->
e_lock
);

210 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

211 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_CLOSE
);

212 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

214 i‡(
ªsu…
==
EIO
 && 
ªåõs
 < 10) {

215 
	`k¥ötf
("emu%d: I/OÉrror on close,Ñetrying\n",

216 
sc
->
e_unô
);

217 
ªåõs
++;

223 i‡(!
möe
) {

224 
	`lock_ªÀa£
(
sc
->
e_lock
);

226  
ªsu…
;

227 
	}
}

234 
	$emu_d‹ód
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, u_öt32_à
Àn
,

235 
u_öt32_t
 
›
, 
uio
 *uio)

237 
ªsu…
;

239 
	`as£π
(
uio
->
uio_rw
 =
UIO_READ
);

241 
	`lock_acquúe
(
sc
->
e_lock
);

243 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

244 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

245 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

246 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

247 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

248 i‡(
ªsu…
) {

249 
out
;

252 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
	`emu_ºeg
(sc, 
REG_IOLEN
), 
uio
);

254 
uio
->
uio_off£t
 = 
	`emu_ºeg
(
sc
, 
REG_OFFSET
);

256 
out
:

257 
	`lock_ªÀa£
(
sc
->
e_lock
);

258  
ªsu…
;

259 
	}
}

266 
	$emu_ªad
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, u_öt32_à
Àn
,

267 
uio
 *uio)

269  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READ
, 
uio
);

270 
	}
}

277 
	$emu_ªaddú
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, u_öt32_à
Àn
,

278 
uio
 *uio)

280  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READDIR
, 
uio
);

281 
	}
}

288 
	$emu_wrôe
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, u_öt32_à
Àn
,

289 
uio
 *uio)

291 
ªsu…
;

293 
	`as£π
(
uio
->
uio_rw
 =
UIO_WRITE
);

295 
	`lock_acquúe
(
sc
->
e_lock
);

297 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

298 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

299 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

301 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
Àn
, 
uio
);

302 i‡(
ªsu…
) {

303 
out
;

306 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_WRITE
);

307 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

309 
out
:

310 
	`lock_ªÀa£
(
sc
->
e_lock
);

311  
ªsu…
;

312 
	}
}

319 
	$emu_gësize
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, 
off_t
 *
ªtvÆ
)

321 
ªsu…
;

323 
	`lock_acquúe
(
sc
->
e_lock
);

325 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

326 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_GETSIZE
);

327 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

328 i‡(
ªsu…
==0) {

329 *
ªtvÆ
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
);

332 
	`lock_ªÀa£
(
sc
->
e_lock
);

333  
ªsu…
;

334 
	}
}

341 
	$emu_åunc
(
emu_so·c
 *
sc
, 
u_öt32_t
 
h™dÀ
, 
off_t
 
Àn
)

343 
ªsu…
;

345 
	`lock_acquúe
(
sc
->
e_lock
);

347 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

348 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

349 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_TRUNC
);

350 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

352 
	`lock_ªÀa£
(
sc
->
e_lock
);

353  
ªsu…
;

354 
	}
}

366 
emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
u_öt32_t
 
h™dÀ
, 
isdú
,

367 
emufs_vnode
 **
ªt
);

374 
	$emufs_›í
(
vnode
 *
v
, 
›íÊags
)

384 i‡(
›íÊags
 & 
O_APPEND
) {

385  
EUNIMP
;

388 ()
v
;

391 
	}
}

398 
	$emufs_›ídú
(
vnode
 *
v
, 
›íÊags
)

400 
›íÊags
 & 
O_ACCMODE
) {

401 
O_RDONLY
:

403 
O_WRONLY
:

404 
O_RDWR
:

406  
EISDIR
;

408 i‡(
›íÊags
 & 
O_APPEND
) {

409  
EISDIR
;

412 ()
v
;

414 
	}
}

421 
	$emufs_˛o£
(
vnode
 *
v
)

423 ()
v
;

425 
	}
}

434 
	$emufs_ª˛aim
(
vnode
 *
v
)

436 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

437 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

438 
ix
, 
i
, 
num
, 
ªsu…
;

440 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

441 
	`lock_acquúe
(
ev
->
ev_v
.
vn_cou¡lock
);

443 i‡(
ev
->
ev_v
.
vn_ªfcou¡
 != 1) {

444 
	`lock_ªÀa£
(
ev
->
ev_v
.
vn_cou¡lock
);

445 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

446  
EBUSY
;

453 
	`lock_ªÀa£
(
ev
->
ev_v
.
vn_cou¡lock
);

456 
ªsu…
 = 
	`emu_˛o£
(
ev
->
ev_emu
,Év->
ev_h™dÀ
);

457 i‡(
ªsu…
) {

458 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

459  
ªsu…
;

462 
ix
 = -1;

463 
num
 = 
	`¨øy_gënum
(
ef
->
ef_vnodes
);

464 
i
=0; i<
num
; i++) {

465 
emufs_vnode
 *
evx
 = 
	`¨øy_gëguy
(
ef
->
ef_vnodes
, 
i
);

466 i‡(
evx
==
ev
) {

467 
ix
 = 
i
;

471 i‡(
ix
<0) {

472 
	`∑nic
("emu%d:Ñeclaim vnode %uÇot in vnodeÖool\n",

473 
ef
->
ef_emu
->
e_unô
, 
ev
->
ev_h™dÀ
);

475 
	`¨øy_ªmove
(
ef
->
ef_vnodes
, 
ix
);

477 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

479 
	`VOP_KILL
(&
ev
->
ev_v
);

481 
	`k‰ì
(
ev
);

483 
	}
}

490 
	$emufs_ªad
(
vnode
 *
v
, 
uio
 *uio)

492 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

493 
u_öt32_t
 
amt
;

494 
size_t
 
ﬁdªsid
;

495 
ªsu…
;

497 
	`as£π
(
uio
->
uio_rw
==
UIO_READ
);

499 
uio
->
uio_ªsid
 > 0) {

500 
amt
 = 
uio
->
uio_ªsid
;

501 i‡(
amt
 > 
EMU_MAXIO
) {

502 
amt
 = 
EMU_MAXIO
;

505 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

507 
ªsu…
 = 
	`emu_ªad
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

508 i‡(
ªsu…
) {

509  
ªsu…
;

512 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

519 
	}
}

526 
	$emufs_gëdúíåy
(
vnode
 *
v
, 
uio
 *uio)

528 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

529 
u_öt32_t
 
amt
;

531 
	`as£π
(
uio
->
uio_rw
==
UIO_READ
);

533 
amt
 = 
uio
->
uio_ªsid
;

534 i‡(
amt
 > 
EMU_MAXIO
) {

535 
amt
 = 
EMU_MAXIO
;

538  
	`emu_ªaddú
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

539 
	}
}

546 
	$emufs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

548 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

549 
u_öt32_t
 
amt
;

550 
size_t
 
ﬁdªsid
;

551 
ªsu…
;

553 
	`as£π
(
uio
->
uio_rw
==
UIO_WRITE
);

555 
uio
->
uio_ªsid
 > 0) {

556 
amt
 = 
uio
->
uio_ªsid
;

557 i‡(
amt
 > 
EMU_MAXIO
) {

558 
amt
 = 
EMU_MAXIO
;

561 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

563 
ªsu…
 = 
	`emu_wrôe
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

564 i‡(
ªsu…
) {

565  
ªsu…
;

568 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

575 
	}
}

582 
	$emufs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

588 ()
v
;

589 ()
›
;

590 ()
d©a
;

592  
EINVAL
;

593 
	}
}

600 
	$emufs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

602 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

603 
ªsu…
;

605 
	`bzîo
(
°©buf
, (
°©
));

607 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

608 i‡(
ªsu…
) {

609  
ªsu…
;

612 
°©buf
->
°_∆ök
 = 1;

614 
ªsu…
 = 
	`emu_gësize
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, &
°©buf
->
°_size
);

615 i‡(
ªsu…
) {

616  
ªsu…
;

619 
°©buf
->
°_blocks
 = 0;

622 
	}
}

629 
	$emufs_fûe_gëty≥
(
vnode
 *
v
, 
u_öt32_t
 *
ªsu…
)

631 ()
v
;

632 *
ªsu…
 = 
S_IFREG
;

634 
	}
}

641 
	$emufs_dú_gëty≥
(
vnode
 *
v
, 
u_öt32_t
 *
ªsu…
)

643 ()
v
;

644 *
ªsu…
 = 
S_IFDIR
;

646 
	}
}

653 
	$emufs_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

655 i‡(
pos
<0) {

656  
EINVAL
;

660 ()
v
;

663 
	}
}

670 
	$emufs_fsync
(
vnode
 *
v
)

672 ()
v
;

674 
	}
}

681 
	$emufs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

683 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

684  
	`emu_åunc
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
Àn
);

685 
	}
}

692 
	$emufs_¸ót
(
vnode
 *
dú
, c⁄° *
«me
, 
ex˛
, vnodê**
ªt
)

694 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

695 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

696 
emufs_vnode
 *
√wguy
;

697 
u_öt32_t
 
h™dÀ
;

698 
ªsu…
;

699 
isdú
;

701 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
«me
, 1, 
ex˛
,

702 &
h™dÀ
, &
isdú
);

703 i‡(
ªsu…
) {

704  
ªsu…
;

707 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

708 i‡(
ªsu…
) {

709 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

710  
ªsu…
;

713 *
ªt
 = &
√wguy
->
ev_v
;

715 
	}
}

722 
	$emufs_lookup
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
)

724 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

725 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

726 
emufs_vnode
 *
√wguy
;

727 
u_öt32_t
 
h™dÀ
;

728 
ªsu…
;

729 
isdú
;

731 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
∑th«me
, 0, 0,

732 &
h™dÀ
, &
isdú
);

733 i‡(
ªsu…
) {

734  
ªsu…
;

737 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

738 i‡(
ªsu…
) {

739 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

740  
ªsu…
;

743 *
ªt
 = &
√wguy
->
ev_v
;

745 
	}
}

752 
	$emufs_look∑ª¡
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
,

753 *
buf
, 
size_t
 
Àn
)

755 *
s
;

757 
s
 = 
	`°ºchr
(
∑th«me
, '/');

758 i‡(
s
==
NULL
) {

760 i‡(
	`°æí
(
∑th«me
)+1 > 
Àn
) {

761  
ENAMETOOLONG
;

763 
	`VOP_INCREF
(
dú
);

764 *
ªt
 = 
dú
;

765 
	`°r˝y
(
buf
, 
∑th«me
);

769 *
s
 = 0;

770 
s
++;

771 i‡(
	`°æí
(
s
)+1 > 
Àn
) {

772  
ENAMETOOLONG
;

774 
	`°r˝y
(
buf
, 
s
);

776  
	`emufs_lookup
(
dú
, 
∑th«me
, 
ªt
);

777 
	}
}

784 
	$emufs_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

786 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

787 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

789 i‡(
ev
 =
ef
->
ef_roŸ
) {

796 ()
uio
;

798  
EUNIMP
;

799 
	}
}

809 
	$emufs_nŸdú
()

811  
ENOTDIR
;

812 
	}
}

816 
	$emufs_isdú
()

818  
EISDIR
;

819 
	}
}

823 
	$emufs_unimp
()

825  
EUNIMP
;

826 
	}
}

833 
	#ISDIR
 ((*)
emufs_isdú
)

	)

834 
	#NOTDIR
 ((*)
emufs_nŸdú
)

	)

835 
	#UNIMP
 ((*)
emufs_unimp
)

	)

840 c⁄° 
vnode_›s
 
	gemufs_fûe›s
 = {

841 
VOP_MAGIC
,

843 
emufs_›í
,

844 
emufs_˛o£
,

845 
emufs_ª˛aim
,

847 
emufs_ªad
,

848 
NOTDIR
,

849 
NOTDIR
,

850 
emufs_wrôe
,

851 
emufs_io˘l
,

852 
emufs_°©
,

853 
emufs_fûe_gëty≥
,

854 
emufs_åy£ek
,

855 
emufs_fsync
,

856 
UNIMP
,

857 
emufs_åunˇã
,

858 
NOTDIR
,

860 
NOTDIR
,

861 
NOTDIR
,

862 
NOTDIR
,

863 
NOTDIR
,

864 
NOTDIR
,

865 
NOTDIR
,

866 
NOTDIR
,

868 
NOTDIR
,

869 
NOTDIR
,

875 c⁄° 
vnode_›s
 
	gemufs_dú›s
 = {

876 
VOP_MAGIC
,

878 
emufs_›ídú
,

879 
emufs_˛o£
,

880 
emufs_ª˛aim
,

882 
ISDIR
,

883 
ISDIR
,

884 
emufs_gëdúíåy
,

885 
ISDIR
,

886 
emufs_io˘l
,

887 
emufs_°©
,

888 
emufs_dú_gëty≥
,

889 
UNIMP
,

890 
ISDIR
,

891 
ISDIR
,

892 
ISDIR
,

893 
emufs_«mefûe
,

895 
emufs_¸ót
,

896 
UNIMP
,

897 
UNIMP
,

898 
UNIMP
,

899 
UNIMP
,

900 
UNIMP
,

901 
UNIMP
,

903 
emufs_lookup
,

904 
emufs_look∑ª¡
,

912 
	$emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
u_öt32_t
 
h™dÀ
, 
isdú
,

913 
emufs_vnode
 **
ªt
)

915 
emufs_vnode
 *
ev
;

916 
i
, 
num
, 
ªsu…
;

918 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

920 
num
 = 
	`¨øy_gënum
(
ef
->
ef_vnodes
);

921 
i
=0; i<
num
; i++) {

922 
ev
 = 
	`¨øy_gëguy
(
ef
->
ef_vnodes
, 
i
);

923 i‡(
ev
->
ev_h™dÀ
==
h™dÀ
) {

926 
	`VOP_INCREF
(&
ev
->
ev_v
);

928 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

929 *
ªt
 = 
ev
;

936 
ev
 = 
	`kmÆloc
((
emufs_vnode
));

937 i‡(
ev
==
NULL
) {

938 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

939  
ENOMEM
;

942 
ev
->
ev_emu
 = 
ef
->
ef_emu
;

943 
ev
->
ev_h™dÀ
 = 
h™dÀ
;

945 
ªsu…
 = 
	`VOP_INIT
(&
ev
->
ev_v
, 
isdú
 ? &
emufs_dú›s
 : &
emufs_fûe›s
,

946 &
ef
->
ef_fs
, 
ev
);

947 i‡(
ªsu…
) {

948 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

949 
	`k‰ì
(
ev
);

950  
ªsu…
;

953 
ªsu…
 = 
	`¨øy_add
(
ef
->
ef_vnodes
, 
ev
);

954 i‡(
ªsu…
) {

955 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

957 
	`VOP_KILL
(&
ev
->
ev_v
);

958 
	`k‰ì
(
ev
);

959  
ªsu…
;

962 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

964 *
ªt
 = 
ev
;

966 
	}
}

981 
	$emufs_sync
(
fs
 *fs)

983 ()
fs
;

985 
	}
}

992 
	$emufs_gëvﬁ«me
(
fs
 *fs)

995 ()
fs
;

996  
NULL
;

997 
	}
}

1003 
vnode
 *

1004 
	$emufs_gëroŸ
(
fs
 *fs)

1006 
emufs_fs
 *
ef
;

1008 
	`as£π
(
fs
!=
NULL
);

1010 
ef
 = 
fs
->
fs_d©a
;

1012 
	`as£π
(
ef
!=
NULL
);

1013 
	`as£π
(
ef
->
ef_roŸ
!=
NULL
);

1015 
	`VOP_INCREF
(&
ef
->
ef_roŸ
->
ev_v
);

1016  &
ef
->
ef_roŸ
->
ev_v
;

1017 
	}
}

1024 
	$emufs_unmou¡
(
fs
 *fs)

1027 ()
fs
;

1028  
EBUSY
;

1029 
	}
}

1040 
	$emufs_addtovfs
(
emu_so·c
 *
sc
, c⁄° *
dev«me
)

1042 
emufs_fs
 *
ef
;

1043 
ªsu…
;

1045 
ef
 = 
	`kmÆloc
((
emufs_fs
));

1046 i‡(
ef
==
NULL
) {

1047  
ENOMEM
;

1050 
ef
->
ef_fs
.
fs_sync
 = 
emufs_sync
;

1051 
ef
->
ef_fs
.
fs_gëvﬁ«me
 = 
emufs_gëvﬁ«me
;

1052 
ef
->
ef_fs
.
fs_gëroŸ
 = 
emufs_gëroŸ
;

1053 
ef
->
ef_fs
.
fs_unmou¡
 = 
emufs_unmou¡
;

1054 
ef
->
ef_fs
.
fs_d©a
 =Éf;

1056 
ef
->
ef_emu
 = 
sc
;

1057 
ef
->
ef_roŸ
 = 
NULL
;

1058 
ef
->
ef_vnodes
 = 
	`¨øy_¸óã
();

1059 i‡(
ef
->
ef_vnodes
 =
NULL
) {

1060 
	`k‰ì
(
ef
);

1061  
ENOMEM
;

1064 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
EMU_ROOTHANDLE
, 1, &ef->
ef_roŸ
);

1065 i‡(
ªsu…
) {

1066 
	`k‰ì
(
ef
);

1067  
ªsu…
;

1070 
	`as£π
(
ef
->
ef_roŸ
!=
NULL
);

1072 
ªsu…
 = 
	`vfs_addfs
(
dev«me
, &
ef
->
ef_fs
);

1073 i‡(
ªsu…
) {

1074 
	`VOP_DECREF
(&
ef
->
ef_roŸ
->
ev_v
);

1075 
	`k‰ì
(
ef
);

1077  
ªsu…
;

1078 
	}
}

1092 
	$c⁄fig_emu
(
emu_so·c
 *
sc
, 
emuno
)

1094 
«me
[32];

1096 
sc
->
e_lock
 = 
	`lock_¸óã
("emufs-lock");

1097 i‡(
sc
->
e_lock
 =
NULL
) {

1098  
ENOMEM
;

1100 
sc
->
e_£m
 = 
	`£m_¸óã
("emufs-sem", 0);

1101 i‡(
sc
->
e_£m
 =
NULL
) {

1102 
	`lock_de°roy
(
sc
->
e_lock
);

1103 
sc
->
e_lock
 = 
NULL
;

1104  
ENOMEM
;

1106 
sc
->
e_iobuf
 = 
	`bus_m≠_¨ó
(sc->
e_busd©a
, sc->
e_bu•os
, 
EMU_BUFFER
);

1108 
	`¢¥ötf
(
«me
, “ame), "emu%d", 
emuno
);

1110  
	`emufs_addtovfs
(
sc
, 
«me
);

1111 
	}
}

	@dev/lamebus/emu.h

1 #i‚de‡
_LAMEBUS_EMU_H_


2 
	#_LAMEBUS_EMU_H_


	)

4 
	#EMU_MAXIO
 16384

	)

5 
	#EMU_ROOTHANDLE
 0

	)

13 
	semu_so·c
 {

15 *
	me_busd©a
;

16 
u_öt32_t
 
	me_bu•os
;

17 
	me_unô
;

20 
lock
 *
	me_lock
;

21 
£m≠h‹e
 *
	me_£m
;

22 *
	me_iobuf
;

25 
u_öt32_t
 
	me_ªsu…
;

29 
emu_úq
( *);

	@dev/lamebus/emu_att.c

5 
	~<ty≥s.h
>

6 
	~<lib.h
>

7 
	~<œmebus/œmebus.h
>

8 
	~<œmebus/emu.h
>

9 
	~"autoc⁄f.h
"

12 
	#LOW_VERSION
 1

	)

14 
	#HIGH_VERSION
 1

	)

16 
emu_so·c
 *

17 
	$©èch_emu_to_œmebus
(
emuno
, 
œmebus_so·c
 *
sc
)

19 
emu_so·c
 *
es
;

20 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_EMUFS
,

21 
LOW_VERSION
, 
HIGH_VERSION
);

22 i‡(
¶Ÿ
 < 0) {

23  
NULL
;

26 
es
 = 
	`kmÆloc
((
emu_so·c
));

27 i‡(
es
==
NULL
) {

28  
NULL
;

31 
es
->
e_busd©a
 = 
sc
;

32 
es
->
e_bu•os
 = 
¶Ÿ
;

33 
es
->
e_unô
 = 
emuno
;

35 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

36 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
es
, 
emu_úq
);

38  
es
;

39 
	}
}

	@dev/lamebus/lamebus.c

5 
	~<ty≥s.h
>

6 
	~<lib.h
>

7 
	~<machöe/•l.h
>

8 
	~<œmebus/œmebus.h
>

11 
	#CFGREG_VID
 0

	)

12 
	#CFGREG_DID
 4

	)

13 
	#CFGREG_DRL
 8

	)

16 
	#CTLREG_RAMSZ
 0x200

	)

17 
	#CTLREG_IRQS
 0x204

	)

18 
	#CTLREG_PWR
 0x208

	)

25 
ölöe


26 
u_öt32_t


27 
	$ªad_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
u_öt32_t
 
off£t
)

30 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

31  
	`œmebus_ªad_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

32 
	}
}

38 
ölöe


40 
	$wrôe_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
u_öt32_t
 
off£t
,

41 
u_öt32_t
 
vÆ
)

43 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

44 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

45 
	}
}

51 
ölöe


52 
u_öt32_t


53 
	$ªad_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
u_öt32_t
 
off£t
)

56  
	`ªad_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

57 
	}
}

63 
ölöe


65 
	$wrôe_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
u_öt32_t
 
off£t
, u_öt32_à
vÆ
)

67 
	`wrôe_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

68 
	}
}

82 
	$œmebus_¥obe
(
œmebus_so·c
 *
sc
,

83 
u_öt32_t
 
víd‹id
, u_öt32_à
devi˚id
,

84 
u_öt32_t
 
lowvî
, u_öt32_à
highvî
)

86 
¶Ÿ
;

87 
u_öt32_t
 
vÆ
;

88 
•l
;

95 
•l
 = 
	`•lhigh
();

97 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; slot++) {

98 i‡(
sc
->
ls_¶Ÿsöu£
 & (1<<
¶Ÿ
)) {

103 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_VID
);

104 i‡(
vÆ
!=
víd‹id
) {

109 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DID
);

110 i‡(
vÆ
 !
devi˚id
) {

115 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DRL
);

116 i‡(
vÆ
 < 
lowvî
 || vÆ > 
highvî
) {

123 
	`•lx
(
•l
);

124  
¶Ÿ
;

129 
	`•lx
(
•l
);

131 
	}
}

139 
	$œmebus_m¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

141 
•l
;

143 
u_öt32_t
 
mask
 = ((u_öt32_t)1Ë<< 
¶Ÿ
;

144 
	`as£π
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

146 
•l
 = 
	`•lhigh
();

148 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)!=0) {

149 
	`∑nic
("œmebus_m¨k: slŸ %dáÃódy i¿u£\n", 
¶Ÿ
);

152 
sc
->
ls_¶Ÿsöu£
 |
mask
;

154 
	`•lx
(
•l
);

155 
	}
}

161 
	$œmebus_unm¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

163 
•l
;

165 
u_öt32_t
 
mask
 = ((u_öt32_t)1Ë<< 
¶Ÿ
;

166 
	`as£π
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

168 
•l
 = 
	`•lhigh
();

170 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

171 
	`∑nic
("œmebus_m¨k: slŸ %dÇŸ m¨ked i¿u£\n", 
¶Ÿ
);

174 
sc
->
ls_¶Ÿsöu£
 &~
mask
;

176 
	`•lx
(
•l
);

177 
	}
}

184 
œmebus_©èch_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
,

185 *
devd©a
,

186 (*
úqfunc
)(*
devd©a
))

188 
•l
;

190 
u_öt32_t
 
mask
 = ((u_öt32_t)1Ë<< 
¶Ÿ
;

191 
	`as£π
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

193 
•l
 = 
	`•lhigh
();

195 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

196 
	`∑nic
("lamebus_attach_interrupt: slot %dÇot marked in use\n",

197 
¶Ÿ
);

200 
	`as£π
(
sc
->
ls_devd©a
[
¶Ÿ
]==
NULL
);

201 
	`as£π
(
sc
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
);

203 
sc
->
ls_devd©a
[
¶Ÿ
] = 
devd©a
;

204 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
úqfunc
;

206 
	`•lx
(
•l
);

207 
	}
}

214 
	$œmebus_dëach_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

216 
•l
;

218 
u_öt32_t
 
mask
 = ((u_öt32_t)1Ë<< 
¶Ÿ
;

219 
	`as£π
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

221 
•l
 = 
	`•lhigh
();

223 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

224 
	`∑nic
("lamebus_detach_interrupt: slot %dÇot marked in use\n",

225 
¶Ÿ
);

228 
	`as£π
(
sc
->
ls_úqfuncs
[
¶Ÿ
]!=
NULL
);

230 
sc
->
ls_devd©a
[
¶Ÿ
] = 
NULL
;

231 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
NULL
;

233 
	`•lx
(
•l
);

234 
	}
}

241 
	$œmebus_öãºu±
(
œmebus_so·c
 *
œmebus
)

254 
¶Ÿ
;

255 
u_öt32_t
 
mask
;

256 
u_öt32_t
 
úqs
;

259 
duds
=0;

260 
duds_this_time
=0;

263 
	`as£π
(
cur•l
>0);

266 
	`as£π
(
œmebus
!=
NULL
);

272 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

274 i‡(
úqs
==0) {

278 
	`k¥ötf
("lamebus: stray interrupt\n");

279 
duds
++;

280 
duds_this_time
++;

301 
mask
=1, 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; mask<<=1, slot++) {

302 i‡((
úqs
 & 
mask
)==0) {

311 i‡((
œmebus
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

315 
duds
++;

316 
duds_this_time
++;

320 i‡(
œmebus
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
) {

325 
duds
++;

326 
duds_this_time
++;

335 
œmebus
->
ls_úqfuncs
[
¶Ÿ
]÷amebus->
ls_devd©a
[slot]);

342 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

364 i‡(
duds_this_time
==0 && 
duds
>0) {

365 
	`k¥ötf
("œmebus: %d dud i¡îru±s\n", 
duds
);

366 
duds
 = 0;

369 i‡(
duds
 > 10000) {

370 
	`∑nic
("œmebus:Åoÿm™y (%dËdud i¡îru±s\n", 
duds
);

372 
	}
}

378 
	$œmebus_powîoff
(
œmebus_so·c
 *
œmebus
)

384 
	`•lhigh
();

385 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_PWR
, 0);

388 
	`˝u_hÆt
();

389 
	}
}

394 
u_öt32_t


395 
	$œmebus_ømsize
()

404  
	`ªad_˘l_ªgi°î
(
NULL
, 
CTLREG_RAMSZ
);

405 
	}
}

411 
œmebus_so·c
 *

412 
	$œmebus_öô
()

414 
œmebus_so·c
 *
œmebus
;

415 
i
;

418 
œmebus
 = 
	`kmÆloc
((
œmebus_so·c
));

419 i‡(
œmebus
==
NULL
) {

420 
	`∑nic
("lamebus_init: Out of memory\n");

426 
œmebus
->
ls_¶Ÿsöu£
 = 1 << 
LB_CONTROLLER_SLOT
;

428 
i
=0; i<
LB_NSLOTS
; i++) {

429 
œmebus
->
ls_devd©a
[
i
] = 
NULL
;

430 
œmebus
->
ls_úqfuncs
[
i
] = 
NULL
;

433  
œmebus
;

434 
	}
}

	@dev/lamebus/lamebus.h

1 #i‚de‡
_LAMEBUS_H_


2 
	#_LAMEBUS_H_


	)

10 
	#LB_VENDOR_CS161
 1

	)

13 
	#LBCS161_BUSCTL
 1

	)

14 
	#LBCS161_TIMER
 2

	)

15 
	#LBCS161_DISK
 3

	)

16 
	#LBCS161_SERIAL
 4

	)

17 
	#LBCS161_SCREEN
 5

	)

18 
	#LBCS161_NET
 6

	)

19 
	#LBCS161_EMUFS
 7

	)

20 
	#LBCS161_TRACE
 8

	)

21 
	#LBCS161_RANDOM
 9

	)

24 
	#LB_CONTROLLER_SLOT
 31

	)

27 
	#LB_NSLOTS
 32

	)

30 
	#LB_CONFIG_SIZE
 1024

	)

33 
	#LB_SLOT_SIZE
 65536

	)

36 (*
	tlb_úqfunc
)(*
	tdevd©a
);

41 
	sœmebus_so·c
 {

43 
u_öt32_t
 
ls_¶Ÿsöu£
;

44 *
ls_devd©a
[
LB_NSLOTS
];

45 
lb_úqfunc
 
ls_úqfuncs
[
LB_NSLOTS
];

51 
œmebus_so·c
 *
	`œmebus_öô
();

60 
	`œmebus_¥obe
(
œmebus_so·c
 *,

61 
u_öt32_t
 
víd‹id
, u_öt32_à
devi˚id
,

62 
u_öt32_t
 
lowvî
, u_öt32_à
highvî
);

69 
	`œmebus_m¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

70 
	`œmebus_unm¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

75 
	`œmebus_©èch_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
,

76 *
devd©a
,

77 (*
úqfunc
)(*
devd©a
));

81 
	`œmebus_dëach_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

86 
	`œmebus_öãºu±
(
œmebus_so·c
 *);

91 
	`œmebus_powîoff
(
œmebus_so·c
 *);

96 
u_öt32_t
 
	`œmebus_ømsize
();

102 
u_öt32_t
 
	`œmebus_ªad_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

103 
u_öt32_t
 
off£t
);

104 
	`œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

105 
u_öt32_t
 
off£t
, u_öt32_à
vÆ
);

110 *
	`œmebus_m≠_¨ó
(
œmebus_so·c
 *, 
¶Ÿ
,

111 
u_öt32_t
 
off£t
);

	@dev/lamebus/lhd.c

5 
	~<ty≥s.h
>

6 
	~<lib.h
>

7 
	~<synch.h
>

8 
	~<kîn/î∫o.h
>

9 
	~<machöe/bus.h
>

10 
	~<uio.h
>

11 
	~<vfs.h
>

12 
	~<œmebus/lhd.h
>

13 
	~"autoc⁄f.h
"

16 
	#LHD_REG_NSECT
 0

	)

17 
	#LHD_REG_STAT
 4

	)

18 
	#LHD_REG_SECT
 8

	)

19 
	#LHD_REG_RPM
 12

	)

22 
	#LHD_IDLE
 0

	)

23 
	#LHD_WORKING
 1

	)

24 
	#LHD_OK
 4

	)

25 
	#LHD_INVSECT
 12

	)

26 
	#LHD_MEDIA
 20

	)

27 
	#LHD_ISWRITE
 2

	)

28 
	#LHD_STATEMASK
 0x1d

	)

31 
	#LHD_BUFFER
 32768

	)

37 
ölöe


38 
u_öt32_t
 
	$lhd_rdªg
(
lhd_so·c
 *
lh
, 
u_öt32_t
 
ªg
)

40  
	`bus_ªad_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
);

41 
	}
}

47 
ölöe


48 
	$lhd_wªg
(
lhd_so·c
 *
lh
, 
u_öt32_t
 
ªg
, u_öt32_à
vÆ
)

50 
	`bus_wrôe_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
, 
vÆ
);

51 
	}
}

57 
	$lhd_code_to_î∫o
(
lhd_so·c
 *
lh
, 
code
)

59 
code
 & 
LHD_STATEMASK
) {

60 
LHD_OK
:  0;

61 
LHD_INVSECT
:  
EINVAL
;

62 
LHD_MEDIA
:  
EIO
;

64 
	`k¥ötf
("lhd%d: Unknow¿ªsu… codê%d\n", 
lh
->
lh_unô
, 
code
);

65  
EAGAIN
;

66 
	}
}

74 
	$lhd_iod⁄e
(
lhd_so·c
 *
lh
, 
îr
)

76 
lh
->
lh_ªsu…
 = 
îr
;

77 
	`V
(
lh
->
lh_d⁄e
);

78 
	}
}

86 
	$lhd_úq
(*
vlh
)

88 
lhd_so·c
 *
lh
 = 
vlh
;

89 
u_öt32_t
 
vÆ
;

91 
vÆ
 = 
	`lhd_rdªg
(
lh
, 
LHD_REG_STAT
);

93 
vÆ
 & 
LHD_STATEMASK
) {

94 
LHD_IDLE
:

95 
LHD_WORKING
:

97 
LHD_OK
:

98 
LHD_INVSECT
:

99 
LHD_MEDIA
:

100 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

101 
	`lhd_iod⁄e
(
lh
, 
	`lhd_code_to_î∫o
÷h, 
vÆ
));

104 
	}
}

111 
	$lhd_›í
(
devi˚
 *
d
, 
›íÊags
)

116 ()
d
;

117 ()
›íÊags
;

120 
	}
}

127 
	$lhd_˛o£
(
devi˚
 *
d
)

132 ()
d
;

135 
	}
}

142 
	$lhd_io˘l
(
devi˚
 *
d
, 
›
, 
u£Ωå_t
 
d©a
)

147 ()
d
;

148 ()
›
;

149 ()
d©a
;

150  
EIOCTL
;

151 
	}
}

161 
	$lhd_ª£t
(
lhd_so·c
 *
lh
)

163 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

164 
	}
}

172 
	$lhd_io
(
devi˚
 *
d
, 
uio
 *uio)

174 
lhd_so·c
 *
lh
 = 
d
->
d_d©a
;

176 
u_öt32_t
 
£˘‹
 = 
uio
->
uio_off£t
 / 
LHD_SECTSIZE
;

177 
u_öt32_t
 
£˘off
 = 
uio
->
uio_off£t
 % 
LHD_SECTSIZE
;

178 
u_öt32_t
 
Àn
 = 
uio
->
uio_ªsid
 / 
LHD_SECTSIZE
;

179 
u_öt32_t
 
Ànoff
 = 
uio
->
uio_ªsid
 % 
LHD_SECTSIZE
;

180 
u_öt32_t
 
i
;

181 
u_öt32_t
 
°©vÆ
 = 
LHD_WORKING
;

182 
ªsu…
;

185 i‡(
£˘off
 !0 || 
Ànoff
 != 0) {

186  
EINVAL
;

190 i‡(
£˘‹
+
Àn
 > 
lh
->
lh_dev
.
d_blocks
) {

191  
EINVAL
;

195 i‡(
uio
->
uio_rw
==
UIO_WRITE
) {

196 
°©vÆ
 |
LHD_ISWRITE
;

200 
i
=0; i<
Àn
; i++) {

203 
	`P
(
lh
->
lh_˛ór
);

209 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

210 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

211 i‡(
ªsu…
) {

212 
	`V
(
lh
->
lh_˛ór
);

213  
ªsu…
;

218 
	`lhd_wªg
(
lh
, 
LHD_REG_SECT
, 
£˘‹
+
i
);

221 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 
°©vÆ
);

224 
	`P
(
lh
->
lh_d⁄e
);

227 
ªsu…
 = 
lh
->
lh_ªsu…
;

233 i‡(
ªsu…
==0 && 
uio
->
uio_rw
==
UIO_READ
) {

234 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

238 
	`V
(
lh
->
lh_˛ór
);

241 i‡(
ªsu…
) {

242  
ªsu…
;

247 
	}
}

253 
	$c⁄fig_lhd
(
lhd_so·c
 *
lh
, 
lhdno
)

255 
«me
[32];

258 
	`¢¥ötf
(
«me
, “ame), "lhd%d", 
lhdno
);

261 
lh
->
lh_buf
 = 
	`bus_m≠_¨ó
÷h->
lh_busd©a
,Üh->
lh_bu•os
, 
LHD_BUFFER
);

264 
lh
->
lh_˛ór
 = 
	`£m_¸óã
("lhd-clear", 1);

265 i‡(
lh
->
lh_˛ór
 =
NULL
) {

266  
ENOMEM
;

268 
lh
->
lh_d⁄e
 = 
	`£m_¸óã
("lhd-done", 0);

269 i‡(
lh
->
lh_d⁄e
 =
NULL
) {

270 
	`£m_de°roy
(
lh
->
lh_˛ór
);

271 
lh
->
lh_˛ór
 = 
NULL
;

272  
ENOMEM
;

276 
lh
->
lh_dev
.
d_›í
 = 
lhd_›í
;

277 
lh
->
lh_dev
.
d_˛o£
 = 
lhd_˛o£
;

278 
lh
->
lh_dev
.
d_io
 = 
lhd_io
;

279 
lh
->
lh_dev
.
d_io˘l
 = 
lhd_io˘l
;

280 
lh
->
lh_dev
.
d_blocks
 = 
	`bus_ªad_ªgi°î
÷h->
lh_busd©a
,Üh->
lh_bu•os
,

281 
LHD_REG_NSECT
);

282 
lh
->
lh_dev
.
d_blocksize
 = 
LHD_SECTSIZE
;

283 
lh
->
lh_dev
.
d_d©a
 =Üh;

286  
	`vfs_adddev
(
«me
, &
lh
->
lh_dev
, 1);

287 
	}
}

	@dev/lamebus/lhd.h

1 #i‚de‡
_LAMEBUS_LHD_H_


2 
	#_LAMEBUS_LHD_H_


	)

4 
	~<dev.h
>

9 
	#LHD_SECTSIZE
 512

	)

14 
	slhd_so·c
 {

16 *
	mlh_busd©a
;

17 
u_öt32_t
 
	mlh_bu•os
;

18 
	mlh_unô
;

24 *
	mlh_buf
;

25 
	mlh_ªsu…
;

26 
£m≠h‹e
 *
	mlh_˛ór
;

27 
£m≠h‹e
 *
	mlh_d⁄e
;

29 
devi˚
 
	mlh_dev
;

33 
lhd_úq
( *);

	@dev/lamebus/lhd_att.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<œmebus/œmebus.h
>

7 
	~<œmebus/lhd.h
>

8 
	~"autoc⁄f.h
"

11 
	#LOW_VERSION
 2

	)

13 
	#HIGH_VERSION
 2

	)

15 
lhd_so·c
 *

16 
	$©èch_lhd_to_œmebus
(
lhdno
, 
œmebus_so·c
 *
sc
)

18 
lhd_so·c
 *
lh
;

19 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_DISK
,

20 
LOW_VERSION
, 
HIGH_VERSION
);

21 i‡(
¶Ÿ
 < 0) {

23  
NULL
;

26 
lh
 = 
	`kmÆloc
((
lhd_so·c
));

27 i‡(
lh
==
NULL
) {

29  
NULL
;

33 
lh
->
lh_busd©a
 = 
sc
;

34 
lh
->
lh_bu•os
 = 
¶Ÿ
;

35 
lh
->
lh_unô
 = 
lhdno
;

38 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

39 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
lh
, 
lhd_úq
);

41  
lh
;

42 
	}
}

	@dev/lamebus/lnet.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

7 
	$c⁄fig_ ë
(
 ë_so·c
 *
sc
, 
 ëno
)

9 ()
sc
;

11 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

13  
ENODEV
;

14 
	}
}

	@dev/lamebus/lnet_att.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<œmebus/œmebus.h
>

4 
	~"autoc⁄f.h
"

7 
	#LOW_VERSION
 1

	)

9 
	#HIGH_VERSION
 1

	)

11 
 ë_so·c
 *

12 
	$©èch_ ë_to_œmebus
(
 ëno
, 
œmebus_so·c
 *
sc
)

14 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_NET
,

15 
LOW_VERSION
, 
HIGH_VERSION
);

16 i‡(
¶Ÿ
 < 0) {

17  
NULL
;

20 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

22  
NULL
;

23 
	}
}

	@dev/lamebus/lrandom.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<uio.h
>

7 
	~<machöe/bus.h
>

8 
	~<œmebus/Ã™dom.h
>

9 
	~"autoc⁄f.h
"

12 
	#LR_REG_RAND
 0

	)

15 
	#LR_RANDMAX
 0xffffffff

	)

18 
	$c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
Ã
, 
Ã™domno
)

20 ()
Ã™domno
;

21 ()
Ã
;

23 
	}
}

25 
u_öt32_t


26 
	$Ã™dom_øndom
(*
devd©a
)

28 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

29  
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
, 
LR_REG_RAND
);

30 
	}
}

32 
u_öt32_t


33 
	$Ã™dom_øndmax
(*
devd©a
)

35 ()
devd©a
;

36  
LR_RANDMAX
;

37 
	}
}

40 
	$Ã™dom_ªad
(*
devd©a
, 
uio
 *uio)

42 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

43 
ªsu…
;

45 
u_öt32_t
 
vÆ
;

46 
buf
[(
u_öt32_t
)];

47 } 
u
;

49 
uio
->
uio_ªsid
 > 0) {

50 
u
.
vÆ
 = 
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
,

51 
LR_REG_RAND
);

52 
ªsu…
 = 
	`uiomove
(
u
.
buf
, (u.buf), 
uio
);

53 i‡(
ªsu…
) {

54  
ªsu…
;

59 
	}
}

	@dev/lamebus/lrandom.h

1 #i‚de‡
_LAMEBUS_LRANDOM_H_


2 
	#_LAMEBUS_LRANDOM_H_


	)

4 
	guio
;

6 
	sÃ™dom_so·c
 {

8 *
	mÃ_bus
;

9 
u_öt32_t
 
	mÃ_bu•os
;

13 
u_öt32_t
 
Ã™dom_øndom
–*
devd©a
);

14 
u_öt32_t
 
Ã™dom_øndmax
–*
devd©a
);

15 
Ã™dom_ªad
–*, 
uio
 *);

	@dev/lamebus/lrandom_att.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<œmebus/œmebus.h
>

4 
	~<œmebus/Ã™dom.h
>

5 
	~"autoc⁄f.h
"

8 
	#LOW_VERSION
 1

	)

10 
	#HIGH_VERSION
 1

	)

12 
Ã™dom_so·c
 *

13 
	$©èch_Ã™dom_to_œmebus
(
Ã™domno
, 
œmebus_so·c
 *
sc
)

15 
Ã™dom_so·c
 *
Ã
;

16 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_RANDOM
,

17 
LOW_VERSION
, 
HIGH_VERSION
);

18 i‡(
¶Ÿ
 < 0) {

19  
NULL
;

22 
Ã
 = 
	`kmÆloc
((
Ã™dom_so·c
));

23 i‡(
Ã
==
NULL
) {

24  
NULL
;

27 ()
Ã™domno
;

29 
Ã
->
Ã_bus
 = 
sc
;

30 
Ã
->
Ã_bu•os
 = 
¶Ÿ
;

32 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

34  
Ã
;

35 
	}
}

	@dev/lamebus/lscreen.c

7 
	~<ty≥s.h
>

8 
	~<lib.h
>

9 
	~<machöe/bus.h
>

10 
	~<machöe/•l.h
>

11 
	~<œmebus/ls¸ìn.h
>

12 
	~"autoc⁄f.h
"

15 
	#LSCR_REG_POSN
 0

	)

16 
	#LSCR_REG_SIZE
 4

	)

17 
	#LSCR_REG_CHAR
 8

	)

18 
	#LSCR_REG_RIRQ
 12

	)

21 
	#LSCR_IRQ_ENABLE
 1

	)

22 
	#LSCR_IRQ_ACTIVE
 2

	)

25 
	#LSCR_SCREEN
 32768

	)

29 
ölöe


31 
	$•lôxy
(
u_öt32_t
 
xy
, *
x
, *
y
)

33 *
x
 = 
xy
 >> 16;

34 *
y
 = 
xy
 & 0xffff;

35 
	}
}

39 
ölöe


40 
u_öt32_t


41 
	$mîgexy
(
x
, 
y
)

43 
u_öt32_t
 
vÆ
 = 
x
;

44  (
vÆ
 << 16Ë| 
y
;

45 
	}
}

53 
	$ls¸ìn_úq
(*
vsc
)

55 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

56 
u_öt32_t
 
ch
, 
x
;

58 
	`as£π
(
cur•l
>0);

59 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSCR_REG_RIRQ
);

60 i‡(
x
 & 
LSCR_IRQ_ACTIVE
) {

61 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

62 
LSCR_REG_CHAR
);

63 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

64 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

66 i‡(
sc
->
ls_öput
) {

67 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

70 
	}
}

79 
	$ls¸ìn_√wlöe
(
ls¸ìn_so·c
 *
sc
)

81 i‡(
sc
->
ls_cy
 >sc->
ls_height
-1) {

86 
	`memmove
(
sc
->
ls_s¸ìn
, sc->ls_s¸ì¿+ sc->
ls_width
,

87 
sc
->
ls_width
 * (sc->
ls_height
-1));

88 
	`bzîo
(
sc
->
ls_s¸ìn
 + sc->
ls_width
 * (sc->
ls_height
-1),

89 
sc
->
ls_width
);

92 
sc
->
ls_cy
++;

94 
sc
->
ls_cx
=0;

95 
	}
}

102 
	$ls¸ìn_ch¨
(
ls¸ìn_so·c
 *
sc
, 
ch
)

104 i‡(
sc
->
ls_cx
 >sc->
ls_width
) {

105 
	`ls¸ìn_√wlöe
(
sc
);

108 
sc
->
ls_s¸ìn
[sc->
ls_cy
*sc->
ls_width
 + sc->
ls_cx
] = 
ch
;

109 
sc
->
ls_cx
++;

110 
	}
}

117 
	$ls¸ìn_wrôe
(*
vsc
, 
ch
)

119 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

120 
ccx
, 
ccy
;

122 
ch
) {

123 '\n': 
	`ls¸ìn_√wlöe
(
sc
); ;

124 : 
	`ls¸ìn_ch¨
(
sc
, 
ch
); ;

132 
ccx
 = 
sc
->
ls_cx
;

133 
ccy
 = 
sc
->
ls_cy
;

134 i‡(
ccx
==
sc
->
ls_width
) {

135 
ccx
--;

139 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

140 
LSCR_REG_POSN
, 
	`mîgexy
(
ccx
, 
ccy
));

141 
	}
}

149 
	$c⁄fig_ls¸ìn
(
ls¸ìn_so·c
 *
sc
, 
ls¸ì¬o
)

151 
u_öt32_t
 
vÆ
;

153 ()
ls¸ì¬o
;

159 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

160 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

165 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

166 
LSCR_REG_SIZE
);

167 
	`•lôxy
(
vÆ
, &
sc
->
ls_width
, &sc->
ls_height
);

172 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

173 
LSCR_REG_POSN
);

174 
	`•lôxy
(
vÆ
, &
sc
->
ls_cx
, &sc->
ls_cy
);

179 
sc
->
ls_s¸ìn
 = 
	`bus_m≠_¨ó
(sc->
ls_busd©a
, sc->
ls_bu•os
,

180 
LSCR_SCREEN
);

183 
	}
}

	@dev/lamebus/lscreen.h

1 #i‚de‡
_LAMEBUS_LSCREEN_H_


2 
	#_LAMEBUS_LSCREEN_H_


	)

7 
	sls¸ìn_so·c
 {

9 
	mls_width
, 
	mls_height
;

10 
	mls_cx
, 
	mls_cy
;

11 *
	mls_s¸ìn
;

14 *
	mls_busd©a
;

15 
u_öt32_t
 
	mls_bu•os
;

18 *
	mls_devd©a
;

19 (*
	mls_°¨t
)(*
	mdevd©a
);

20 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

24 
ls¸ìn_úq
–*
sc
);

27 
ls¸ìn_wrôe
–*
sc
, 
ch
);

	@dev/lamebus/lscreen_att.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<œmebus/œmebus.h
>

7 
	~<œmebus/ls¸ìn.h
>

8 
	~"autoc⁄f.h
"

11 
	#LOW_VERSION
 1

	)

13 
	#HIGH_VERSION
 1

	)

15 
ls¸ìn_so·c
 *

16 
	$©èch_ls¸ìn_to_œmebus
(
ls¸ì¬o
, 
œmebus_so·c
 *
sc
)

18 
ls¸ìn_so·c
 *
ls
;

19 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SCREEN
,

20 
LOW_VERSION
, 
HIGH_VERSION
);

21 i‡(
¶Ÿ
 < 0) {

23  
NULL
;

26 
ls
 = 
	`kmÆloc
((
ls¸ìn_so·c
));

27 i‡(
ls
==
NULL
) {

29  
NULL
;

33 
ls
->
ls_busd©a
 = 
sc
;

34 
ls
->
ls_bu•os
 = 
¶Ÿ
;

37 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

38 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
ls¸ìn_úq
);

40  
ls
;

41 
	}
}

	@dev/lamebus/lser.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/•l.h
>

4 
	~<machöe/bus.h
>

5 
	~<œmebus/l£r.h
>

6 
	~"autoc⁄f.h
"

9 
	#LSER_REG_CHAR
 0

	)

10 
	#LSER_REG_WIRQ
 4

	)

11 
	#LSER_REG_RIRQ
 8

	)

14 
	#LSER_IRQ_ENABLE
 1

	)

15 
	#LSER_IRQ_ACTIVE
 2

	)

18 
	$l£r_úq
(*
vsc
)

20 
l£r_so·c
 *
sc
 = 
vsc
;

21 
u_öt32_t
 
x
;

22 
˛ór_to_wrôe
=0;

23 
gŸ_a_ªad
=0;

24 
u_öt32_t
 
ch
 = 0;

26 
	`as£π
(
cur•l
>0);

28 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_WIRQ
);

29 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

30 
x
 = 
LSER_IRQ_ENABLE
;

31 
sc
->
ls_wbusy
 = 0;

32 
˛ór_to_wrôe
 = 1;

33 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

34 
LSER_REG_WIRQ
, 
x
);

37 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_RIRQ
);

38 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

39 
x
 = 
LSER_IRQ_ENABLE
;

40 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

41 
LSER_REG_CHAR
);

42 
gŸ_a_ªad
 = 1;

43 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

44 
LSER_REG_RIRQ
, 
x
);

47 i‡(
˛ór_to_wrôe
 && 
sc
->
ls_°¨t
 !
NULL
) {

48 
sc
->
	`ls_°¨t
(sc->
ls_devd©a
);

50 i‡(
gŸ_a_ªad
 && 
sc
->
ls_öput
 !
NULL
) {

51 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

53 
	}
}

56 
	$l£r_wrôe
(*
vls
, 
ch
)

58 
l£r_so·c
 *
ls
 = 
vls
;

59 
•l
 = 
	`•lhigh
();

61 i‡(
ls
->
ls_wbusy
) {

73 
	`∑nic
("lser: Not clearÅo write\n");

75 
ls
->
ls_wbusy
 = 1;

77 
	`bus_wrôe_ªgi°î
(
ls
->
ls_busd©a
,Üs->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

79 
	`•lx
(
•l
);

80 
	}
}

84 
	$l£r_•ö_u¡û_wrôe
(
l£r_so·c
 *
sc
)

86 
u_öt32_t
 
vÆ
;

87 
	`as£π
(
cur•l
>0);

89 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

90 
LSER_REG_WIRQ
);

92 (
vÆ
 & 
LSER_IRQ_ACTIVE
)==0);

93 
	}
}

96 
	$l£r_wrôïﬁÀd
(*
vsc
, 
ch
)

98 
l£r_so·c
 *
sc
 = 
vsc
;

99 
•l
 = 
	`•lhigh
();

100 
úq≥ndög
=0;

102 i‡(
sc
->
ls_wbusy
) {

103 
úq≥ndög
 = 1;

104 
	`l£r_•ö_u¡û_wrôe
(
sc
);

106 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

107 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

111 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

114 
	`l£r_•ö_u¡û_wrôe
(
sc
);

121 i‡(!
úq≥ndög
) {

122 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

123 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

126 
	`•lx
(
•l
);

127 
	}
}

130 
	$c⁄fig_l£r
(
l£r_so·c
 *
sc
, 
l£∫o
)

132 ()
l£∫o
;

138 
sc
->
ls_wbusy
 = 0;

140 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

141 
LSER_REG_RIRQ
, 
LSER_IRQ_ENABLE
);

142 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

143 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

146 
	}
}

	@dev/lamebus/lser.h

1 #i‚de‡
_LAMEBUS_LSER_H_


2 
	#_LAMEBUS_LSER_H_


	)

4 
	sl£r_so·c
 {

6 vﬁ©ûê
	mls_wbusy
;

9 *
	mls_busd©a
;

10 
u_öt32_t
 
	mls_bu•os
;

13 *
	mls_devd©a
;

14 (*
	mls_°¨t
)(*
	mdevd©a
);

15 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

19 
l£r_úq
–*
sc
);

22 
l£r_wrôe
–*
sc
, 
ch
);

23 
l£r_wrôïﬁÀd
–*
sc
, 
ch
);

	@dev/lamebus/lser_att.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<œmebus/œmebus.h
>

4 
	~<œmebus/l£r.h
>

5 
	~"autoc⁄f.h
"

8 
	#LOW_VERSION
 1

	)

10 
	#HIGH_VERSION
 1

	)

12 
l£r_so·c
 *

13 
	$©èch_l£r_to_œmebus
(
l£∫o
, 
œmebus_so·c
 *
sc
)

15 
l£r_so·c
 *
ls
;

16 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SERIAL
,

17 
LOW_VERSION
, 
HIGH_VERSION
);

18 i‡(
¶Ÿ
 < 0) {

19  
NULL
;

22 
ls
 = 
	`kmÆloc
((
l£r_so·c
));

23 i‡(
ls
==
NULL
) {

24  
NULL
;

27 ()
l£∫o
;

29 
ls
->
ls_busd©a
 = 
sc
;

30 
ls
->
ls_bu•os
 = 
¶Ÿ
;

32 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

33 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
l£r_úq
);

35  
ls
;

36 
	}
}

	@dev/lamebus/ltimer.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<˛ock.h
>

7 
	~<machöe/bus.h
>

8 
	~<œmebus/…imî.h
>

9 
	~"autoc⁄f.h
"

12 
	#LT_REG_SEC
 0

	)

13 
	#LT_REG_NSEC
 4

	)

14 
	#LT_REG_ROE
 8

	)

15 
	#LT_REG_IRQ
 12

	)

16 
	#LT_REG_COUNT
 16

	)

17 
	#LT_REG_SPKR
 20

	)

20 
	#LT_GRANULARITY
 1000000

	)

23 
	ghave˛ock
=0;

29 
	$c⁄fig_…imî
(
…imî_so·c
 *
…
, 
…imîno
)

35 i‡(!
have˛ock
) {

36 
have˛ock
 = 1;

37 
…
->
…_h¨d˛ock
 = 1;

45 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_ROE
, 1);

46 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_COUNT
,

47 
LT_GRANULARITY
/
HZ
);

49 
	`k¥ötf
("\nh¨d˛ock o¿…imî%d (%u hz)", 
…imîno
, 
HZ
);

55 
…
->
…_h¨d˛ock
 = 0;

59 
	}
}

65 
	$…imî_úq
(*
v…
)

67 
…imî_so·c
 *
…
 = 
v…
;

68 
u_öt32_t
 
vÆ
;

70 
vÆ
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_IRQ
);

71 i‡(
vÆ
) {

76 i‡(
…
->
…_h¨d˛ock
) {

77 
	`h¨d˛ock
();

80 
	}
}

88 
	$…imî_bìp
(*
v…
)

90 
…imî_so·c
 *
…
 = 
v…
;

92 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_SPKR
, 440);

93 
	}
}

101 
	$…imî_gëtime
(*
v…
, 
time_t
 *
£cs
, 
u_öt32_t
 *
n£cs
)

103 
…imî_so·c
 *
…
 = 
v…
;

104 
u_öt32_t
 
£cs1
, 
£cs2
;

117 
£cs1
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

118 
LT_REG_SEC
);

119 *
n£cs
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

120 
LT_REG_NSEC
);

121 
£cs2
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

122 
LT_REG_SEC
);

124 i‡(*
n£cs
 < 5000000) {

125 *
£cs
 = 
£cs2
;

128 *
£cs
 = 
£cs1
;

130 
	}
}

	@dev/lamebus/ltimer.h

1 #i‚de‡
_LAMEBUS_LTIMER_H_


2 
	#_LAMEBUS_LTIMER_H_


	)

7 
	s…imî_so·c
 {

9 
	m…_h¨d˛ock
;

12 *
	m…_bus
;

13 
u_öt32_t
 
	m…_bu•os
;

18 
…imî_úq
–*
…
);

21 
…imî_bìp
–*
devd©a
);

22 
…imî_gëtime
–*
devd©a
,

23 
time_t
 *
£cs
, 
u_öt32_t
 *
n£cs
);

	@dev/lamebus/ltimer_att.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<œmebus/œmebus.h
>

7 
	~<œmebus/…imî.h
>

8 
	~"autoc⁄f.h
"

11 
	#LOW_VERSION
 1

	)

13 
	#HIGH_VERSION
 1

	)

15 
…imî_so·c
 *

16 
	$©èch_…imî_to_œmebus
(
…imîno
, 
œmebus_so·c
 *
sc
)

18 
…imî_so·c
 *
…
;

19 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TIMER
,

20 
LOW_VERSION
, 
HIGH_VERSION
);

21 i‡(
¶Ÿ
 < 0) {

23  
NULL
;

26 
…
 = 
	`kmÆloc
((
…imî_so·c
));

27 i‡(
…
==
NULL
) {

29  
NULL
;

32 ()
…imîno
;

35 
…
->
…_bus
 = 
sc
;

36 
…
->
…_bu•os
 = 
¶Ÿ
;

39 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

40 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
…
, 
…imî_úq
);

42  
…
;

43 
	}
}

	@dev/lamebus/ltrace.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/bus.h
>

4 
	~<œmebus/…ø˚.h
>

5 
	~"autoc⁄f.h
"

8 
	#LTRACE_REG_TRON
 0

	)

9 
	#LTRACE_REG_TROFF
 4

	)

10 
	#LTRACE_REG_DEBUG
 8

	)

11 
	#LTRACE_REG_DUMP
 12

	)

13 
…ø˚_so·c
 *
	gthe_åa˚
;

16 
	$…ø˚_⁄
(
u_öt32_t
 
code
)

18 i‡(
the_åa˚
 !
NULL
) {

19 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

20 
LTRACE_REG_TRON
, 
code
);

22 
	}
}

25 
	$…ø˚_off
(
u_öt32_t
 
code
)

27 i‡(
the_åa˚
 !
NULL
) {

28 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

29 
LTRACE_REG_TROFF
, 
code
);

31 
	}
}

34 
	$…ø˚_debug
(
u_öt32_t
 
code
)

36 i‡(
the_åa˚
 !
NULL
) {

37 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

38 
LTRACE_REG_DEBUG
, 
code
);

40 
	}
}

43 
	$…ø˚_dump
(
u_öt32_t
 
code
)

45 i‡(
the_åa˚
 !
NULL
) {

46 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

47 
LTRACE_REG_DUMP
, 
code
);

49 
	}
}

52 
	$c⁄fig_…ø˚
(
…ø˚_so·c
 *
sc
, 
…ø˚no
)

54 ()
…ø˚no
;

55 
the_åa˚
 = 
sc
;

57 
	}
}

	@dev/lamebus/ltrace.h

1 #i‚de‡
_LAMEBUS_LTRACE_H_


2 
	#_LAMEBUS_LTRACE_H_


	)

4 
	s…ø˚_so·c
 {

6 *
	m…_busd©a
;

7 
u_öt32_t
 
	m…_bu•os
;

33 
…ø˚_⁄
(
u_öt32_t
 
code
);

34 
…ø˚_off
(
u_öt32_t
 
code
);

35 
…ø˚_debug
(
u_öt32_t
 
code
);

36 
…ø˚_dump
(
u_öt32_t
 
code
);

	@dev/lamebus/ltrace_att.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<œmebus/œmebus.h
>

4 
	~<œmebus/…ø˚.h
>

5 
	~"autoc⁄f.h
"

8 
	#LOW_VERSION
 1

	)

10 
	#HIGH_VERSION
 1

	)

12 
…ø˚_so·c
 *

13 
	$©èch_…ø˚_to_œmebus
(
…ø˚no
, 
œmebus_so·c
 *
sc
)

15 
…ø˚_so·c
 *
…
;

16 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TRACE
,

17 
LOW_VERSION
, 
HIGH_VERSION
);

18 i‡(
¶Ÿ
 < 0) {

19  
NULL
;

22 
…
 = 
	`kmÆloc
((
…ø˚_so·c
));

23 i‡(
…
==
NULL
) {

24  
NULL
;

27 ()
…ø˚no
;

29 
…
->
…_busd©a
 = 
sc
;

30 
…
->
…_bu•os
 = 
¶Ÿ
;

32 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

34  
…
;

35 
	}
}

	@dev/lamebus/random_lrandom.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<gíîic/øndom.h
>

9 
	~<œmebus/Ã™dom.h
>

10 
	~"autoc⁄f.h
"

12 
øndom_so·c
 *

13 
	$©èch_øndom_to_Ã™dom
(
øndomno
, 
Ã™dom_so·c
 *
ls
)

15 
øndom_so·c
 *
rs
 = 
	`kmÆloc
((random_softc));

16 i‡(
rs
==
NULL
) {

17  
NULL
;

20 ()
øndomno
;

22 
rs
->
rs_devd©a
 = 
ls
;

23 
rs
->
rs_øndom
 = 
Ã™dom_øndom
;

24 
rs
->
rs_øndmax
 = 
Ã™dom_øndmax
;

25 
rs
->
rs_ªad
 = 
Ã™dom_ªad
;

27  
rs
;

28 
	}
}

	@dev/lamebus/rtclock_ltimer.c

12 
	~<ty≥s.h
>

13 
	~<lib.h
>

14 
	~<gíîic/π˛ock.h
>

15 
	~<œmebus/…imî.h
>

16 
	~"autoc⁄f.h
"

18 
π˛ock_so·c
 *

19 
	$©èch_π˛ock_to_…imî
(
π˛ockno
, 
…imî_so·c
 *
ls
)

25 
π˛ock_so·c
 *
πc
 = 
	`kmÆloc
((rtclock_softc));

26 i‡(
πc
==
NULL
) {

28  
NULL
;

31 ()
π˛ockno
;

33 
πc
->
πc_devd©a
 = 
ls
;

34 
πc
->
πc_gëtime
 = 
…imî_gëtime
;

36  
πc
;

37 
	}
}

	@fs/sfs/sfs_fs.c

7 
	~<ty≥s.h
>

8 
	~<lib.h
>

9 
	~<kîn/î∫o.h
>

10 
	~<¨øy.h
>

11 
	~<bôm≠.h
>

12 
	~<uio.h
>

13 
	~<dev.h
>

14 
	~<sfs.h
>

15 
	~<vfs.h
>

18 
	#SFS_FS_BITMAPSIZE
(
sfs
Ë
	`SFS_BITMAPSIZE
((sfs)->
sfs_su≥r
.
•_nblocks
)

	)

19 
	#SFS_FS_BITBLOCKS
(
sfs
Ë
	`SFS_BITBLOCKS
((sfs)->
sfs_su≥r
.
•_nblocks
)

	)

41 
	$sfs_m≠io
(
sfs_fs
 *
sfs
, 
uio_rw
 
rw
)

43 
u_öt32_t
 
j
, 
m≠size
;

44 *
bôd©a
;

45 
ªsu…
;

48 
m≠size
 = 
	`SFS_FS_BITBLOCKS
(
sfs
);

51 
bôd©a
 = 
	`bôm≠_gëd©a
(
sfs
->
sfs_‰ìm≠
);

54 
j
=0; j<
m≠size
; j++) {

57 *
±r
 = 
bôd©a
 + 
j
*
SFS_BLOCKSIZE
;

60 i‡(
rw
 =
UIO_READ
) {

61 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
±r
, 
SFS_MAP_LOCATION
+
j
);

64 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
±r
, 
SFS_MAP_LOCATION
+
j
);

68 i‡(
ªsu…
) {

69  
ªsu…
;

73 
	}
}

82 
	$sfs_sync
(
fs
 *fs)

84 
sfs_fs
 *
sfs
;

85 
i
, 
num
, 
ªsu…
;

117 
sfs
 = 
fs
->
fs_d©a
;

120 
num
 = 
	`¨øy_gënum
(
sfs
->
sfs_vnodes
);

121 
i
=0; i<
num
; i++) {

122 
sfs_vnode
 *
sv
 = 
	`¨øy_gëguy
(
sfs
->
sfs_vnodes
, 
i
);

123 
	`VOP_FSYNC
(&
sv
->
sv_v
);

127 i‡(
sfs
->
sfs_‰ìm≠dúty
) {

128 
ªsu…
 = 
	`sfs_m≠io
(
sfs
, 
UIO_WRITE
);

129 i‡(
ªsu…
) {

130  
ªsu…
;

132 
sfs
->
sfs_‰ìm≠dúty
 = 0;

136 i‡(
sfs
->
sfs_su≥rdúty
) {

137 
ªsu…
 = 
	`sfs_wblock
(
sfs
, &sfs->
sfs_su≥r
, 
SFS_SB_LOCATION
);

138 i‡(
ªsu…
) {

139  
ªsu…
;

141 
sfs
->
sfs_su≥rdúty
 = 0;

145 
	}
}

154 
	$sfs_gëvﬁ«me
(
fs
 *fs)

156 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

157  
sfs
->
sfs_su≥r
.
•_vﬁ«me
;

158 
	}
}

167 
	$sfs_unmou¡
(
fs
 *fs)

169 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

172 i‡(
	`¨øy_gënum
(
sfs
->
sfs_vnodes
)>0) {

173  
EBUSY
;

177 
	`as£π
(
sfs
->
sfs_su≥rdúty
==0);

178 
	`as£π
(
sfs
->
sfs_‰ìm≠dúty
==0);

181 
	`¨øy_de°roy
(
sfs
->
sfs_vnodes
);

182 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

185 ()
sfs
->
sfs_devi˚
;

188 
	`k‰ì
(
sfs
);

192 
	}
}

210 
	$sfs_domou¡
(*
›ti⁄s
, 
devi˚
 *
dev
, 
fs
 **
ªt
)

212 
ªsu…
;

213 
sfs_fs
 *
sfs
;

216 ()
›ti⁄s
;

221 
	`as£π
((
sfs_su≥r
)==
SFS_BLOCKSIZE
);

222 
	`as£π
((
sfs_öode
)==
SFS_BLOCKSIZE
);

223 
	`as£π
(
SFS_BLOCKSIZE
 % (
sfs_dú
) == 0);

233 i‡(
dev
->
d_blocksize
 !
SFS_BLOCKSIZE
) {

234  
ENXIO
;

238 
sfs
 = 
	`kmÆloc
((
sfs_fs
));

239 i‡(
sfs
==
NULL
) {

240  
ENOMEM
;

244 
sfs
->
sfs_vnodes
 = 
	`¨øy_¸óã
();

245 i‡(
sfs
->
sfs_vnodes
 =
NULL
) {

246 
	`k‰ì
(
sfs
);

247  
ENOMEM
;

251 
sfs
->
sfs_devi˚
 = 
dev
;

254 
ªsu…
 = 
	`sfs_rblock
(
sfs
, &sfs->
sfs_su≥r
, 
SFS_SB_LOCATION
);

255 i‡(
ªsu…
) {

256 
	`¨øy_de°roy
(
sfs
->
sfs_vnodes
);

257 
	`k‰ì
(
sfs
);

258  
ªsu…
;

263 i‡(
sfs
->
sfs_su≥r
.
•_magic
 !
SFS_MAGIC
) {

264 
	`k¥ötf
("sfs: Wrong magicÇumber in superblock "

266 
sfs
->
sfs_su≥r
.
•_magic
,

267 
SFS_MAGIC
);

268 
	`¨øy_de°roy
(
sfs
->
sfs_vnodes
);

269 
	`k‰ì
(
sfs
);

270  
EINVAL
;

273 i‡(
sfs
->
sfs_su≥r
.
•_nblocks
 > 
dev
->
d_blocks
) {

274 
	`k¥ötf
("sfs: warning - fs has %u blocks, device has %u\n",

275 
sfs
->
sfs_su≥r
.
•_nblocks
, 
dev
->
d_blocks
);

279 
sfs
->
sfs_su≥r
.
•_vﬁ«me
[(sfs->sfs_super.sp_volname)-1] = 0;

282 
sfs
->
sfs_‰ìm≠
 = 
	`bôm≠_¸óã
(
	`SFS_FS_BITMAPSIZE
(sfs));

283 i‡(
sfs
->
sfs_‰ìm≠
 =
NULL
) {

284 
	`¨øy_de°roy
(
sfs
->
sfs_vnodes
);

285 
	`k‰ì
(
sfs
);

286  
ENOMEM
;

288 
ªsu…
 = 
	`sfs_m≠io
(
sfs
, 
UIO_READ
);

289 i‡(
ªsu…
) {

290 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

291 
	`¨øy_de°roy
(
sfs
->
sfs_vnodes
);

292 
	`k‰ì
(
sfs
);

293  
ªsu…
;

297 
sfs
->
sfs_absfs
.
fs_sync
 = 
sfs_sync
;

298 
sfs
->
sfs_absfs
.
fs_gëvﬁ«me
 = 
sfs_gëvﬁ«me
;

299 
sfs
->
sfs_absfs
.
fs_gëroŸ
 = 
sfs_gëroŸ
;

300 
sfs
->
sfs_absfs
.
fs_unmou¡
 = 
sfs_unmou¡
;

301 
sfs
->
sfs_absfs
.
fs_d©a
 = sfs;

304 
sfs
->
sfs_su≥rdúty
 = 0;

305 
sfs
->
sfs_‰ìm≠dúty
 = 0;

308 *
ªt
 = &
sfs
->
sfs_absfs
;

311 
	}
}

318 
	$sfs_mou¡
(c⁄° *
devi˚
)

320  
	`vfs_mou¡
(
devi˚
, 
NULL
, 
sfs_domou¡
);

321 
	}
}

	@fs/sfs/sfs_io.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~<uio.h
>

5 
	~<sfs.h
>

6 
	~<dev.h
>

18 
	$sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio)

20 
ªsu…
;

21 
åõs
=0;

23 
	`DEBUG
(
DB_SFS
, "sfs: %s %u\n",

24 
uio
->
uio_rw
 =
UIO_READ
 ? "read" : "write",

25 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

27 
ªåy
:

28 
ªsu…
 = 
sfs
->
sfs_devi˚
->
	`d_io
(sfs->sfs_devi˚, 
uio
);

29 i‡(
ªsu…
 =
EINVAL
) {

35 
	`∑nic
("sfs: d_ioÑeturned EINVAL\n");

37 i‡(
ªsu…
 =
EIO
) {

38 i‡(
åõs
 == 0) {

39 
åõs
++;

40 
	`k¥ötf
("sfs: block %u I/OÉrror,Ñetrying\n",

41 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

42 
ªåy
;

44 i‡(
åõs
 < 10) {

45 
åõs
++;

46 
ªåy
;

49 
	`k¥ötf
("sfs: block %u I/OÉrror, giving upáfter "

51 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
, 
åõs
);

54  
ªsu…
;

55 
	}
}

58 
	$sfs_rblock
(
sfs_fs
 *
sfs
, *
d©a
, 
u_öt32_t
 
block
)

60 
uio
 
ku
;

61 
	`SFSUIO
(&
ku
, 
d©a
, 
block
, 
UIO_READ
);

62  
	`sfs_rwblock
(
sfs
, &
ku
);

63 
	}
}

66 
	$sfs_wblock
(
sfs_fs
 *
sfs
, *
d©a
, 
u_öt32_t
 
block
)

68 
uio
 
ku
;

69 
	`SFSUIO
(&
ku
, 
d©a
, 
block
, 
UIO_WRITE
);

70  
	`sfs_rwblock
(
sfs
, &
ku
);

71 
	}
}

	@fs/sfs/sfs_vnode.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<synch.h
>

9 
	~<¨øy.h
>

10 
	~<bôm≠.h
>

11 
	~<kîn/°©.h
>

12 
	~<kîn/î∫o.h
>

13 
	~<kîn/uni°d.h
>

14 
	~<uio.h
>

15 
	~<dev.h
>

16 
	~<sfs.h
>

20 
sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
u_öt32_t
 
öo
, 
ty≥
,

21 
sfs_vnode
 **
ªt
);

30 
	$sfs_˛órblock
(
sfs_fs
 *
sfs
, 
u_öt32_t
 
block
)

33 
zîos
[
SFS_BLOCKSIZE
];

34  
	`sfs_wblock
(
sfs
, 
zîos
, 
block
);

35 
	}
}

40 
	$sfs_sync_öode
(
sfs_vnode
 *
sv
)

42 i‡(
sv
->
sv_dúty
) {

43 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

44 
ªsu…
 = 
	`sfs_wblock
(
sfs
, &
sv
->
sv_i
, sv->
sv_öo
);

45 i‡(
ªsu…
) {

46  
ªsu…
;

48 
sv
->
sv_dúty
 = 0;

51 
	}
}

62 
	$sfs_bÆloc
(
sfs_fs
 *
sfs
, 
u_öt32_t
 *
diskblock
)

64 
ªsu…
;

66 
ªsu…
 = 
	`bôm≠_Æloc
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

67 i‡(
ªsu…
) {

68  
ªsu…
;

70 
sfs
->
sfs_‰ìm≠dúty
 = 1;

72 i‡(*
diskblock
 >
sfs
->
sfs_su≥r
.
•_nblocks
) {

73 
	`∑nic
("sfs: bÆloc: invÆid block %u\n", *
diskblock
);

77  
	`sfs_˛órblock
(
sfs
, *
diskblock
);

78 
	}
}

85 
	$sfs_b‰ì
(
sfs_fs
 *
sfs
, 
u_öt32_t
 
diskblock
)

87 
	`bôm≠_unm¨k
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

88 
sfs
->
sfs_‰ìm≠dúty
 = 1;

89 
	}
}

96 
	$sfs_bu£d
(
sfs_fs
 *
sfs
, 
u_öt32_t
 
diskblock
)

98 i‡(
diskblock
 >
sfs
->
sfs_su≥r
.
•_nblocks
) {

99 
	`∑nic
("sfs: sfs_bused called on out ofÑange block %u\n",

100 
diskblock
);

102  
	`bôm≠_is£t
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

103 
	}
}

117 
	$sfs_bm≠
(
sfs_vnode
 *
sv
, 
u_öt32_t
 
fûeblock
, 
dﬂŒoc
,

118 
u_öt32_t
 *
diskblock
)

127 
u_öt32_t
 
idbuf
[
SFS_DBPERIDB
];

129 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

130 
u_öt32_t
 
block
;

131 
u_öt32_t
 
idblock
;

132 
u_öt32_t
 
idnum
, 
idoff
;

133 
ªsu…
;

135 
	`as£π
((
idbuf
)==
SFS_BLOCKSIZE
);

140 i‡(
fûeblock
 < 
SFS_NDIRECT
) {

144 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
];

149 i‡(
block
==0 && 
dﬂŒoc
) {

150 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

151 i‡(
ªsu…
) {

152  
ªsu…
;

156 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
] = 
block
;

157 
sv
->
sv_dúty
 = 1;

163 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

164 
	`∑nic
("sfs: Data block %u (block %u of file %u) "

165 "m¨ked fªe\n", 
block
, 
fûeblock
, 
sv
->
sv_öo
);

167 *
diskblock
 = 
block
;

177 
fûeblock
 -
SFS_NDIRECT
;

180 
idnum
 = 
fûeblock
 / 
SFS_DBPERIDB
;

181 
idoff
 = 
fûeblock
 % 
SFS_DBPERIDB
;

187 i‡(
idnum
 > 0) {

188  
EINVAL
;

192 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

194 i‡(
idblock
==0 && !
dﬂŒoc
) {

200 *
diskblock
 = 0;

203 i‡(
idblock
==0) {

210 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
idblock
);

211 i‡(
ªsu…
) {

212  
ªsu…
;

216 
sv
->
sv_i
.
sfi_ödúe˘
 = 
idblock
;

219 
sv
->
sv_dúty
 = 1;

222 
	`bzîo
(
idbuf
, (idbuf));

228 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
idbuf
, 
idblock
);

229 i‡(
ªsu…
) {

230  
ªsu…
;

235 
block
 = 
idbuf
[
idoff
];

238 i‡(
block
==0 && 
dﬂŒoc
) {

239 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

240 i‡(
ªsu…
) {

241  
ªsu…
;

245 
idbuf
[
idoff
] = 
block
;

248 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
idbuf
, 
idblock
);

249 i‡(
ªsu…
) {

250  
ªsu…
;

255 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

256 
	`∑nic
("sfs: Data block %u (block %u of file %u) marked free\n",

257 
block
, 
fûeblock
, 
sv
->
sv_öo
);

259 *
diskblock
 = 
block
;

261 
	}
}

279 
	$sfs_∑πülio
(
sfs_vnode
 *
sv
, 
uio
 *uio,

280 
u_öt32_t
 
skù°¨t
, u_öt32_à
Àn
)

289 
iobuf
[
SFS_BLOCKSIZE
];

291 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

292 
u_öt32_t
 
diskblock
;

293 
u_öt32_t
 
fûeblock
;

294 
ªsu…
;

297 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

299 
	`as£π
(
skù°¨t
 + 
Àn
 <
SFS_BLOCKSIZE
);

302 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

305 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

306 i‡(
ªsu…
) {

307  
ªsu…
;

310 i‡(
diskblock
 == 0) {

315 
	`as£π
(
uio
->
uio_rw
 =
UIO_READ
);

316 
	`bzîo
(
iobuf
, (iobuf));

322 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
iobuf
, 
diskblock
);

323 i‡(
ªsu…
) {

324  
ªsu…
;

331 
ªsu…
 = 
	`uiomove
(
iobuf
+
skù°¨t
, 
Àn
, 
uio
);

332 i‡(
ªsu…
) {

333  
ªsu…
;

339 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

340 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
iobuf
, 
diskblock
);

341 i‡(
ªsu…
) {

342  
ªsu…
;

347 
	}
}

354 
	$sfs_blockio
(
sfs_vnode
 *
sv
, 
uio
 *uio)

356 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

357 
u_öt32_t
 
diskblock
;

358 
u_öt32_t
 
fûeblock
;

359 
ªsu…
;

360 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

361 
off_t
 
ßveoff
;

362 
off_t
 
diskoff
;

363 
off_t
 
ßvîes
;

364 
off_t
 
diskªs
;

367 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

370 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

371 i‡(
ªsu…
) {

372  
ªsu…
;

375 i‡(
diskblock
 == 0) {

382 
	`as£π
(
uio
->
uio_rw
 =
UIO_READ
);

383  
	`uiomovezîos
(
SFS_BLOCKSIZE
, 
uio
);

390 
ßveoff
 = 
uio
->
uio_off£t
;

391 
diskoff
 = 
diskblock
 * 
SFS_BLOCKSIZE
;

392 
uio
->
uio_off£t
 = 
diskoff
;

397 
	`as£π
(
uio
->
uio_ªsid
 >
SFS_BLOCKSIZE
);

398 
ßvîes
 = 
uio
->
uio_ªsid
;

399 
diskªs
 = 
SFS_BLOCKSIZE
;

400 
uio
->
uio_ªsid
 = 
diskªs
;

402 
ªsu…
 = 
	`sfs_rwblock
(
sfs
, 
uio
);

408 
uio
->
uio_off£t
 = (uio->uio_off£à- 
diskoff
Ë+ 
ßveoff
;

409 
uio
->
uio_ªsid
 = (uio->uio_ªsid - 
diskªs
Ë+ 
ßvîes
;

411  
ªsu…
;

412 
	}
}

419 
	$sfs_io
(
sfs_vnode
 *
sv
, 
uio
 *uio)

421 
u_öt32_t
 
blkoff
;

422 
u_öt32_t
 
nblocks
, 
i
;

423 
ªsu…
 = 0;

424 
u_öt32_t
 
exå¨esid
 = 0;

431 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

432 
off_t
 
size
 = 
sv
->
sv_i
.
sfi_size
;

433 
off_t
 
ídpos
 = 
uio
->
uio_off£t
 + uio->
uio_ªsid
;

435 i‡(
uio
->
uio_off£t
 >
size
) {

440 i‡(
ídpos
 > 
size
) {

441 
exå¨esid
 = 
ídpos
 - 
size
;

442 
	`as£π
(
uio
->
uio_ªsid
 > 
exå¨esid
);

443 
uio
->
uio_ªsid
 -
exå¨esid
;

450 
blkoff
 = 
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
;

451 i‡(
blkoff
 != 0) {

453 
u_öt32_t
 
skù
 = 
blkoff
;

456 
u_öt32_t
 
Àn
 = 
SFS_BLOCKSIZE
 - 
blkoff
;

459 i‡(
Àn
 > 
uio
->
uio_ªsid
) {

460 
Àn
 = 
uio
->
uio_ªsid
;

464 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 
skù
, 
Àn
);

465 i‡(
ªsu…
) {

466 
out
;

471 i‡(
uio
->
uio_ªsid
==0) {

472 
out
;

478 
	`as£π
(
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
 == 0);

479 
nblocks
 = 
uio
->
uio_ªsid
 / 
SFS_BLOCKSIZE
;

480 
i
=0; i<
nblocks
; i++) {

481 
ªsu…
 = 
	`sfs_blockio
(
sv
, 
uio
);

482 i‡(
ªsu…
) {

483 
out
;

490 
	`as£π
(
uio
->
uio_ªsid
 < 
SFS_BLOCKSIZE
);

492 i‡(
uio
->
uio_ªsid
 > 0) {

493 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 0, uio->
uio_ªsid
);

494 i‡(
ªsu…
) {

495 
out
;

499 
out
:

502 i‡(
uio
->
uio_rw
 =
UIO_WRITE
 &&

503 
uio
->
uio_off£t
 > (
off_t
)
sv
->
sv_i
.
sfi_size
) {

504 
sv
->
sv_i
.
sfi_size
 = 
uio
->
uio_off£t
;

505 
sv
->
sv_dúty
 = 1;

509 
uio
->
uio_ªsid
 +
exå¨esid
;

512  
ªsu…
;

513 
	}
}

525 
	$sfs_ªaddú
(
sfs_vnode
 *
sv
, 
sfs_dú
 *
sd
, 
¶Ÿ
)

527 
uio
 
ku
;

528 
off_t
 
a˘uÆpos
;

529 
ªsu…
;

532 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dú
);

535 
	`mk_kuio
(&
ku
, 
sd
, (
sfs_dú
), 
a˘uÆpos
, 
UIO_READ
);

538 
ªsu…
 = 
	`sfs_io
(
sv
, &
ku
);

539 i‡(
ªsu…
) {

540  
ªsu…
;

544 i‡(
ku
.
uio_ªsid
 > 0) {

545 
	`∑nic
("sfs:Ñóddú: Sh‹àíåy (öodê%u)\n", 
sv
->
sv_öo
);

550 
	}
}

558 
	$sfs_wrôedú
(
sfs_vnode
 *
sv
, 
sfs_dú
 *
sd
, 
¶Ÿ
)

560 
uio
 
ku
;

561 
off_t
 
a˘uÆpos
;

562 
ªsu…
;

565 
	`as£π
(
¶Ÿ
>=0);

566 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dú
);

569 
	`mk_kuio
(&
ku
, 
sd
, (
sfs_dú
), 
a˘uÆpos
, 
UIO_WRITE
);

572 
ªsu…
 = 
	`sfs_io
(
sv
, &
ku
);

573 i‡(
ªsu…
) {

574  
ªsu…
;

578 i‡(
ku
.
uio_ªsid
 > 0) {

579 
	`∑nic
("sfs: wrôedú: Sh‹àwrôê(öÿ%u)\n", 
sv
->
sv_öo
);

584 
	}
}

593 
	$sfs_dú_√¡rõs
(
sfs_vnode
 *
sv
)

595 
off_t
 
size
;

597 
	`as£π
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_DIR
);

599 
size
 = 
sv
->
sv_i
.
sfi_size
;

600 i‡(
size
 % (
sfs_dú
) != 0) {

601 
	`∑nic
("sfs: directory %u: Invalid size %u\n",

602 
sv
->
sv_öo
, 
size
);

605  
size
 / (
sfs_dú
);

606 
	}
}

616 
	$sfs_dú_föd«me
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

617 
u_öt32_t
 *
öo
, *
¶Ÿ
, *
em±y¶Ÿ
)

619 
sfs_dú
 
tsd
;

620 
found
 = 0;

621 
√¡rõs
 = 
	`sfs_dú_√¡rõs
(
sv
);

622 
i
, 
ªsu…
;

625 
i
=0; i<
√¡rõs
; i++) {

628 
ªsu…
 = 
	`sfs_ªaddú
(
sv
, &
tsd
, 
i
);

629 i‡(
ªsu…
) {

630  
ªsu…
;

632 i‡(
tsd
.
sfd_öo
 =
SFS_NOINO
) {

634 i‡(
em±y¶Ÿ
 !
NULL
) {

635 *
em±y¶Ÿ
 = 
i
;

640 
tsd
.
sfd_«me
[(tsd.sfd_name)-1] = 0;

641 i‡(!
	`°rcmp
(
tsd
.
sfd_«me
, 
«me
)) {

644 
	`as£π
(
found
==0);

646 
found
 = 1;

647 i‡(
¶Ÿ
 !
NULL
) {

648 *
¶Ÿ
 = 
i
;

650 i‡(
öo
 !
NULL
) {

651 *
öo
 = 
tsd
.
sfd_öo
;

657  
found
 ? 0 : 
ENOENT
;

658 
	}
}

666 
	$sfs_dú_lök
(
sfs_vnode
 *
sv
, c⁄° *
«me
, 
u_öt32_t
 
öo
, *
¶Ÿ
)

668 
em±y¶Ÿ
 = -1;

669 
ªsu…
;

670 
sfs_dú
 
sd
;

673 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, 
NULL
, NULL, &
em±y¶Ÿ
);

674 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

675  
ªsu…
;

677 i‡(
ªsu…
==0) {

678  
EEXIST
;

681 i‡(
	`°æí
(
«me
)+1 > (
sd
.
sfd_«me
)) {

682  
ENAMETOOLONG
;

686 i‡(
em±y¶Ÿ
 < 0) {

687 
em±y¶Ÿ
 = 
	`sfs_dú_√¡rõs
(
sv
);

691 
	`bzîo
(&
sd
, (sd));

692 
sd
.
sfd_öo
 = 
öo
;

693 
	`°r˝y
(
sd
.
sfd_«me
, 
«me
);

696 i‡(
¶Ÿ
) {

697 *
¶Ÿ
 = 
em±y¶Ÿ
;

701  
	`sfs_wrôedú
(
sv
, &
sd
, 
em±y¶Ÿ
);

703 
	}
}

710 
	$sfs_dú_u∆ök
(
sfs_vnode
 *
sv
, 
¶Ÿ
)

712 
sfs_dú
 
sd
;

715 
	`bzîo
(&
sd
, (sd));

716 
sd
.
sfd_öo
 = 
SFS_NOINO
;

719  
	`sfs_wrôedú
(
sv
, &
sd
, 
¶Ÿ
);

720 
	}
}

728 
	$sfs_look⁄˚
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

729 
sfs_vnode
 **
ªt
,

730 *
¶Ÿ
)

732 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

733 
u_öt32_t
 
öo
;

734 
ªsu…
;

736 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
¶Ÿ
, 
NULL
);

737 i‡(
ªsu…
) {

738  
ªsu…
;

741 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, 
ªt
);

742 i‡(
ªsu…
) {

743  
ªsu…
;

746 i‡((*
ªt
)->
sv_i
.
sfi_lökcou¡
 == 0) {

747 
	`∑nic
("sfs: Link count of file %u found in dir %u is 0\n",

748 (*
ªt
)->
sv_öo
, 
sv
->sv_ino);

752 
	}
}

763 
	$sfs_makeobj
(
sfs_fs
 *
sfs
, 
ty≥
, 
sfs_vnode
 **
ªt
)

765 
u_öt32_t
 
öo
;

766 
ªsu…
;

773 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
öo
);

774 i‡(
ªsu…
) {

775  
ªsu…
;

782  
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
ty≥
, 
ªt
);

783 
	}
}

794 
	$sfs_›í
(
vnode
 *
v
, 
›íÊags
)

804 i‡(
›íÊags
 & 
O_APPEND
) {

805  
EUNIMP
;

808 ()
v
;

811 
	}
}

819 
	$sfs_›ídú
(
vnode
 *
v
, 
›íÊags
)

821 
›íÊags
 & 
O_ACCMODE
) {

822 
O_RDONLY
:

824 
O_WRONLY
:

825 
O_RDWR
:

827  
EISDIR
;

829 i‡(
›íÊags
 & 
O_APPEND
) {

830  
EISDIR
;

833 ()
v
;

835 
	}
}

845 
	$sfs_˛o£
(
vnode
 *
v
)

848  
	`VOP_FSYNC
(
v
);

849 
	}
}

858 
	$sfs_ª˛aim
(
vnode
 *
v
)

860 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

861 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

862 
ix
, 
i
, 
num
, 
ªsu…
;

869 
	`lock_acquúe
(
v
->
vn_cou¡lock
);

870 i‡(
v
->
vn_ªfcou¡
 != 1) {

873 
	`as£π
(
v
->
vn_ªfcou¡
>1);

874 
v
->
vn_ªfcou¡
--;

876 
	`lock_ªÀa£
(
v
->
vn_cou¡lock
);

877  
EBUSY
;

879 
	`lock_ªÀa£
(
v
->
vn_cou¡lock
);

883 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

884 
ªsu…
 = 
	`VOP_TRUNCATE
(&
sv
->
sv_v
, 0);

885 i‡(
ªsu…
) {

886  
ªsu…
;

891 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

892 i‡(
ªsu…
) {

893  
ªsu…
;

897 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

898 
	`sfs_b‰ì
(
sfs
, 
sv
->
sv_öo
);

902 
ix
 = -1;

903 
num
 = 
	`¨øy_gënum
(
sfs
->
sfs_vnodes
);

904 
i
=0; i<
num
; i++) {

905 
sfs_vnode
 *
sv2
 = 
	`¨øy_gëguy
(
sfs
->
sfs_vnodes
, 
i
);

906 i‡(
sv2
==
sv
) {

907 
ix
 = 
i
;

911 i‡(
ix
<0) {

912 
	`∑nic
("sfs:Ñeclaim vnode %uÇot in vnodeÖool\n",

913 
sv
->
sv_öo
);

915 
	`¨øy_ªmove
(
sfs
->
sfs_vnodes
, 
ix
);

917 
	`VOP_KILL
(&
sv
->
sv_v
);

920 
	`k‰ì
(
sv
);

924 
	}
}

931 
	$sfs_ªad
(
vnode
 *
v
, 
uio
 *uio)

933 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

934 
	`as£π
(
uio
->
uio_rw
==
UIO_READ
);

935  
	`sfs_io
(
sv
, 
uio
);

936 
	}
}

943 
	$sfs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

945 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

946 
	`as£π
(
uio
->
uio_rw
==
UIO_WRITE
);

947  
	`sfs_io
(
sv
, 
uio
);

948 
	}
}

955 
	$sfs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

961 ()
v
;

962 ()
›
;

963 ()
d©a
;

965  
EINVAL
;

966 
	}
}

973 
	$sfs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

975 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

976 
ªsu…
;

979 
	`bzîo
(
°©buf
, (
°©
));

981 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

982 i‡(
ªsu…
) {

983  
ªsu…
;

986 
°©buf
->
°_size
 = 
sv
->
sv_i
.
sfi_size
;

989 
°©buf
->
°_∆ök
 = 0;

990 
°©buf
->
°_blocks
 = 0;

993 
	}
}

1000 
	$sfs_gëty≥
(
vnode
 *
v
, 
u_öt32_t
 *
ªt
)

1002 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1003 
sv
->
sv_i
.
sfi_ty≥
) {

1004 
SFS_TYPE_FILE
:

1005 *
ªt
 = 
S_IFREG
;

1007 
SFS_TYPE_DIR
:

1008 *
ªt
 = 
S_IFDIR
;

1011 
	`∑nic
("sfs: gettype: Invalid inodeÅype (inode %u,Åype %u)\n",

1012 
sv
->
sv_öo
, sv->
sv_i
.
sfi_ty≥
);

1013  
EINVAL
;

1014 
	}
}

1025 
	$sfs_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

1027 i‡(
pos
<0) {

1028  
EINVAL
;

1032 ()
v
;

1035 
	}
}

1043 
	$sfs_fsync
(
vnode
 *
v
)

1045 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1046  
	`sfs_sync_öode
(
sv
);

1047 
	}
}

1054 
	$sfs_mm≠
(
vnode
 *
v
 )

1056 ()
v
;

1057  
EUNIMP
;

1058 
	}
}

1065 
	$sfs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

1074 
u_öt32_t
 
idbuf
[
SFS_DBPERIDB
];

1076 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1077 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

1080 
u_öt32_t
 
blockÀn
 = 
	`DIVROUNDUP
(
Àn
, 
SFS_BLOCKSIZE
);

1082 
u_öt32_t
 
i
, 
j
, 
block
;

1083 
u_öt32_t
 
idblock
, 
ba£block
, 
highblock
;

1084 
ªsu…
;

1085 
ha¢⁄zîo
, 
iddúty
;

1087 
	`as£π
((
idbuf
)==
SFS_BLOCKSIZE
);

1093 
i
=0; i<
SFS_NDIRECT
; i++) {

1094 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
i
];

1095 i‡(
i
 >
blockÀn
 && 
block
 != 0) {

1096 
	`sfs_b‰ì
(
sfs
, 
block
);

1097 
sv
->
sv_i
.
sfi_dúe˘
[
i
] = 0;

1098 
sv
->
sv_dúty
 = 1;

1103 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

1106 
ba£block
 = 
SFS_NDIRECT
;

1109 
highblock
 = 
ba£block
 + 
SFS_DBPERIDB
 - 1;

1111 i‡(
blockÀn
 < 
highblock
 && 
idblock
 != 0) {

1115 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
idbuf
, 
idblock
);

1116 i‡(
ªsu…
) {

1117  
ªsu…
;

1120 
ha¢⁄zîo
 = 0;

1121 
iddúty
 = 0;

1122 
j
=0; j<
SFS_DBPERIDB
; j++) {

1124 i‡(
blockÀn
 < 
ba£block
+
j
 && 
idbuf
[j] != 0) {

1125 
	`sfs_b‰ì
(
sfs
, 
idbuf
[
j
]);

1126 
idbuf
[
j
] = 0;

1127 
iddúty
 = 1;

1130 i‡(
idbuf
[
j
]!=0) {

1131 
ha¢⁄zîo
=1;

1135 i‡(!
ha¢⁄zîo
) {

1137 
	`sfs_b‰ì
(
sfs
, 
idblock
);

1138 
sv
->
sv_i
.
sfi_ödúe˘
 = 0;

1139 
sv
->
sv_dúty
 = 1;

1141 i‡(
iddúty
) {

1143 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
idbuf
, 
idblock
);

1144 i‡(
ªsu…
) {

1145  
ªsu…
;

1151 
sv
->
sv_i
.
sfi_size
 = 
Àn
;

1154 
sv
->
sv_dúty
 = 1;

1157 
	}
}

1167 
	$sfs_«mefûe
(
vnode
 *
vv
, 
uio
 *uio)

1169 
sfs_vnode
 *
sv
 = 
vv
->
vn_d©a
;

1170 
	`as£π
(
sv
->
sv_öo
 =
SFS_ROOT_LOCATION
);

1174 ()
uio
;

1177 
	}
}

1185 
	$sfs_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
ex˛
, vnodê**
ªt
)

1187 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

1188 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1189 
sfs_vnode
 *
√wguy
;

1190 
u_öt32_t
 
öo
;

1191 
ªsu…
;

1194 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
NULL
, NULL);

1195 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

1196  
ªsu…
;

1200 i‡(
ªsu…
==0 && 
ex˛
) {

1201  
EEXIST
;

1204 i‡(
ªsu…
==0) {

1206 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, &
√wguy
);

1207 i‡(
ªsu…
) {

1208  
ªsu…
;

1210 *
ªt
 = &
√wguy
->
sv_v
;

1215 
ªsu…
 = 
	`sfs_makeobj
(
sfs
, 
SFS_TYPE_FILE
, &
√wguy
);

1216 i‡(
ªsu…
) {

1217  
ªsu…
;

1221 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
√wguy
->
sv_öo
, 
NULL
);

1222 i‡(
ªsu…
) {

1223 
	`VOP_DECREF
(&
√wguy
->
sv_v
);

1224  
ªsu…
;

1228 
√wguy
->
sv_i
.
sfi_lökcou¡
++;

1231 
√wguy
->
sv_dúty
 = 1;

1233 *
ªt
 = &
√wguy
->
sv_v
;

1236 
	}
}

1245 
	$sfs_lök
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

1247 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

1248 
sfs_vnode
 *
f
 = 
fûe
->
vn_d©a
;

1249 
ªsu…
;

1251 
	`as£π
(
fûe
->
vn_fs
 =
dú
->vn_fs);

1254 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
f
->
sv_öo
, 
NULL
);

1255 i‡(
ªsu…
) {

1256  
ªsu…
;

1260 
f
->
sv_i
.
sfi_lökcou¡
++;

1261 
f
->
sv_dúty
 = 1;

1264 
	}
}

1271 
	$sfs_ªmove
(
vnode
 *
dú
, c⁄° *
«me
)

1273 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

1274 
sfs_vnode
 *
vi˘im
;

1275 
¶Ÿ
;

1276 
ªsu…
;

1279 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
«me
, &
vi˘im
, &
¶Ÿ
);

1280 i‡(
ªsu…
) {

1281  
ªsu…
;

1285 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ
);

1286 i‡(
ªsu…
==0) {

1288 
	`as£π
(
vi˘im
->
sv_i
.
sfi_lökcou¡
 > 0);

1289 
vi˘im
->
sv_i
.
sfi_lökcou¡
--;

1290 
vi˘im
->
sv_dúty
 = 1;

1294 
	`VOP_DECREF
(&
vi˘im
->
sv_v
);

1296  
ªsu…
;

1297 
	}
}

1307 
	$sfs_ª«me
(
vnode
 *
d1
, c⁄° *
n1
,

1308 
vnode
 *
d2
, c⁄° *
n2
)

1310 
sfs_vnode
 *
sv
 = 
d1
->
vn_d©a
;

1311 
sfs_vnode
 *
g1
;

1312 
¶Ÿ1
, 
¶Ÿ2
;

1313 
ªsu…
, 
ªsu…2
;

1315 
	`as£π
(
d1
==
d2
);

1316 
	`as£π
(
sv
->
sv_öo
 =
SFS_ROOT_LOCATION
);

1319 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
n1
, &
g1
, &
¶Ÿ1
);

1320 i‡(
ªsu…
) {

1321  
ªsu…
;

1325 
	`as£π
(
g1
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_FILE
);

1335 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
n2
, 
g1
->
sv_öo
, &
¶Ÿ2
);

1336 i‡(
ªsu…
) {

1337 
puke
;

1341 
g1
->
sv_i
.
sfi_lökcou¡
++;

1342 
g1
->
sv_dúty
 = 1;

1345 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ1
);

1346 i‡(
ªsu…
) {

1347 
puke_h¨dî
;

1354 
	`as£π
(
g1
->
sv_i
.
sfi_lökcou¡
>0);

1355 
g1
->
sv_i
.
sfi_lökcou¡
--;

1356 
g1
->
sv_dúty
 = 1;

1359 
	`VOP_DECREF
(&
g1
->
sv_v
);

1363 
puke_h¨dî
:

1367 
ªsu…2
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ2
);

1368 i‡(
ªsu…2
) {

1369 
	`k¥ötf
("sfs:Ñíame: %s\n", 
	`°ªº‹
(
ªsu…
));

1370 
	`k¥ötf
("sfs:Ñename: while cleaning up: %s\n",

1371 
	`°ªº‹
(
ªsu…2
));

1372 
	`∑nic
("sfs:Ñename: CannotÑecover\n");

1374 
g1
->
sv_i
.
sfi_lökcou¡
--;

1375 
puke
:

1377 
	`VOP_DECREF
(&
g1
->
sv_v
);

1378  
ªsu…
;

1379 
	}
}

1390 
	$sfs_look∑ª¡
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
,

1391 *
buf
, 
size_t
 
buÊí
)

1393 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1395 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

1396  
ENOTDIR
;

1399 i‡(
	`°æí
(
∑th
)+1 > 
buÊí
) {

1400  
ENAMETOOLONG
;

1402 
	`°r˝y
(
buf
, 
∑th
);

1404 
	`VOP_INCREF
(&
sv
->
sv_v
);

1405 *
ªt
 = &
sv
->
sv_v
;

1408 
	}
}

1418 
	$sfs_lookup
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
)

1420 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1421 
sfs_vnode
 *
föÆ
;

1422 
ªsu…
;

1424 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

1425  
ENOTDIR
;

1428 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
∑th
, &
föÆ
, 
NULL
);

1429 i‡(
ªsu…
) {

1430  
ªsu…
;

1433 *
ªt
 = &
föÆ
->
sv_v
;

1436 
	}
}

1442 
	$sfs_nŸdú
()

1444  
ENOTDIR
;

1445 
	}
}

1449 
	$sfs_isdú
()

1451  
EISDIR
;

1452 
	}
}

1456 
	$sfs_unimp
()

1458  
EUNIMP
;

1459 
	}
}

1467 
	#ISDIR
 ((*)
sfs_isdú
)

	)

1468 
	#NOTDIR
 ((*)
sfs_nŸdú
)

	)

1469 
	#UNIMP
 ((*)
sfs_unimp
)

	)

1474 c⁄° 
vnode_›s
 
	gsfs_fûe›s
 = {

1475 
VOP_MAGIC
,

1477 
sfs_›í
,

1478 
sfs_˛o£
,

1479 
sfs_ª˛aim
,

1481 
sfs_ªad
,

1482 
NOTDIR
,

1483 
NOTDIR
,

1484 
sfs_wrôe
,

1485 
sfs_io˘l
,

1486 
sfs_°©
,

1487 
sfs_gëty≥
,

1488 
sfs_åy£ek
,

1489 
sfs_fsync
,

1490 
sfs_mm≠
,

1491 
sfs_åunˇã
,

1492 
NOTDIR
,

1494 
NOTDIR
,

1495 
NOTDIR
,

1496 
NOTDIR
,

1497 
NOTDIR
,

1498 
NOTDIR
,

1499 
NOTDIR
,

1500 
NOTDIR
,

1502 
NOTDIR
,

1503 
NOTDIR
,

1509 c⁄° 
vnode_›s
 
	gsfs_dú›s
 = {

1510 
VOP_MAGIC
,

1512 
sfs_›ídú
,

1513 
sfs_˛o£
,

1514 
sfs_ª˛aim
,

1516 
ISDIR
,

1517 
ISDIR
,

1518 
UNIMP
,

1519 
ISDIR
,

1520 
sfs_io˘l
,

1521 
sfs_°©
,

1522 
sfs_gëty≥
,

1523 
UNIMP
,

1524 
sfs_fsync
,

1525 
ISDIR
,

1526 
ISDIR
,

1527 
sfs_«mefûe
,

1529 
sfs_¸ót
,

1530 
UNIMP
,

1531 
UNIMP
,

1532 
sfs_lök
,

1533 
sfs_ªmove
,

1534 
UNIMP
,

1535 
sfs_ª«me
,

1537 
sfs_lookup
,

1538 
sfs_look∑ª¡
,

1547 
	$sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
u_öt32_t
 
öo
, 
f‹˚ty≥
,

1548 
sfs_vnode
 **
ªt
)

1550 
sfs_vnode
 *
sv
;

1551 c⁄° 
vnode_›s
 *
›s
 = 
NULL
;

1552 
i
, 
num
;

1553 
ªsu…
;

1556 
num
 = 
	`¨øy_gënum
(
sfs
->
sfs_vnodes
);

1559 
i
=0; i<
num
; i++) {

1560 
sv
 = 
	`¨øy_gëguy
(
sfs
->
sfs_vnodes
, 
i
);

1563 i‡(!
	`sfs_bu£d
(
sfs
, 
sv
->
sv_öo
)) {

1564 
	`∑nic
("sfs: Found inode %u in unallocated block\n",

1565 
sv
->
sv_öo
);

1568 i‡(
sv
->
sv_öo
==
öo
) {

1572 
	`as£π
(
f‹˚ty≥
==
SFS_TYPE_INVAL
);

1574 
	`VOP_INCREF
(&
sv
->
sv_v
);

1575 *
ªt
 = 
sv
;

1582 
sv
 = 
	`kmÆloc
((
sfs_vnode
));

1583 i‡(
sv
==
NULL
) {

1584  
ENOMEM
;

1588 i‡(!
	`sfs_bu£d
(
sfs
, 
öo
)) {

1589 
	`∑nic
("sfs: TriedÅoÜoad inode %u from unallocated block\n",

1590 
öo
);

1594 
ªsu…
 = 
	`sfs_rblock
(
sfs
, &
sv
->
sv_i
, 
öo
);

1595 i‡(
ªsu…
) {

1596 
	`k‰ì
(
sv
);

1597  
ªsu…
;

1601 
sv
->
sv_dúty
 = 0;

1608 i‡(
f‹˚ty≥
 !
SFS_TYPE_INVAL
) {

1609 
	`as£π
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_INVAL
);

1610 
sv
->
sv_i
.
sfi_ty≥
 = 
f‹˚ty≥
;

1611 
sv
->
sv_dúty
 = 1;

1617 
sv
->
sv_i
.
sfi_ty≥
) {

1618 
SFS_TYPE_FILE
:

1619 
›s
 = &
sfs_fûe›s
;

1621 
SFS_TYPE_DIR
:

1622 
›s
 = &
sfs_dú›s
;

1625 
	`∑nic
("sfs:Üoadvnode: Invalid inodeÅype "

1627 
öo
, 
sv
->
sv_i
.
sfi_ty≥
);

1631 
ªsu…
 = 
	`VOP_INIT
(&
sv
->
sv_v
, 
›s
, &
sfs
->
sfs_absfs
, sv);

1632 i‡(
ªsu…
) {

1633 
	`k‰ì
(
sv
);

1634  
ªsu…
;

1638 
sv
->
sv_öo
 = 
öo
;

1641 
ªsu…
 = 
	`¨øy_add
(
sfs
->
sfs_vnodes
, 
sv
);

1642 i‡(
ªsu…
) {

1643 
	`VOP_KILL
(&
sv
->
sv_v
);

1644 
	`k‰ì
(
sv
);

1645  
ªsu…
;

1649 *
ªt
 = 
sv
;

1651 
	}
}

1657 
vnode
 *

1658 
	$sfs_gëroŸ
(
fs
 *fs)

1660 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

1661 
sfs_vnode
 *
sv
;

1662 
ªsu…
;

1664 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
SFS_ROOT_LOCATION
, 
SFS_TYPE_INVAL
, &
sv
);

1665 i‡(
ªsu…
) {

1666 
	`∑nic
("sfs: getroot: CannotÜoadÑoot vnode\n");

1669  &
sv
->
sv_v
;

1670 
	}
}

	@fs/vfs/device.c

7 
	~<ty≥s.h
>

8 
	~<lib.h
>

9 
	~<synch.h
>

10 
	~<kîn/î∫o.h
>

11 
	~<kîn/uni°d.h
>

12 
	~<kîn/°©.h
>

13 
	~<vnode.h
>

14 
	~<uio.h
>

15 
	~<dev.h
>

24 
	$dev_›í
(
vnode
 *
v
, 
Êags
)

26 
devi˚
 *
d
 = 
v
->
vn_d©a
;

28 i‡(
Êags
 & (
O_CREAT
 | 
O_TRUNC
 | 
O_EXCL
 | 
O_APPEND
)) {

29  
EINVAL
;

32  
d
->
	`d_›í
(d, 
Êags
);

33 
	}
}

41 
	$dev_˛o£
(
vnode
 *
v
)

43 
devi˚
 *
d
 = 
v
->
vn_d©a
;

44  
d
->
	`d_˛o£
(d);

45 
	}
}

53 
	$dev_ª˛aim
(
vnode
 *
v
)

55 ()
v
;

58 
	}
}

65 
	$dev_ªad
(
vnode
 *
v
, 
uio
 *uio)

67 
devi˚
 *
d
 = 
v
->
vn_d©a
;

68 
	`as£π
(
uio
->
uio_rw
 =
UIO_READ
);

69  
d
->
	`d_io
(d, 
uio
);

70 
	}
}

78 
	$nuŒ_io
(
vnode
 *
v
, 
uio
 *uio)

80 ()
v
;

81 ()
uio
;

82  
EINVAL
;

83 
	}
}

90 
	$dev_wrôe
(
vnode
 *
v
, 
uio
 *uio)

92 
devi˚
 *
d
 = 
v
->
vn_d©a
;

93 
	`as£π
(
uio
->
uio_rw
 =
UIO_WRITE
);

94  
d
->
	`d_io
(d, 
uio
);

95 
	}
}

102 
	$dev_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

104 
devi˚
 *
d
 = 
v
->
vn_d©a
;

105  
d
->
	`d_io˘l
(d, 
›
, 
d©a
);

106 
	}
}

115 
	$dev_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

117 
devi˚
 *
d
 = 
v
->
vn_d©a
;

118 
ªsu…
;

120 
	`bzîo
(
°©buf
, (
°©
));

122 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

123 i‡(
ªsu…
) {

124  
ªsu…
;

127 
°©buf
->
°_∆ök
 = 1;

128 
°©buf
->
°_blocks
 = 
d
->
d_blocks
;

130 i‡(
d
->
d_blocks
 > 0) {

131 
°©buf
->
°_size
 = 
d
->
d_blocks
 * d->
d_blocksize
;

134 
°©buf
->
°_size
 = 0;

138 
	}
}

147 
	$dev_gëty≥
(
vnode
 *
v
, 
u_öt32_t
 *
ªt
)

149 
devi˚
 *
d
 = 
v
->
vn_d©a
;

150 i‡(
d
->
d_blocks
 > 0) {

151 *
ªt
 = 
S_IFBLK
;

154 *
ªt
 = 
S_IFCHR
;

157 
	}
}

166 
	$dev_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

168 
devi˚
 *
d
 = 
v
->
vn_d©a
;

169 i‡(
d
->
d_blocks
 > 0) {

170 i‡((
pos
 % 
d
->
d_blocksize
)!=0) {

172  
EINVAL
;

174 i‡(
pos
 < 0) {

181  
EINVAL
;

183 i‡(
pos
 / 
d
->
d_blocksize
 >d->
d_blocks
) {

185  
EINVAL
;

189  
ESPIPE
;

192 
	}
}

199 
	$nuŒ_fsync
(
vnode
 *
v
)

201 ()
v
;

203 
	}
}

211 
	$dev_mm≠
(
vnode
 *
v
 )

213 ()
v
;

214  
EUNIMP
;

215 
	}
}

222 
	$dev_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

224 
devi˚
 *
d
 = 
v
->
vn_d©a
;

229 i‡(
d
->
d_blocks
 > 0 && (
off_t
)(d->d_blocks*d->
d_blocksize
Ë=
Àn
) {

233  
EINVAL
;

234 
	}
}

244 
	$dev_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

252 ()
v
;

253 ()
uio
;

256 
	}
}

264 
	$nuŒ_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
ex˛
, vnodê**
ªsu…
)

266 ()
v
;

267 ()
«me
;

268 ()
ex˛
;

269 ()
ªsu…
;

270  
ENOTDIR
;

271 
	}
}

275 
	$nuŒ_symlök
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

277 ()
v
;

278 ()
c⁄ã¡s
;

279 ()
«me
;

280  
ENOTDIR
;

281 
	}
}

285 
	$nuŒ_«me›
(
vnode
 *
v
, c⁄° *
«me
)

287 ()
v
;

288 ()
«me
;

289  
ENOTDIR
;

290 
	}
}

294 
	$nuŒ_lök
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
fûe
)

296 ()
v
;

297 ()
«me
;

298 ()
fûe
;

299  
ENOTDIR
;

300 
	}
}

304 
	$nuŒ_ª«me
(
vnode
 *
v
, c⁄° *
n1
, vnodê*
v2
, c⁄° *
n2
)

306 ()
v
;

307 ()
n1
;

308 ()
v2
;

309 ()
n2
;

310  
ENOTDIR
;

311 
	}
}

328 
	$dev_lookup
(
vnode
 *
dú
,

329 *
∑th«me
, 
vnode
 **
ªsu…
)

336 i‡(
	`°æí
(
∑th«me
)>0) {

337  
ENOENT
;

339 
	`VOP_INCREF
(
dú
);

340 *
ªsu…
 = 
dú
;

342 
	}
}

346 
	$dev_look∑ª¡
(
vnode
 *
dú
,

347 *
∑th«me
, 
vnode
 **
ªsu…
,

348 *
«mebuf
, 
size_t
 
buÊí
)

353 ()
dú
;

354 ()
∑th«me
;

355 ()
ªsu…
;

356 ()
«mebuf
;

357 ()
buÊí
;

359  
ENOTDIR
;

360 
	}
}

365 c⁄° 
vnode_›s
 
	gdev_vnode_›s
 = {

366 
VOP_MAGIC
,

368 
dev_›í
,

369 
dev_˛o£
,

370 
dev_ª˛aim
,

371 
dev_ªad
,

372 
nuŒ_io
,

373 
nuŒ_io
,

374 
dev_wrôe
,

375 
dev_io˘l
,

376 
dev_°©
,

377 
dev_gëty≥
,

378 
dev_åy£ek
,

379 
nuŒ_fsync
,

380 
dev_mm≠
,

381 
dev_åunˇã
,

382 
dev_«mefûe
,

383 
nuŒ_¸ót
,

384 
nuŒ_symlök
,

385 
nuŒ_«me›
,

386 
nuŒ_lök
,

387 
nuŒ_«me›
,

388 
nuŒ_«me›
,

389 
nuŒ_ª«me
,

390 
dev_lookup
,

391 
dev_look∑ª¡
,

397 
vnode
 *

398 
	$dev_¸óã_vnode
(
devi˚
 *
dev
)

400 
ªsu…
;

401 
vnode
 *
v
;

403 
v
 = 
	`kmÆloc
((
vnode
));

404 i‡(
v
==
NULL
) {

405  
NULL
;

408 
ªsu…
 = 
	`VOP_INIT
(
v
, &
dev_vnode_›s
, 
NULL
, 
dev
);

409 i‡(
ªsu…
 != 0) {

410 
	`∑nic
("While creating vnode for device: VOP_INIT: %s\n",

411 
	`°ªº‹
(
ªsu…
));

414  
v
;

415 
	}
}

	@fs/vfs/devnull.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<lib.h
>

8 
	~<vfs.h
>

9 
	~<dev.h
>

10 
	~<uio.h
>

15 
	$nuŒ›í
(
devi˚
 *
dev
, 
›íÊags
)

17 ()
dev
;

18 ()
›íÊags
;

21 
	}
}

26 
	$nuŒ˛o£
(
devi˚
 *
dev
)

28 ()
dev
;

30 
	}
}

35 
	$nuŒio
(
devi˚
 *
dev
, 
uio
 *uio)

42 ()
dev
;

44 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

45 
uio
->
uio_ªsid
 = 0;

49 
	}
}

54 
	$nuŒio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

60 ()
dev
;

61 ()
›
;

62 ()
d©a
;

64  
EINVAL
;

65 
	}
}

71 
	$devnuŒ_¸óã
()

73 
ªsu…
;

74 
devi˚
 *
dev
;

76 
dev
 = 
	`kmÆloc
((*dev));

77 i‡(
dev
==
NULL
) {

78 
	`∑nic
("CouldÇotáddÇull device: out of memory\n");

82 
dev
->
d_›í
 = 
nuŒ›í
;

83 
dev
->
d_˛o£
 = 
nuŒ˛o£
;

84 
dev
->
d_io
 = 
nuŒio
;

85 
dev
->
d_io˘l
 = 
nuŒio˘l
;

87 
dev
->
d_blocks
 = 0;

88 
dev
->
d_blocksize
 = 1;

90 
dev
->
d_d©a
 = 
NULL
;

92 
ªsu…
 = 
	`vfs_adddev
("nuŒ", 
dev
, 0);

93 i‡(
ªsu…
) {

94 
	`∑nic
("CouldÇŸáddÇuŒ devi˚: %s\n", 
	`°ªº‹
(
ªsu…
));

96 
	}
}

	@fs/vfs/vfscwd.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<kîn/°©.h
>

8 
	~<lib.h
>

9 
	~<vfs.h
>

10 
	~<fs.h
>

11 
	~<vnode.h
>

12 
	~<uio.h
>

13 
	~<thªad.h
>

14 
	~<cuπhªad.h
>

23 
	$vfs_gëcurdú
(
vnode
 **
ªt
)

25 
rv
 = 0;

27 i‡(
cuπhªad
->
t_cwd
!=
NULL
) {

28 
	`VOP_INCREF
(
cuπhªad
->
t_cwd
);

29 *
ªt
 = 
cuπhªad
->
t_cwd
;

32 
rv
 = 
ENOENT
;

35  
rv
;

36 
	}
}

43 
	$vfs_£tcurdú
(
vnode
 *
dú
)

45 
vnode
 *
ﬁd
;

46 
u_öt32_t
 
vty≥
;

47 
ªsu…
;

49 
ªsu…
 = 
	`VOP_GETTYPE
(
dú
, &
vty≥
);

50 i‡(
ªsu…
) {

51  
ªsu…
;

53 i‡(!
	`S_ISDIR
(
vty≥
)) {

54  
ENOTDIR
;

57 
	`VOP_INCREF
(
dú
);

59 
ﬁd
 = 
cuπhªad
->
t_cwd
;

60 
cuπhªad
->
t_cwd
 = 
dú
;

62 i‡(
ﬁd
!=
NULL
) {

63 
	`VOP_DECREF
(
ﬁd
);

67 
	}
}

73 
	$vfs_˛órcurdú
()

75 
vnode
 *
ﬁd
;

77 
ﬁd
 = 
cuπhªad
->
t_cwd
;

78 
cuπhªad
->
t_cwd
 = 
NULL
;

80 i‡(
ﬁd
!=
NULL
) {

81 
	`VOP_DECREF
(
ﬁd
);

85 
	}
}

92 
	$vfs_chdú
(*
∑th
)

94 
vnode
 *
vn
;

95 
ªsu…
;

97 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

98 i‡(
ªsu…
) {

99  
ªsu…
;

101 
ªsu…
 = 
	`vfs_£tcurdú
(
vn
);

102 
	`VOP_DECREF
(
vn
);

103  
ªsu…
;

104 
	}
}

112 
	$vfs_gëcwd
(
uio
 *uio)

114 
vnode
 *
cwd
;

115 
ªsu…
;

116 c⁄° *
«me
;

117 
cﬁ⁄
=':';

119 
	`as£π
(
uio
->
uio_rw
==
UIO_READ
);

121 
ªsu…
 = 
	`vfs_gëcurdú
(&
cwd
);

122 i‡(
ªsu…
) {

123  
ªsu…
;

127 
	`as£π
(
cwd
->
vn_fs
 !
NULL
);

129 
«me
 = 
	`FSOP_GETVOLNAME
(
cwd
->
vn_fs
);

130 i‡(
«me
==
NULL
) {

131 
«me
 = 
	`vfs_gëdev«me
(
cwd
->
vn_fs
);

133 
	`as£π
(
«me
 !
NULL
);

135 
ªsu…
 = 
	`uiomove
((*)
«me
, 
	`°æí
“ame), 
uio
);

136 i‡(
ªsu…
) {

137 
out
;

139 
ªsu…
 = 
	`uiomove
(&
cﬁ⁄
, 1, 
uio
);

140 i‡(
ªsu…
) {

141 
out
;

144 
ªsu…
 = 
	`VOP_NAMEFILE
(
cwd
, 
uio
);

146 
out
:

148 
	`VOP_DECREF
(
cwd
);

149  
ªsu…
;

150 
	}
}

	@fs/vfs/vfslist.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<synch.h
>

9 
	~<¨øy.h
>

10 
	~<kîn/î∫o.h
>

11 
	~<vfs.h
>

12 
	~<vnode.h
>

13 
	~<fs.h
>

14 
	~<dev.h
>

46 
	sknowndev
 {

47 *
	mkd_«me
;

48 *
	mkd_øw«me
;

49 
devi˚
 *
	mkd_devi˚
;

50 
vnode
 *
	mkd_vnode
;

51 
fs
 *
	mkd_fs
;

54 
¨øy
 *
	gknowndevs
;

55 
lock
 *
	gknowndevs_lock
;

61 
	$vfs_boŸ°øp
()

63 
knowndevs
 = 
	`¨øy_¸óã
();

64 i‡(
knowndevs
==
NULL
) {

65 
	`∑nic
("vfs: CouldÇot create knowndevsárray\n");

67 
knowndevs_lock
 = 
	`lock_¸óã
("knowndevs");

68 i‡(
knowndevs_lock
==
NULL
) {

69 
	`∑nic
("vfs: CouldÇot create knowndevsÜock\n");

72 
	`vfs_öôboŸfs
();

73 
	`devnuŒ_¸óã
();

74 
	}
}

80 
	$vfs_sync
()

82 
knowndev
 *
dev
;

83 
i
, 
num
;

85 
	`lock_acquúe
(
knowndevs_lock
);

87 
num
 = 
	`¨øy_gënum
(
knowndevs
);

88 
i
=0; i<
num
; i++) {

89 
dev
 = 
	`¨øy_gëguy
(
knowndevs
, 
i
);

90 i‡(
dev
->
kd_fs
 !
NULL
) {

91  
	`FSOP_SYNC
(
dev
->
kd_fs
);

95 
	`lock_ªÀa£
(
knowndevs_lock
);

98 
	}
}

105 
	$vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
)

107 
knowndev
 *
kd
;

108 
i
, 
num
;

109 
îr
=0;

111 
	`lock_acquúe
(
knowndevs_lock
);

113 
num
 = 
	`¨øy_gënum
(
knowndevs
);

114 
i
=0; i<
num
; i++) {

115 
kd
 = 
	`¨øy_gëguy
(
knowndevs
, 
i
);

126 i‡(
kd
->
kd_fs
!=
NULL
) {

127 c⁄° *
vﬁ«me
;

128 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

130 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
) ||

131 (
vﬁ«me
!=
NULL
 && !
	`°rcmp
(vﬁ«me, 
dev«me
))) {

132 *
ªsu…
 = 
	`FSOP_GETROOT
(
kd
->
kd_fs
);

133 
out
;

137 i‡(
kd
->
kd_øw«me
!=
NULL
 &&

138 !
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

139 
îr
 = 
ENXIO
;

140 
out
;

149 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

150 
	`as£π
(
kd
->
kd_fs
==
NULL
);

151 
	`as£π
(
kd
->
kd_øw«me
==
NULL
);

152 
	`as£π
(
kd
->
kd_devi˚
 !
NULL
);

153 
	`VOP_INCREF
(
kd
->
kd_vnode
);

154 *
ªsu…
 = 
kd
->
kd_vnode
;

155 
out
;

162 i‡(
kd
->
kd_øw«me
!=
NULL
 && !
	`°rcmp
(kd->kd_øw«me, 
dev«me
)) {

163 
	`as£π
(
kd
->
kd_devi˚
 !
NULL
);

164 
	`VOP_INCREF
(
kd
->
kd_vnode
);

165 *
ªsu…
 = 
kd
->
kd_vnode
;

166 
out
;

179 
îr
 = 
ENODEV
;

181 
out
:

182 
	`lock_ªÀa£
(
knowndevs_lock
);

184  
îr
;

185 
	}
}

191 
	$vfs_gëdev«me
(
fs
 *fs)

193 
knowndev
 *
kd
;

194 
i
, 
num
;

196 
	`as£π
(
fs
 !
NULL
);

198 
	`lock_acquúe
(
knowndevs_lock
);

200 
num
 = 
	`¨øy_gënum
(
knowndevs
);

201 
i
=0; i<
num
; i++) {

202 
kd
 = 
	`¨øy_gëguy
(
knowndevs
, 
i
);

204 i‡(
kd
->
kd_fs
 =
fs
) {

205 
	`lock_ªÀa£
(
knowndevs_lock
);

212  
kd
->
kd_«me
;

216 
	`lock_ªÀa£
(
knowndevs_lock
);

218  
NULL
;

219 
	}
}

226 
	$mkøw«me
(c⁄° *
«me
)

228 *
s
 = 
	`kmÆloc
(
	`°æí
(
«me
)+3+1);

229 i‡(!
s
) {

230  
NULL
;

232 
	`°r˝y
(
s
, 
«me
);

233 
	`°rˇt
(
s
, "raw");

234  
s
;

235 
	}
}

243 
ölöe


245 
	$ßme°rög
(c⁄° *
a
, c⁄° *
b
)

247 i‡(
a
==
NULL
 || 
b
==NULL) {

250  !
	`°rcmp
(
a
, 
b
);

251 
	}
}

258 
ölöe


260 
	$ßme°rög3
(c⁄° *
a
, c⁄° *
b
, c⁄° *
c
, c⁄° *
d
)

262  
	`ßme°rög
(
a
,
b
Ë|| same°rög◊,
c
Ë|| same°rög◊,
d
);

263 
	}
}

272 
	$bad«mes
(c⁄° *
n1
, c⁄° *
n2
, c⁄° *
n3
)

274 c⁄° *
vﬁ«me
;

275 
i
, 
num
;

276 
knowndev
 *
kd
;

278 
	`as£π
(
	`lock_do_i_hﬁd
(
knowndevs_lock
));

280 
num
 = 
	`¨øy_gënum
(
knowndevs
);

281 
i
=0; i<
num
; i++) {

282 
kd
 = 
	`¨øy_gëguy
(
knowndevs
, 
i
);

284 i‡(
kd
->
kd_fs
) {

285 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

286 i‡(
	`ßme°rög3
(
vﬁ«me
, 
n1
, 
n2
, 
n3
)) {

291 i‡(
	`ßme°rög3
(
kd
->
kd_øw«me
, 
n1
, 
n2
, 
n3
) ||

292 
	`ßme°rög3
(
kd
->
kd_«me
, 
n1
, 
n2
, 
n3
)) {

298 
	}
}

309 
	$vfs_dﬂdd
(c⁄° *
d«me
, 
mou¡abÀ
, 
devi˚
 *
dev
, 
fs
 *fs)

311 *
«me
=
NULL
, *
øw«me
=NULL;

312 
knowndev
 *
kd
=
NULL
;

313 
vnode
 *vnode=
NULL
;

314 c⁄° *
vﬁ«me
=
NULL
;

315 
îr
=0;

317 
«me
 = 
	`k°rdup
(
d«me
);

318 i‡(
«me
==
NULL
) {

319 
puke
;

321 i‡(
mou¡abÀ
) {

322 
øw«me
 = 
	`mkøw«me
(
«me
);

323 i‡(
øw«me
==
NULL
) {

324 
puke
;

328 
vnode
 = 
	`dev_¸óã_vnode
(
dev
);

329 i‡(
vnode
==
NULL
) {

330 
puke
;

333 
kd
 = 
	`kmÆloc
((
knowndev
));

334 i‡(
kd
==
NULL
) {

335 
puke
;

338 
kd
->
kd_«me
 = 
«me
;

339 
kd
->
kd_øw«me
 = 
øw«me
;

340 
kd
->
kd_devi˚
 = 
dev
;

341 
kd
->
kd_vnode
 = 
vnode
;

342 
kd
->
kd_fs
 = 
fs
;

344 i‡(
fs
!=
NULL
) {

345 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

348 
	`lock_acquúe
(
knowndevs_lock
);

350 i‡(!
	`bad«mes
(
«me
, 
øw«me
, 
vﬁ«me
)) {

351 
îr
 = 
	`¨øy_add
(
knowndevs
, 
kd
);

354 
îr
 = 
EEXIST
;

357 
	`lock_ªÀa£
(
knowndevs_lock
);

359  
îr
;

361 
puke
:

363 i‡(
«me
) {

364 
	`k‰ì
(
«me
);

366 i‡(
øw«me
) {

367 
	`k‰ì
(
øw«me
);

369 i‡(
vnode
) {

370 
	`k‰ì
(
vnode
);

372 i‡(
kd
) {

373 
	`k‰ì
(
kd
);

376  
ENOMEM
;

377 
	}
}

384 
	$vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
)

386  
	`vfs_dﬂdd
(
dev«me
, 
mou¡abÀ
, 
dev
, 
NULL
);

387 
	}
}

395 
	$vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs)

397  
	`vfs_dﬂdd
(
dev«me
, 0, 
NULL
, 
fs
);

398 
	}
}

408 
	$födmou¡
(c⁄° *
dev«me
, 
knowndev
 **
ªsu…
)

410 
knowndev
 *
dev
;

411 
i
, 
num
, 
found
=0;

413 
	`as£π
(
	`lock_do_i_hﬁd
(
knowndevs_lock
));

415 
num
 = 
	`¨øy_gënum
(
knowndevs
);

416 
i
=0; !
found
 && i<
num
; i++) {

417 
dev
 = 
	`¨øy_gëguy
(
knowndevs
, 
i
);

418 i‡(
dev
->
kd_øw«me
==
NULL
) {

423 i‡(!
	`°rcmp
(
dev«me
, 
dev
->
kd_«me
)) {

424 *
ªsu…
 = 
dev
;

425 
found
 = 1;

429  
found
 ? 0 : 
ENODEV
;

430 
	}
}

440 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

441 (*
mou¡func
)(*
d©a
, 
devi˚
 *, 
fs
 **
ªt
))

443 c⁄° *
vﬁ«me
;

444 
knowndev
 *
kd
;

445 
fs
 *fs;

446 
ªsu…
;

448 
	`lock_acquúe
(
knowndevs_lock
);

451 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

452 i‡(
ªsu…
) {

453 
puke
;

456 i‡(
kd
->
kd_fs
 !
NULL
) {

457 
ªsu…
 = 
EBUSY
;

458 
puke
;

460 
	`as£π
(
kd
->
kd_øw«me
 !
NULL
);

461 
	`as£π
(
kd
->
kd_devi˚
 !
NULL
);

463 
ªsu…
 = 
	`mou¡func
(
d©a
, 
kd
->
kd_devi˚
, &
fs
);

464 i‡(
ªsu…
) {

465 
puke
;

468 
	`as£π
(
fs
!=
NULL
);

470 
kd
->
kd_fs
 = 
fs
;

472 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

473 
	`k¥ötf
("vfs: Mounted %s: on %s\n",

474 
vﬁ«me
 ? vﬁ«mê: 
kd
->
kd_«me
, kd->kd_name);

476 
	`as£π
(
ªsu…
==0);

478 
puke
:

479 
	`lock_ªÀa£
(
knowndevs_lock
);

480  
ªsu…
;

481 
	}
}

488 
	$vfs_unmou¡
(c⁄° *
dev«me
)

490 
knowndev
 *
kd
;

491 
ªsu…
;

493 
	`lock_acquúe
(
knowndevs_lock
);

496 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

497 i‡(
ªsu…
) {

498 
puke
;

501 i‡(
kd
->
kd_fs
 =
NULL
) {

502 
ªsu…
 = 
EINVAL
;

503 
puke
;

505 
	`as£π
(
kd
->
kd_øw«me
 !
NULL
);

506 
	`as£π
(
kd
->
kd_devi˚
 !
NULL
);

508 
ªsu…
 = 
	`FSOP_SYNC
(
kd
->
kd_fs
);

509 i‡(
ªsu…
) {

510 
puke
;

513 
ªsu…
 = 
	`FSOP_UNMOUNT
(
kd
->
kd_fs
);

514 i‡(
ªsu…
) {

515 
puke
;

518 
	`k¥ötf
("vfs: Unmou¡ed %s:\n", 
kd
->
kd_«me
);

521 
kd
->
kd_fs
 = 
NULL
;

523 
	`as£π
(
ªsu…
==0);

525 
puke
:

526 
	`lock_ªÀa£
(
knowndevs_lock
);

527  
ªsu…
;

528 
	}
}

534 
	$vfs_unmou¡Æl
()

536 
knowndev
 *
dev
;

537 
i
, 
num
, 
ªsu…
;

539 
	`lock_acquúe
(
knowndevs_lock
);

541 
num
 = 
	`¨øy_gënum
(
knowndevs
);

542 
i
=0; i<
num
; i++) {

543 
dev
 = 
	`¨øy_gëguy
(
knowndevs
, 
i
);

544 i‡(
dev
->
kd_øw«me
 =
NULL
) {

548 i‡(
dev
->
kd_fs
 =
NULL
) {

553 
	`k¥ötf
("vfs: Unmou¡ög %s:\n", 
dev
->
kd_«me
);

555 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

556 i‡(
ªsu…
) {

557 
	`k¥ötf
("vfs: Warning: sync failed for %s: %s,Årying "

558 "agaö\n", 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

560 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

561 i‡(
ªsu…
) {

562 
	`k¥ötf
("vfs: Warning: sync failed secondÅime"

564 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

569 
ªsu…
 = 
	`FSOP_UNMOUNT
(
dev
->
kd_fs
);

570 i‡(
ªsu…
==
EBUSY
) {

571 
	`k¥ötf
("vfs: Cannot unmount %s: (busy)\n",

572 
dev
->
kd_«me
);

575 i‡(
ªsu…
) {

576 
	`k¥ötf
("vfs: Warning: unmount failed for %s:"

578 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

583 
dev
->
kd_fs
 = 
NULL
;

586 
	`lock_ªÀa£
(
knowndevs_lock
);

589 
	}
}

	@fs/vfs/vfslookup.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<kîn/limôs.h
>

8 
	~<lib.h
>

9 
	~<synch.h
>

10 
	~<vfs.h
>

11 
	~<vnode.h
>

12 
	~<fs.h
>

14 
vnode
 *
	gboŸfs_vnode
 = 
NULL
;

15 
lock
 *
	gboŸfs_lock
 = 
NULL
;

18 
	$vfs_öôboŸfs
()

20 
boŸfs_lock
 = 
	`lock_¸óã
("bootfs_lock");

21 i‡(
boŸfs_lock
 =
NULL
) {

22 
	`∑nic
("vfs: CouldÇot create bootfsÜock\n");

24 
	}
}

31 
	$ch™ge_boŸfs
(
vnode
 *
√wguy
)

33 
vnode
 *
ﬁdguy
;

35 
	`lock_acquúe
(
boŸfs_lock
);

36 
ﬁdguy
 = 
boŸfs_vnode
;

37 
boŸfs_vnode
 = 
√wguy
;

38 
	`lock_ªÀa£
(
boŸfs_lock
);

41 i‡(
ﬁdguy
 !
NULL
) {

42 
	`VOP_DECREF
(
ﬁdguy
);

44 
	}
}

55 
	$vfs_£tboŸfs
(c⁄° *
f¢ame
)

57 
tmp
[
NAME_MAX
+1];

58 *
s
;

59 
ªsu…
;

60 
vnode
 *
√wguy
;

62 
	`¢¥ötf
(
tmp
, —mp)-1, "%s", 
f¢ame
);

63 
s
 = 
	`°rchr
(
tmp
, ':');

64 i‡(
s
) {

66 i‡(
	`°æí
(
s
)>0) {

67  
EINVAL
;

71 
	`°rˇt
(
tmp
, ":");

74 
ªsu…
 = 
	`vfs_chdú
(
tmp
);

75 i‡(
ªsu…
) {

76  
ªsu…
;

79 
ªsu…
 = 
	`vfs_gëcurdú
(&
√wguy
);

80 i‡(
ªsu…
) {

81  
ªsu…
;

84 
	`ch™ge_boŸfs
(
√wguy
);

87 
	}
}

93 
	$vfs_˛órboŸfs
()

95 
	`ch™ge_boŸfs
(
NULL
);

96 
	}
}

106 
	$gëdevi˚
(*
∑th
, **
sub∑th
, 
vnode
 **
°¨tvn
)

108 
¶ash
=-1, 
cﬁ⁄
=-1, 
i
;

109 
vnode
 *
vn
;

110 
ªsu…
;

116 
i
=0; 
∑th
[i]; i++) {

117 i‡(
∑th
[
i
]==':') {

118 
cﬁ⁄
 = 
i
;

121 i‡(
∑th
[
i
]=='/') {

122 
¶ash
 = 
i
;

127 i‡(
cﬁ⁄
 < 0 && 
¶ash
 != 0) {

135 *
sub∑th
 = 
∑th
;

136  
	`vfs_gëcurdú
(
°¨tvn
);

139 i‡(
cﬁ⁄
>0) {

141 
∑th
[
cﬁ⁄
]=0;

142 
∑th
[
cﬁ⁄
+1]=='/') {

144 
cﬁ⁄
++;

146 *
sub∑th
 = &
∑th
[
cﬁ⁄
+1];

148 
ªsu…
 = 
	`vfs_gëroŸ
(
∑th
, 
°¨tvn
);

149 i‡(
ªsu…
) {

150  
ªsu…
;

162 
	`as£π
(
cﬁ⁄
==0 || 
¶ash
==0);

164 i‡(
∑th
[0]=='/') {

165 
	`lock_acquúe
(
boŸfs_lock
);

166 i‡(
boŸfs_vnode
==
NULL
) {

167 
	`lock_ªÀa£
(
boŸfs_lock
);

168  
ENOENT
;

170 
	`VOP_INCREF
(
boŸfs_vnode
);

171 *
°¨tvn
 = 
boŸfs_vnode
;

172 
	`lock_ªÀa£
(
boŸfs_lock
);

175 
	`as£π
(
∑th
[0]==':');

177 
ªsu…
 = 
	`vfs_gëcurdú
(&
vn
);

178 i‡(
ªsu…
) {

179  
ªsu…
;

186 
	`as£π
(
vn
->
vn_fs
!=
NULL
);

188 *
°¨tvn
 = 
	`FSOP_GETROOT
(
vn
->
vn_fs
);

190 
	`VOP_DECREF
(
vn
);

193 
∑th
[1]=='/') {

195 
∑th
++;

198 *
sub∑th
 = 
∑th
+1;

201 
	}
}

209 
	$vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªtvÆ
,

210 *
buf
, 
size_t
 
buÊí
)

212 
vnode
 *
°¨tvn
;

213 
ªsu…
;

215 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

216 i‡(
ªsu…
) {

217  
ªsu…
;

220 i‡(
	`°æí
(
∑th
)==0) {

226 
ªsu…
 = 
EINVAL
;

229 
ªsu…
 = 
	`VOP_LOOKPARENT
(
°¨tvn
, 
∑th
, 
ªtvÆ
, 
buf
, 
buÊí
);

232 
	`VOP_DECREF
(
°¨tvn
);

233  
ªsu…
;

234 
	}
}

237 
	$vfs_lookup
(*
∑th
, 
vnode
 **
ªtvÆ
)

239 
vnode
 *
°¨tvn
;

240 
ªsu…
;

242 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

243 i‡(
ªsu…
) {

244  
ªsu…
;

247 i‡(
	`°æí
(
∑th
)==0) {

248 *
ªtvÆ
 = 
°¨tvn
;

252 
ªsu…
 = 
	`VOP_LOOKUP
(
°¨tvn
, 
∑th
, 
ªtvÆ
);

254 
	`VOP_DECREF
(
°¨tvn
);

255  
ªsu…
;

256 
	}
}

	@fs/vfs/vfspath.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<kîn/limôs.h
>

8 
	~<kîn/uni°d.h
>

9 
	~<vfs.h
>

10 
	~<vnode.h
>

11 
	~<lib.h
>

16 
	$vfs_›í
(*
∑th
, 
›íÊags
, 
vnode
 **
ªt
)

18 
how
;

19 
ªsu…
;

20 
ˇnwrôe
;

21 
vnode
 *
vn
 = 
NULL
;

23 
how
 = 
›íÊags
 & 
O_ACCMODE
;

25 
how
) {

26 
O_RDONLY
:

27 
ˇnwrôe
=0;

29 
O_WRONLY
:

30 
O_RDWR
:

31 
ˇnwrôe
=1;

34  
EINVAL
;

37 i‡(
›íÊags
 & 
O_CREAT
) {

38 
«me
[
NAME_MAX
+1];

39 
vnode
 *
dú
;

40 
ex˛
 = (
›íÊags
 & 
O_EXCL
)!=0;

42 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

43 i‡(
ªsu…
) {

44  
ªsu…
;

47 
ªsu…
 = 
	`VOP_CREAT
(
dú
, 
«me
, 
ex˛
, &
vn
);

49 
	`VOP_DECREF
(
dú
);

52 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

55 i‡(
ªsu…
) {

56  
ªsu…
;

59 
	`as£π
(
vn
 !
NULL
);

61 
ªsu…
 = 
	`VOP_OPEN
(
vn
, 
›íÊags
);

62 i‡(
ªsu…
) {

63 
	`VOP_DECREF
(
vn
);

64  
ªsu…
;

67 
	`VOP_INCOPEN
(
vn
);

69 i‡(
›íÊags
 & 
O_TRUNC
) {

70 i‡(
ˇnwrôe
==0) {

71 
ªsu…
 = 
EINVAL
;

74 
ªsu…
 = 
	`VOP_TRUNCATE
(
vn
, 0);

76 i‡(
ªsu…
) {

77 
	`VOP_DECOPEN
(
vn
);

78 
	`VOP_DECREF
(
vn
);

79  
ªsu…
;

83 *
ªt
 = 
vn
;

86 
	}
}

90 
	$vfs_˛o£
(
vnode
 *
vn
)

106 
	`VOP_DECOPEN
(
vn
);

107 
	`VOP_DECREF
(
vn
);

108 
	}
}

112 
	$vfs_ªmove
(*
∑th
)

114 
vnode
 *
dú
;

115 
«me
[
NAME_MAX
+1];

116 
ªsu…
;

118 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

119 i‡(
ªsu…
) {

120  
ªsu…
;

123 
ªsu…
 = 
	`VOP_REMOVE
(
dú
, 
«me
);

124 
	`VOP_DECREF
(
dú
);

126  
ªsu…
;

127 
	}
}

131 
	$vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
)

133 
vnode
 *
ﬁddú
;

134 
ﬁd«me
[
NAME_MAX
+1];

135 
vnode
 *
√wdú
;

136 
√w«me
[
NAME_MAX
+1];

137 
ªsu…
;

139 
ªsu…
 = 
	`vfs_look∑ª¡
(
ﬁd∑th
, &
ﬁddú
, 
ﬁd«me
, (oldname));

140 i‡(
ªsu…
) {

141  
ªsu…
;

143 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

144 i‡(
ªsu…
) {

145 
	`VOP_DECREF
(
ﬁddú
);

146  
ªsu…
;

149 i‡(
ﬁddú
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

150 
ﬁddú
->
vn_fs
 !
√wdú
->vn_fs) {

151 
	`VOP_DECREF
(
√wdú
);

152 
	`VOP_DECREF
(
ﬁddú
);

153  
EXDEV
;

156 
ªsu…
 = 
	`VOP_RENAME
(
ﬁddú
, 
ﬁd«me
, 
√wdú
, 
√w«me
);

158 
	`VOP_DECREF
(
√wdú
);

159 
	`VOP_DECREF
(
ﬁddú
);

161  
ªsu…
;

162 
	}
}

166 
	$vfs_lök
(*
ﬁd∑th
, *
√w∑th
)

168 
vnode
 *
ﬁdfûe
;

169 
vnode
 *
√wdú
;

170 
√w«me
[
NAME_MAX
+1];

171 
ªsu…
;

173 
ªsu…
 = 
	`vfs_lookup
(
ﬁd∑th
, &
ﬁdfûe
);

174 i‡(
ªsu…
) {

175  
ªsu…
;

177 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

178 i‡(
ªsu…
) {

179 
	`VOP_DECREF
(
ﬁdfûe
);

180  
ªsu…
;

183 i‡(
ﬁdfûe
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

184 
ﬁdfûe
->
vn_fs
 !
√wdú
->vn_fs) {

185 
	`VOP_DECREF
(
√wdú
);

186 
	`VOP_DECREF
(
ﬁdfûe
);

187  
EXDEV
;

190 
ªsu…
 = 
	`VOP_LINK
(
√wdú
, 
√w«me
, 
ﬁdfûe
);

192 
	`VOP_DECREF
(
√wdú
);

193 
	`VOP_DECREF
(
ﬁdfûe
);

195  
ªsu…
;

196 
	}
}

206 
	$vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
)

208 
vnode
 *
√wdú
;

209 
√w«me
[
NAME_MAX
+1];

210 
ªsu…
;

212 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
√wdú
, 
√w«me
, (newname));

213 i‡(
ªsu…
) {

214  
ªsu…
;

217 
ªsu…
 = 
	`VOP_SYMLINK
(
√wdú
, 
√w«me
, 
c⁄ã¡s
);

218 
	`VOP_DECREF
(
√wdú
);

220  
ªsu…
;

221 
	}
}

231 
	$vfs_ªadlök
(*
∑th
, 
uio
 *uio)

233 
vnode
 *
vn
;

234 
ªsu…
;

236 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

237 i‡(
ªsu…
) {

238  
ªsu…
;

241 
ªsu…
 = 
	`VOP_READLINK
(
vn
, 
uio
);

243 
	`VOP_DECREF
(
vn
);

245  
ªsu…
;

246 
	}
}

252 
	$vfs_mkdú
(*
∑th
)

254 
vnode
 *
∑ª¡
;

255 
«me
[
NAME_MAX
+1];

256 
ªsu…
;

258 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

259 i‡(
ªsu…
) {

260  
ªsu…
;

263 
ªsu…
 = 
	`VOP_MKDIR
(
∑ª¡
, 
«me
);

265 
	`VOP_DECREF
(
∑ª¡
);

267  
ªsu…
;

268 
	}
}

274 
	$vfs_rmdú
(*
∑th
)

276 
vnode
 *
∑ª¡
;

277 
«me
[
NAME_MAX
+1];

278 
ªsu…
;

280 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

281 i‡(
ªsu…
) {

282  
ªsu…
;

285 
ªsu…
 = 
	`VOP_RMDIR
(
∑ª¡
, 
«me
);

287 
	`VOP_DECREF
(
∑ª¡
);

289  
ªsu…
;

290 
	}
}

	@fs/vfs/vnode.c

4 
	~<ty≥s.h
>

5 
	~<kîn/î∫o.h
>

6 
	~<lib.h
>

7 
	~<synch.h
>

8 
	~<vnode.h
>

15 
	$vnode_öô
(
vnode
 *
vn
, c⁄° 
vnode_›s
 *
›s
,

16 
fs
 *fs, *
fsd©a
)

18 
	`as£π
(
vn
!=
NULL
);

19 
	`as£π
(
›s
!=
NULL
);

21 
vn
->
vn_›s
 = 
›s
;

22 
vn
->
vn_ªfcou¡
 = 1;

23 
vn
->
vn_›ícou¡
 = 0;

24 
vn
->
vn_cou¡lock
 = 
	`lock_¸óã
("vnode-countlock");

25 i‡(
vn
->
vn_cou¡lock
 =
NULL
) {

26  
ENOMEM
;

28 
vn
->
vn_fs
 = 
fs
;

29 
vn
->
vn_d©a
 = 
fsd©a
;

31 
	}
}

38 
	$vnode_kûl
(
vnode
 *
vn
)

40 
	`as£π
(
vn
->
vn_ªfcou¡
==1);

41 
	`as£π
(
vn
->
vn_›ícou¡
==0);

42 
	`as£π
(
vn
->
vn_cou¡lock
!=
NULL
);

44 
	`lock_de°roy
(
vn
->
vn_cou¡lock
);

46 
vn
->
vn_›s
 = 
NULL
;

47 
vn
->
vn_ªfcou¡
 = 0;

48 
vn
->
vn_›ícou¡
 = 0;

49 
vn
->
vn_cou¡lock
 = 
NULL
;

50 
vn
->
vn_fs
 = 
NULL
;

51 
vn
->
vn_d©a
 = 
NULL
;

52 
	}
}

60 
	$vnode_ö¸ef
(
vnode
 *
vn
)

62 
	`as£π
(
vn
!=
NULL
);

63 
	`lock_acquúe
(
vn
->
vn_cou¡lock
);

64 
vn
->
vn_ªfcou¡
++;

65 
	`lock_ªÀa£
(
vn
->
vn_cou¡lock
);

66 
	}
}

74 
	$vnode_de¸ef
(
vnode
 *
vn
)

76 
ªsu…
, 
a˘uÆly_do_ô
 = 0;

78 
	`as£π
(
vn
!=
NULL
);

80 
	`lock_acquúe
(
vn
->
vn_cou¡lock
);

81 
	`as£π
(
vn
->
vn_ªfcou¡
>0);

82 i‡(
vn
->
vn_ªfcou¡
>1) {

83 
vn
->
vn_ªfcou¡
--;

86 
a˘uÆly_do_ô
 = 1;

88 
	`lock_ªÀa£
(
vn
->
vn_cou¡lock
);

90 i‡(
a˘uÆly_do_ô
) {

91 
ªsu…
 = 
	`VOP_RECLAIM
(
vn
);

92 i‡(
ªsu…
 !0 &&Ñesu… !
EBUSY
) {

94 
	`k¥ötf
("vfs: Warning: VOP_RECLAIM: %s\n",

95 
	`°ªº‹
(
ªsu…
));

98 
	}
}

105 
	$vnode_öc›í
(
vnode
 *
vn
)

107 
	`as£π
(
vn
!=
NULL
);

108 
	`lock_acquúe
(
vn
->
vn_cou¡lock
);

109 
vn
->
vn_›ícou¡
++;

110 
	`lock_ªÀa£
(
vn
->
vn_cou¡lock
);

111 
	}
}

118 
	$vnode_dec›í
(
vnode
 *
vn
)

120 
›ícou¡
, 
ªsu…
;

122 
	`as£π
(
vn
!=
NULL
);

123 
	`lock_acquúe
(
vn
->
vn_cou¡lock
);

124 
	`as£π
(
vn
->
vn_›ícou¡
>0);

125 
vn
->
vn_›ícou¡
--;

126 
›ícou¡
 = 
vn
->
vn_›ícou¡
;

127 
	`lock_ªÀa£
(
vn
->
vn_cou¡lock
);

129 i‡(
›ícou¡
 > 0) {

133 
ªsu…
 = 
	`VOP_CLOSE
(
vn
);

134 i‡(
ªsu…
) {

138 
	`k¥ötf
("vfs: W¨nög: VOP_CLOSE: %s\n", 
	`°ªº‹
(
ªsu…
));

140 
	}
}

147 
	$vnode_check
(
vnode
 *
v
, c⁄° *
›°r
)

149 i‡(
v
 =
NULL
) {

150 
	`∑nic
("vnode_check: v›_%s:ÇuŒ vnode\n", 
›°r
);

152 i‡(
v
 == (*)0xdeadbeef) {

153 
	`∑nic
("vnode_check: v›_%s: dódbì‡vnode\n", 
›°r
);

156 i‡(
v
->
vn_›s
 =
NULL
) {

157 
	`∑nic
("vnode_check: v›_%s:ÇuŒ op†poöãr\n", 
›°r
);

159 i‡(
v
->
vn_›s
 == (*)0xdeadbeef) {

160 
	`∑nic
("vnode_check: v›_%s: dódbì‡›†poöãr\n", 
›°r
);

163 i‡(
v
->
vn_›s
->
v›_magic
 !
VOP_MAGIC
) {

164 
	`∑nic
("vnode_check: vop_%s: ops with bad magicÇumber %lx\n",

165 
›°r
, 
v
->
vn_›s
->
v›_magic
);

172 i‡(
v
->
vn_fs
 == (*)0xdeadbeef) {

173 
	`∑nic
("vnode_check: v›_%s: dódbì‡f†poöãr\n", 
›°r
);

176 
	`lock_acquúe
(
v
->
vn_cou¡lock
);

178 i‡(
v
->
vn_ªfcou¡
 < 0) {

179 
	`∑nic
("vnode_check: v›_%s:Çeg©ivêªfcou¡ %d\n", 
›°r
,

180 
v
->
vn_ªfcou¡
);

182 i‡(
v
->
vn_ªfcou¡
 =0 && 
	`°rcmp
(
›°r
, "reclaim")) {

183 
	`∑nic
("vnode_check: v›_%s: zîÿªfcou¡\n", 
›°r
);

185 i‡(
v
->
vn_ªfcou¡
 > 0x100000) {

186 
	`k¥ötf
("vnode_check: vop_%s: warning:ÜargeÑefcount %d\n",

187 
›°r
, 
v
->
vn_ªfcou¡
);

190 i‡(
v
->
vn_›ícou¡
 < 0) {

191 
	`∑nic
("vnode_check: v›_%s:Çeg©ivê›ícou¡ %d\n", 
›°r
,

192 
v
->
vn_›ícou¡
);

194 i‡(
v
->
vn_›ícou¡
 > 0x100000) {

195 
	`k¥ötf
("vnode_check: vop_%s: warning:Üarge opencount %d\n",

196 
›°r
, 
v
->
vn_›ícou¡
);

199 
	`lock_ªÀa£
(
v
->
vn_cou¡lock
);

200 
	}
}

	@include/addrspace.h

1 #i‚de‡
_ADDRSPACE_H_


2 
	#_ADDRSPACE_H_


	)

4 
	~<vm.h
>

5 
	~"›t-dumbvm.h
"

7 
	gvnode
;

16 
	saddr•a˚
 {

17 #i‡
OPT_DUMBVM


18 
vaddr_t
 
	mas_vba£1
;

19 
∑ddr_t
 
	mas_pba£1
;

20 
size_t
 
	mas_≈ages1
;

21 
vaddr_t
 
	mas_vba£2
;

22 
∑ddr_t
 
	mas_pba£2
;

23 
size_t
 
	mas_≈ages2
;

24 
∑ddr_t
 
	mas_°ackpba£
;

28 
pid_t
 
	mpid
;

29 
pid_t
 
	m∑ª¡_pid
;

31 
vnode
 *
	mas_vnode
;

32 
size_t
 
	mfûesize_d©a
;

33 
u_öt32_t
 
	moff_d©a
;

34 
size_t
 
	mfûesize_ãxt
;

35 
u_öt32_t
 
	moff_ãxt
;

36 **
	mfú°±
;

39 
	m≈ages
;

41 
vaddr_t
 
	mas_vba£1
;

42 
size_t
 
	mas_≈ages1
;

43 
vaddr_t
 
	mas_vba£2
;

44 
size_t
 
	mas_≈ages2
;

45 
	mªadabÀ1
;

46 
	mwrôóbÀ1
;

47 
	mexecuèbÀ1
;

48 
	mªadabÀ2
;

49 
	mwrôóbÀ2
;

50 
	mexecuèbÀ2
;

51 
vaddr_t
 
	mhó±›
;

52 
vaddr_t
 
	mhópbŸtom
;

54 
∑ddr_t
 
	mas_pba£1
;

55 
∑ddr_t
 
	mas_pba£2
;

56 
∑ddr_t
 
	mas_°ackpba£
;

57 
vaddr_t
 
	mas_°ackvba£
;

101 
addr•a˚
 *
as_¸óã
();

102 
as_c›y
(
addr•a˚
 *
§c
, addr•a˚ **
ªt
);

103 
as_a˘iv©e
(
addr•a˚
 *);

104 
as_de°roy
(
addr•a˚
 *);

106 
as_deföe_ªgi⁄
(
addr•a˚
 *
as
,

107 
vaddr_t
 
vaddr
, 
size_t
 
sz
, size_à
fûesize
,

108 
ªadabÀ
,

109 
wrôóbÀ
,

110 
execuèbÀ
, 
vnode
 *
v
, 
u_öt32_t
 
off£t
);

111 
as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
);

112 
as_com∂ëe_lﬂd
(
addr•a˚
 *
as
);

113 
as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
öô°ack±r
);

122 
lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
);

	@include/array.h

1 #i‚de‡
_ARRAY_H_


2 
	#_ARRAY_H_


	)

31 
	g¨øy
;

33 
¨øy
 *
¨øy_¸óã
();

34 
¨øy_¥óŒoˇã
(
¨øy
 *, 
nguys
);

35 
¨øy_gënum
(
¨øy
 *);

36 *
¨øy_gëguy
(
¨øy
 *, 
ödex
);

37 
¨øy_£tsize
(
¨øy
 *, 
nguys
);

38 
¨øy_£tguy
(
¨øy
 *, 
ödex
, *
±r
);

39 
¨øy_add
(
¨øy
 *, *
guy
);

40 
¨øy_ªmove
(
¨øy
 *, 
ödex
);

41 
¨øy_de°roy
(
¨øy
 *);

	@include/bitmap.h

1 #i‚de‡
_BITMAP_H_


2 
	#_BITMAP_H_


	)

18 
	gbôm≠
;

20 
bôm≠
 *
bôm≠_¸óã
(
u_öt32_t
 
nbôs
);

21 *
bôm≠_gëd©a
(
bôm≠
 *);

22 
bôm≠_Æloc
(
bôm≠
 *, 
u_öt32_t
 *
ödex
);

23 
bôm≠_m¨k
(
bôm≠
 *, 
u_öt32_t
 
ödex
);

24 
bôm≠_unm¨k
(
bôm≠
 *, 
u_öt32_t
 
ödex
);

25 
bôm≠_is£t
(
bôm≠
 *, 
u_öt32_t
 
ödex
);

26 
bôm≠_de°roy
(
bôm≠
 *);

	@include/clock.h

1 #i‚de‡
_CLOCK_H_


2 
	#_CLOCK_H_


	)

4 
	~"›t-synch¥obs.h
"

15 #i‡
OPT_SYNCHPROBS


17 
	#HZ
 10000

	)

20 
	#HZ
 100

	)

23 
h¨d˛ock
();

25 
gëtime
(
time_t
 *
£c⁄ds
, 
u_öt32_t
 *
«no£c⁄ds
);

27 
gëöãrvÆ
(
time_t
 
£cs1
, 
u_öt32_t
 
n£cs
,

28 
time_t
 
£cs2
, 
u_öt32_t
 
n£cs2
,

29 
time_t
 *
r£cs
, 
u_öt32_t
 *
∫£cs
);

	@include/curthread.h

1 #i‚de‡
_CURTHREAD_H_


2 
	#_CURTHREAD_H_


	)

11 
	gthªad
;

13 
thªad
 *
cuπhªad
;

	@include/dev.h

1 #i‚de‡
_DEV_H_


2 
	#_DEV_H_


	)

4 
	guio
;

10 
	sdevi˚
 {

11 (*
	md_›í
)(
	mdevi˚
 *, 
	mÊags_‰om_›í
);

12 (*
	md_˛o£
)(
	mdevi˚
 *);

13 (*
	md_io
)(
	mdevi˚
 *, 
	muio
 *);

14 (*
	md_io˘l
)(
	mdevi˚
 *, 
	m›
, 
u£Ωå_t
 
	md©a
);

16 
u_öt32_t
 
	md_blocks
;

17 
u_öt32_t
 
	md_blocksize
;

19 *
	md_d©a
;

23 
vnode
 *
dev_¸óã_vnode
(
devi˚
 *
dev
);

27 
devnuŒ_¸óã
();

39 
dev_boŸ°øp
();

41 
machdï_dev_boŸ°øp
();

	@include/elf.h

1 #i‚de‡
_ELF_H_


2 
	#_ELF_H_


	)

18 
	#ELF_NIDENT
 16

	)

20 
	me_idít
[
ELF_NIDENT
];

21 
u_öt16_t
 
	me_ty≥
;

22 
u_öt16_t
 
	me_machöe
;

23 
u_öt32_t
 
	me_vîsi⁄
;

24 
u_öt32_t
 
	me_íåy
;

25 
u_öt32_t
 
	me_phoff
;

26 
u_öt32_t
 
	me_shoff
;

27 
u_öt32_t
 
	me_Êags
;

28 
u_öt16_t
 
	me_ehsize
;

29 
u_öt16_t
 
	me_phítsize
;

30 
u_öt16_t
 
	me_phnum
;

31 
u_öt16_t
 
	me_shítsize
;

32 
u_öt16_t
 
	me_shnum
;

33 
u_öt16_t
 
	me_sh°∫dx
;

34 } 
	tElf32_Ehdr
;

37 
	#EI_MAG0
 0

	)

38 
	#EI_MAG1
 1

	)

39 
	#EI_MAG2
 2

	)

40 
	#EI_MAG3
 3

	)

41 
	#EI_CLASS
 4

	)

42 
	#EI_DATA
 5

	)

43 
	#EI_VERSION
 6

	)

44 
	#EI_OSABI
 7

	)

45 
	#EI_ABIVERSION
 8

	)

46 
	#EI_PAD
 9

	)

51 
	#ELFMAG0
 0x7f

	)

52 
	#ELFMAG1
 'E'

	)

53 
	#ELFMAG2
 'L'

	)

54 
	#ELFMAG3
 'F'

	)

57 
	#ELFCLASSNONE
 0

	)

58 
	#ELFCLASS32
 1

	)

59 
	#ELFCLASS64
 2

	)

62 
	#ELFDATANONE
 0

	)

63 
	#ELFDATA2LSB
 1

	)

64 
	#ELFDATA2MSB
 2

	)

67 
	#EV_NONE
 0

	)

68 
	#EV_CURRENT
 1

	)

71 
	#ELFOSABI_SYSV
 0

	)

72 
	#ELFOSABI_HPUX
 1

	)

73 
	#ELFOSABI_STANDALONE
 255

	)

79 
	#ET_NONE
 0

	)

80 
	#ET_REL
 1

	)

81 
	#ET_EXEC
 2

	)

82 
	#ET_DYN
 3

	)

83 
	#ET_CORE
 4

	)

84 
	#ET_NUM
 5

	)

89 
	#EM_NONE
 0

	)

90 
	#EM_M32
 1

	)

91 
	#EM_SPARC
 2

	)

92 
	#EM_386
 3

	)

93 
	#EM_68K
 4

	)

94 
	#EM_88K
 5

	)

95 
	#EM_486
 6

	)

96 
	#EM_860
 7

	)

97 
	#EM_MIPS
 8

	)

98 
	#EM_S370
 9

	)

99 
	#EM_MIPS_RS3_LE
 10

	)

100 
	#EM_RS6000
 11

	)

101 
	#EM_PARISC
 15

	)

102 
	#EM_NCUBE
 16

	)

103 
	#EM_VPP500
 17

	)

104 
	#EM_SPARC32PLUS
 18

	)

105 
	#EM_960
 19

	)

106 
	#EM_PPC
 20

	)

107 
	#EM_V800
 36

	)

108 
	#EM_FR20
 37

	)

109 
	#EM_RH32
 38

	)

110 
	#EM_RCE
 39

	)

111 
	#EM_ARM
 40

	)

112 
	#EM_ALPHA
 41

	)

113 
	#EM_SH
 42

	)

114 
	#EM_SPARCV9
 43

	)

115 
	#EM_TRICORE
 44

	)

116 
	#EM_ARC
 45

	)

117 
	#EM_H8_300
 46

	)

118 
	#EM_H8_300H
 47

	)

119 
	#EM_H8S
 48

	)

120 
	#EM_H8_500
 49

	)

121 
	#EM_IA_64
 50

	)

122 
	#EM_MIPS_X
 51

	)

123 
	#EM_COLDFIRE
 52

	)

124 
	#EM_68HC12
 53

	)

125 
	#EM_VAX
 75

	)

126 
	#EM_ALPHA_EXP
 36902

	)

127 
	#EM_NUM
 36903

	)

137 
u_öt32_t
 
	mp_ty≥
;

138 
u_öt32_t
 
	mp_off£t
;

139 
u_öt32_t
 
	mp_vaddr
;

140 
u_öt32_t
 
	mp_∑ddr
;

141 
u_öt32_t
 
	mp_fûesz
;

142 
u_öt32_t
 
	mp_memsz
;

143 
u_öt32_t
 
	mp_Êags
;

144 
u_öt32_t
 
	mp_Æign
;

145 } 
	tElf32_Phdr
;

148 
	#PT_NULL
 0

	)

149 
	#PT_LOAD
 1

	)

150 
	#PT_DYNAMIC
 2

	)

151 
	#PT_INTERP
 3

	)

152 
	#PT_NOTE
 4

	)

153 
	#PT_SHLIB
 5

	)

154 
	#PT_PHDR
 6

	)

155 
	#PT_NUM
 7

	)

156 
	#PT_MIPS_REGINFO
 0x70000000

	)

159 
	#PF_R
 0x4

	)

160 
	#PF_W
 0x2

	)

161 
	#PF_X
 0x1

	)

164 
Elf32_Ehdr
 
	tElf_Ehdr
;

165 
Elf32_Phdr
 
	tElf_Phdr
;

	@include/emufs.h

1 #i‚de‡
_EMUFS_H_


2 
	#_EMUFS_H_


	)

7 
	~<vnode.h
>

8 
	~<fs.h
>

14 
	semufs_vnode
 {

15 
vnode
 
	mev_v
;

16 
emu_so·c
 *
	mev_emu
;

17 
u_öt32_t
 
	mev_h™dÀ
;

20 
	semufs_fs
 {

21 
fs
 
	mef_fs
;

22 
emu_so·c
 *
	mef_emu
;

23 
emufs_vnode
 *
	mef_roŸ
;

24 
¨øy
 *
	mef_vnodes
;

	@include/fork.h

1 #i‚de‡
_FORK_H_


2 
	#_FORK_H_


	)

4 
	spid_li°
 {

5 
pid_t
 
	mpid
;

6 
	mhas_exôed
;

7 
	mexôcode
;

8 
pid_li°
 *
	m√xt
;

13 
pid_t
 
	gglobÆ_pid
;

14 
lock
 *
	gpid_lock
;

15 
pid_li°
 *
	gpidli°
;

17 
öô_pid
();

18 
pid_t
 
gë_globÆpid
();

19 
pid_t
 
gë_√wpid
();

20 
pid_li°
 *
pidli°_¸óã
(
pid_t
 
pid
);

22 
pidli°_£¨ch
(
pid_t
 
pid
, *
exôcode
);

	@include/fs.h

1 #i‚de‡
_FS_H_


2 
	#_FS_H_


	)

33 
	sfs
 {

34 (*
	mfs_sync
)(
	mfs
 *);

35 c⁄° *(*
	mfs_gëvﬁ«me
)(
	mfs
 *);

36 
	mvnode
 *(*
	mfs_gëroŸ
)(
	mfs
 *);

37 (*
	mfs_unmou¡
)(
	mfs
 *);

39 *
	mfs_d©a
;

45 
	#FSOP_SYNC
(
fs
Ë((fs)->
	`fs_sync
(fs))

	)

46 
	#FSOP_GETVOLNAME
(
fs
Ë((fs)->
	`fs_gëvﬁ«me
(fs))

	)

47 
	#FSOP_GETROOT
(
fs
Ë((fs)->
	`fs_gëroŸ
(fs))

	)

48 
	#FSOP_UNMOUNT
(
fs
Ë((fs)->
	`fs_unmou¡
(fs))

	)

	@include/get_pid.h

1 #i‚de‡
_SYSGETPID_H_


2 
	#_SYSGETPID_H_


	)

4 
pid_t
 
sys_gë_pid
();

	@include/hello.h

1 #i‚de‡
_HELLO_H_


2 
	#_HELLO_H_


	)

4 
hñlo
();

	@include/kern/callno.h

1 #i‚de‡
_KERN_CALLNO_H_


2 
	#_KERN_CALLNO_H_


	)

11 
	#SYS__exô
 0

	)

12 
	#SYS_execv
 1

	)

13 
	#SYS_f‹k
 2

	)

14 
	#SYS_waôpid
 3

	)

15 
	#SYS_›í
 4

	)

16 
	#SYS_ªad
 5

	)

17 
	#SYS_wrôe
 6

	)

18 
	#SYS_˛o£
 7

	)

19 
	#SYS_ªboŸ
 8

	)

20 
	#SYS_sync
 9

	)

21 
	#SYS_sbrk
 10

	)

22 
	#SYS_gëpid
 11

	)

23 
	#SYS_io˘l
 12

	)

24 
	#SYS_l£ek
 13

	)

25 
	#SYS_fsync
 14

	)

26 
	#SYS_·runˇã
 15

	)

27 
	#SYS_f°©
 16

	)

28 
	#SYS_ªmove
 17

	)

29 
	#SYS_ª«me
 18

	)

30 
	#SYS_lök
 19

	)

31 
	#SYS_mkdú
 20

	)

32 
	#SYS_rmdú
 21

	)

33 
	#SYS_chdú
 22

	)

34 
	#SYS_gëdúíåy
 23

	)

35 
	#SYS_symlök
 24

	)

36 
	#SYS_ªadlök
 25

	)

37 
	#SYS_dup2
 26

	)

38 
	#SYS_pùe
 27

	)

39 
	#SYS___time
 28

	)

40 
	#SYS___gëcwd
 29

	)

41 
	#SYS_°©
 30

	)

42 
	#SYS_l°©
 31

	)

43 
	#SYS_¥ötch¨
 32

	)

44 
	#SYS_ªadch¨
 33

	)

	@include/kern/errmsg.h

1 #i‚de‡
_KERN_ERRMSG_H_


2 
	#_KERN_ERRMSG_H_


	)

12 c⁄° *c⁄° 
	gsys_îæi°
[] = {

45 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@include/kern/errno.h

1 #i‚de‡
_KERN_ERRNO_H_


2 
	#_KERN_ERRNO_H_


	)

13 
	#EINVAL
 1

	)

14 
	#EFAULT
 2

	)

15 
	#ENAMETOOLONG
 3

	)

16 
	#ENOMEM
 4

	)

17 
	#EIO
 5

	)

18 
	#ENOENT
 6

	)

19 
	#ENOTDIR
 7

	)

20 
	#EISDIR
 8

	)

21 
	#EEXIST
 9

	)

22 
	#EXDEV
 10

	)

23 
	#EAGAIN
 11

	)

24 
	#ESPIPE
 12

	)

25 
	#EUNIMP
 13

	)

26 
	#ENXIO
 14

	)

27 
	#ENODEV
 15

	)

28 
	#EBUSY
 16

	)

29 
	#EIOCTL
 17

	)

30 
	#ENOTEMPTY
 18

	)

31 
	#ERANGE
 19

	)

32 
	#ENOSPC
 20

	)

33 
	#EMFILE
 21

	)

34 
	#ENFILE
 22

	)

35 
	#ENOSYS
 23

	)

36 
	#ENOEXEC
 24

	)

37 
	#E2BIG
 25

	)

38 
	#EBADF
 26

	)

	@include/kern/ioctl.h

1 #i‚de‡
_KERN_IOCTL_H_


2 
	#_KERN_IOCTL_H_


	)

	@include/kern/limits.h

1 #i‚de‡
_KERN_LIMITS_H_


2 
	#_KERN_LIMITS_H_


	)

5 
	#NAME_MAX
 255

	)

8 
	#PATH_MAX
 1024

	)

	@include/kern/sfs.h

1 #i‚de‡
_KERN_SFS_H_


2 
	#_KERN_SFS_H_


	)

4 
	#SFS_MAGIC
 0xabadf001

	)

5 
	#SFS_BLOCKSIZE
 512

	)

6 
	#SFS_VOLNAME_SIZE
 32

	)

7 
	#SFS_NDIRECT
 15

	)

8 
	#SFS_DBPERIDB
 128

	)

9 
	#SFS_NAMELEN
 60

	)

10 
	#SFS_SB_LOCATION
 0

	)

11 
	#SFS_ROOT_LOCATION
 1

	)

12 
	#SFS_MAP_LOCATION
 2

	)

13 
	#SFS_NOINO
 0

	)

16 
	#SFS_BLOCKBITS
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

19 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

22 
	#SFS_BITMAPSIZE
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BLOCKBITS
)

	)

25 
	#SFS_BITBLOCKS
(
nblocks
Ë(
	`SFS_BITMAPSIZE
“blocks)/
SFS_BLOCKBITS
)

	)

28 
	#SFS_TYPE_INVAL
 0

	)

29 
	#SFS_TYPE_FILE
 1

	)

30 
	#SFS_TYPE_DIR
 2

	)

35 
	ssfs_su≥r
 {

36 
u_öt32_t
 
	m•_magic
;

37 
u_öt32_t
 
	m•_nblocks
;

38 
	m•_vﬁ«me
[
SFS_VOLNAME_SIZE
];

39 
u_öt32_t
 
	mª£rved
[118];

45 
	ssfs_öode
 {

46 
u_öt32_t
 
	msfi_size
;

47 
u_öt16_t
 
	msfi_ty≥
;

48 
u_öt16_t
 
	msfi_lökcou¡
;

49 
u_öt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

50 
u_öt32_t
 
	msfi_ödúe˘
;

51 
u_öt32_t
 
	msfi_wa°e
[128-3-
SFS_NDIRECT
];

57 
	ssfs_dú
 {

58 
u_öt32_t
 
	msfd_öo
;

59 
	msfd_«me
[
SFS_NAMELEN
];

	@include/kern/stat.h

1 #i‚de‡
_KERN_STAT_H_


2 
	#_KERN_STAT_H_


	)

8 
	s°©
 {

9 
u_öt32_t
 
	m°_mode
;

10 
u_öt32_t
 
	m°_∆ök
;

11 
off_t
 
	m°_size
;

12 
u_öt32_t
 
	m°_blocks
;

22 
	#S_IFMT
 070000

	)

23 
	#S_IFREG
 010000

	)

24 
	#S_IFDIR
 020000

	)

25 
	#S_IFLNK
 030000

	)

26 
	#S_IFCHR
 040000

	)

27 
	#S_IFBLK
 050000

	)

32 
	#S_ISREG
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFREG
Ë

	)

33 
	#S_ISDIR
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFDIR
Ë

	)

34 
	#S_ISLNK
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFLNK
Ë

	)

35 
	#S_ISCHR
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFCHR
Ë

	)

36 
	#S_ISBLK
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFBLK
Ë

	)

	@include/kern/types.h

1 #i‚de‡
_KERN_TYPES_H_


2 
	#_KERN_TYPES_H_


	)

10 
öt32_t
 
	toff_t
;

11 
öt32_t
 
	tpid_t
;

12 
öt32_t
 
	ttime_t
;

	@include/kern/unistd.h

1 #i‚de‡
_KERN_UNISTD_H_


2 
	#_KERN_UNISTD_H_


	)

9 
	#O_RDONLY
 0

	)

10 
	#O_WRONLY
 1

	)

11 
	#O_RDWR
 2

	)

13 
	#O_CREAT
 4

	)

14 
	#O_EXCL
 8

	)

15 
	#O_TRUNC
 16

	)

16 
	#O_APPEND
 32

	)

19 
	#O_ACCMODE
 3

	)

23 
	#STDIN_FILENO
 0

	)

24 
	#STDOUT_FILENO
 1

	)

25 
	#STDERR_FILENO
 2

	)

28 
	#RB_REBOOT
 0

	)

29 
	#RB_HALT
 1

	)

30 
	#RB_POWEROFF
 2

	)

33 
	#SEEK_SET
 0

	)

34 
	#SEEK_CUR
 1

	)

35 
	#SEEK_END
 2

	)

	@include/lib.h

1 #i‚de‡
_LIB_H_


2 
	#_LIB_H_


	)

9 
	~<machöe/£tjmp.h
>

14 #ifde‡
__GNUC__


15 
	#__PF
(
a
,
b
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,á, b)))

	)

17 
	#__PF
(
a
,
b
)

	)

23 #i‚de‡
__GNUC__


24 
	#__PRETTY_FUNCTION__
 "<unknow¿fun˘i⁄>"

	)

30 
	#as£π
(
x
) { \

31 i‡(!(
x
)) { \

32 
	`∑nic
("Assertion failed: %s,át %s:%d (%s)\n", #x, \

33 
__FILE__
, 
__LINE__
, 
__PRETTY_FUNCTION__
); \

35 }

	)

40 
	#DB_LOCORE
 0x001

	)

41 
	#DB_SYSCALL
 0x002

	)

42 
	#DB_INTERRUPT
 0x004

	)

43 
	#DB_DEVICE
 0x008

	)

44 
	#DB_THREADS
 0x010

	)

45 
	#DB_VM
 0x020

	)

46 
	#DB_EXEC
 0x040

	)

47 
	#DB_VFS
 0x080

	)

48 
	#DB_SFS
 0x100

	)

49 
	#DB_NET
 0x200

	)

50 
	#DB_NETFS
 0x400

	)

51 
	#DB_KMALLOC
 0x800

	)

53 
u_öt32_t
 
dbÊags
;

74 
	#DEBUG
(
d
, 
fmt
, ...Ë((
dbÊags
 & (d)Ë? 
	`k¥ötf
(fmt, 
__VA_ARGS__
Ë: 0)

	)

76 
	#DEBUG
(
d
, 
fmt
, 
¨gs
...Ë((
dbÊags
 & (d)Ë? 
	`k¥ötf
(fmt, ##¨gsË: 0)

	)

82 
	#RAND_MAX
 (
	`øndmax
())

	)

83 
u_öt32_t
 
øndmax
();

84 
u_öt32_t
 
øndom
();

90 *
kmÆloc
(
size_t
 
sz
);

91 
k‰ì
(*
±r
);

92 
khóp_¥öt°©s
();

100 
size_t
 
°æí
(const *);

101 
°rcmp
(const *, const *);

102 *
°r˝y
(*, const *);

103 *
°rˇt
(*, const *);

104 *
k°rdup
(const *);

105 *
°rchr
(const *, );

106 *
°ºchr
(const *, );

107 *
°πok_r
(*
buf
, c⁄° *
£ps
, **
c⁄ãxt
);

109 *
mem˝y
(*, c⁄° *, 
size_t
);

110 *
memmove
(*, c⁄° *, 
size_t
);

111 
bzîo
(*, 
size_t
);

112 
©oi
(const *);

114 
	$¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, ...Ë
	`__PF
(3,4);

116 c⁄° *
	`°ªº‹
(
îrcode
);

122 
	`£tjmp
(
jmp_buf
 
jb
);

123 
	`l⁄gjmp
(
jmp_buf
 
jb
, 
ªtvÆ
);

128 
	`putch
(
ch
);

129 
	`gëch
();

130 
	`bìp
();

143 
	$k¥ötf
(c⁄° *
fmt
, ...Ë
	`__PF
(1,2);

144 
	$∑nic
(c⁄° *
fmt
, ...Ë
	`__PF
(1,2);

146 
	`kgës
(*
buf
, 
size_t
 
maxbuÊí
);

148 
	`k¥ötf_boŸ°øp
();

153 
u_öt16_t
 
	`¡ohs
(u_int16_t);

154 
u_öt16_t
 
	`ht⁄s
(u_int16_t);

155 
u_öt32_t
 
	`¡ohl
(u_int32_t);

156 
u_öt32_t
 
	`ht⁄l
(u_int32_t);

157 
u_öt64_t
 
	`¡ohŒ
(u_int64_t);

158 
u_öt64_t
 
	`ht⁄Œ
(u_int64_t);

189 
	`c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
);

190 
	`c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
);

191 
	`c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
gŸ
);

192 
	`c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
gŸ
);

202 
lbﬁt
;

203 
	`˛ock¶ìp
(
£c⁄ds
);

209 
	#DIVROUNDUP
(
a
,
b
Ë((◊)+(b)-1)/(b))

	)

210 
	#ROUNDUP
(
a
,
b
Ë(
	`DIVROUNDUP
◊,b)*b)

	)

	@include/queue.h

1 #i‚de‡
_QUEUE_H_


2 
	#_QUEUE_H_


	)

22 
	gqueue
;

24 
queue
 *
q_¸óã
(
size
);

25 
q_¥óŒoˇã
(
queue
 *, 
size
);

26 
q_em±y
(
queue
 *);

27 
q_addèû
(
queue
 *, *
±r
);

28 *
q_ªmhód
(
queue
 *);

29 
q_de°roy
(
queue
 *);

51 
q_gë°¨t
(
queue
 *);

52 
q_gëíd
(
queue
 *);

53 
q_gësize
(
queue
 *);

54 *
q_gëguy
(
queue
 *, 
ödex
);

	@include/scheduler.h

1 #i‚de‡
_SCHEDULER_H_


2 
	#_SCHEDULER_H_


	)

21 
	gthªad
;

23 
thªad
 *
scheduÀr
();

24 
make_ru¬abÀ
(
thªad
 *
t
);

26 
¥öt_run_queue
();

28 
scheduÀr_boŸ°øp
();

29 
scheduÀr_¥óŒoˇã
(
numthªads
);

30 
scheduÀr_kûœŒ
();

31 
scheduÀr_shutdown
();

	@include/sfs.h

1 #i‚de‡
_SFS_H_


2 
	#_SFS_H_


	)

7 
	~<vnode.h
>

8 
	~<fs.h
>

14 
	~<kîn/sfs.h
>

16 
	ssfs_vnode
 {

17 
vnode
 
	msv_v
;

18 
sfs_öode
 
	msv_i
;

19 
u_öt32_t
 
	msv_öo
;

20 
	msv_dúty
;

23 
	ssfs_fs
 {

24 
fs
 
	msfs_absfs
;

25 
sfs_su≥r
 
	msfs_su≥r
;

26 
	msfs_su≥rdúty
;

27 
devi˚
 *
	msfs_devi˚
;

28 
¨øy
 *
	msfs_vnodes
;

29 
bôm≠
 *
	msfs_‰ìm≠
;

30 
	msfs_‰ìm≠dúty
;

36 
sfs_mou¡
(c⁄° *
devi˚
);

44 
	#SFSUIO
(
uio
, 
±r
, 
block
, 
rw
) \

45 
	`mk_kuio
(
uio
, 
±r
, 
SFS_BLOCKSIZE
, ((
off_t
)(
block
))*SFS_BLOCKSIZE, 
rw
)

	)

48 
sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio);

49 
sfs_rblock
(
sfs_fs
 *
sfs
, *
d©a
, 
u_öt32_t
 
block
);

50 
sfs_wblock
(
sfs_fs
 *
sfs
, *
d©a
, 
u_öt32_t
 
block
);

53 
vnode
 *
sfs_gëroŸ
(
fs
 *fs);

	@include/stdarg.h

1 #i‚de‡
_STDARG_H_


2 
	#_STDARG_H_


	)

5 
	~<lib.h
>

13 
__buûtö_va_li°
 
	t__va_li°
;

14 
__va_li°
 
	tva_li°
;

16 
	#va_°¨t
(
≠
,
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p,fmt)

	)

17 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,t)

	)

18 
	#va_c›y
(
≠1
,
≠2
Ë
	`__buûtö_va_c›y
◊p1,≠2)

	)

19 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

25 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(1,0);

26 
	$v¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
f
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

34 
	`__v¥ötf
((*
func
)(*
˛õ¡d©a
, c⁄° *
°r
, 
size_t
 
Àn
),

35 *
˛õ¡d©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

	@include/synch.h

5 #i‚de‡
_SYNCH_H_


6 
	#_SYNCH_H_


	)

21 
	s£m≠h‹e
 {

22 *
	m«me
;

23 vﬁ©ûê
	mcou¡
;

26 
£m≠h‹e
 *
£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
);

27 
P
(
£m≠h‹e
 *);

28 
V
(
£m≠h‹e
 *);

29 
£m_de°roy
(
£m≠h‹e
 *);

51 
	slock
 {

52 *
	m«me
;

53 vﬁ©ûê
thªad
 *
	mthªad_addr
;

58 
lock
 *
lock_¸óã
(c⁄° *
«me
);

59 
lock_acquúe
(
lock
 *);

60 
lock_ªÀa£
(
lock
 *);

61 
lock_do_i_hﬁd
(
lock
 *);

62 
lock_de°roy
(
lock
 *);

92 
	scv
 {

93 *
	m«me
;

94 
queue
 *
	mcv_queue
;

99 
cv
 *
cv_¸óã
(c⁄° *
«me
);

100 
cv_waô
(
cv
 *cv, 
lock
 *lock);

101 
cv_sig«l
(
cv
 *cv, 
lock
 *lock);

102 
cv_lockªÀa£
(
cv
 *cv, 
lock
 *lock);

103 
cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock);

104 
cv_de°roy
(
cv
 *);

	@include/syscall.h

1 #i‚de‡
_SYSCALL_H_


2 
	#_SYSCALL_H_


	)

4 
	~<machöe/ty≥s.h
>

5 
	~<kîn/ty≥s.h
>

10 
sys_exô
(
code
);

12 
sys_ªboŸ
(
code
);

14 
sys_¥ötch¨
(
w‹d
);

16 
sys_ªadch¨
();

18 
pid_t
 
sys_f‹k
(
å≠‰ame
 *
∑ª¡_tf
);

19 
pid_t
 
f‹k
();

21 
pid_t
 
sys_gë_pid
();

23 
pid_t
 
sys_waô
’id_à
pid
, *
°©us
, 
›ti⁄s
);

24 
waôpid
(
pid_t
 
pid
, *
ªtu∫code
, 
Êags
);

	@include/test.h

1 #i‚de‡
_TEST_H_


2 
	#_TEST_H_


	)

10 
ˇtmou££m
(, **);

11 
ˇtmou£lock
(, **);

12 
¸óãˇrs
(, **);

19 
¨øyã°
(, **);

20 
bôm≠ã°
(, **);

21 
queuëe°
(, **);

24 
thªadã°
(, **);

25 
thªadã°2
(, **);

26 
thªadã°3
(, **);

27 
£mã°
(, **);

28 
lockã°
(, **);

29 
cvã°
(, **);

32 
f°e°
(, **);

33 
ªad°ªss
(, **);

34 
wrôe°ªss
(, **);

35 
wrôe°ªss2
(, **);

36 
¸óã°ªss
(, **);

37 
¥ötfûe
(, **);

40 
mÆlo˘e°
(, **);

41 
mÆloc°ªss
(, **);

42 
√âe°
(, **);

45 
míu
(*
¨g°r
);

48 
ru≈rogøm
(*
¥og«me
, 
«rgs
, **
¨gs
);

	@include/thread.h

1 #i‚de‡
_THREAD_H_


2 
	#_THREAD_H_


	)

9 
	~<machöe/pcb.h
>

10 
	~<synch.h
>

11 
	~<kîn/ty≥s.h
>

13 
	gaddr•a˚
;

15 
	sthªad
 {

20 
pcb
 
	mt_pcb
;

21 *
	mt_«me
;

22 c⁄° *
	mt_¶ì∑ddr
;

23 *
	mt_°ack
;

25 
pid_t
 
	mpid
;

26 
pid_t
 
	m∑ª¡_pid
;

37 
addr•a˚
 *
	mt_vm•a˚
;

43 
vnode
 *
	mt_cwd
;

47 
thªad
 *
thªad_boŸ°øp
();

50 
thªad_∑nic
();

53 
thªad_shutdown
();

65 
thªad_f‹k
(c⁄° *
«me
,

66 *
d©a1
, 
d©a2
,

67 (*
func
)(*, ),

68 
thªad
 **
ªt
);

74 
	`thªad_exô
();

81 
	`thªad_yõld
();

89 
	`thªad_¶ìp
(c⁄° *
addr
);

97 
	`thªad_cv¶ìp
(c⁄° *
addr
);

104 
	`thªad_wakeup
(c⁄° *
addr
);

109 
	`thªad_wakeup_hód
(c⁄° *
addr
, 
queue
 *
cv_queue
);

115 
	`thªad_joö
(
thªad
 *
chûd_thªad
, *
°©us
);

122 
	`ex‹ci£
();

128 
	`thªad_has¶ì≥rs
(c⁄° *
addr
);

136 
	`mi_thªad°¨t
(*
d©a1
, 
d©a2
,

137 (*
func
)(*, ));

140 
	`md_swôch
(
pcb
 *
ﬁd
, pcb *
nu
);

	@include/trapframe.h

1 #i‚de‡
_MIPS_TRAPFRAME_H_


2 
	#_MIPS_TRAPFRAME_H_


	)

11 
	så≠‰ame
 {

12 
u_öt32_t
 
	mtf_vaddr
;

13 
u_öt32_t
 
	mtf_°©us
;

14 
u_öt32_t
 
	mtf_ˇu£
;

15 
u_öt32_t
 
	mtf_lo
;

16 
u_öt32_t
 
	mtf_hi
;

17 
u_öt32_t
 
	mtf_ø
;

18 
u_öt32_t
 
	mtf_©
;

19 
u_öt32_t
 
	mtf_v0
;

20 
u_öt32_t
 
	mtf_v1
;

21 
u_öt32_t
 
	mtf_a0
;

22 
u_öt32_t
 
	mtf_a1
;

23 
u_öt32_t
 
	mtf_a2
;

24 
u_öt32_t
 
	mtf_a3
;

25 
u_öt32_t
 
	mtf_t0
;

26 
u_öt32_t
 
	mtf_t1
;

27 
u_öt32_t
 
	mtf_t2
;

28 
u_öt32_t
 
	mtf_t3
;

29 
u_öt32_t
 
	mtf_t4
;

30 
u_öt32_t
 
	mtf_t5
;

31 
u_öt32_t
 
	mtf_t6
;

32 
u_öt32_t
 
	mtf_t7
;

33 
u_öt32_t
 
	mtf_s0
;

34 
u_öt32_t
 
	mtf_s1
;

35 
u_öt32_t
 
	mtf_s2
;

36 
u_öt32_t
 
	mtf_s3
;

37 
u_öt32_t
 
	mtf_s4
;

38 
u_öt32_t
 
	mtf_s5
;

39 
u_öt32_t
 
	mtf_s6
;

40 
u_öt32_t
 
	mtf_s7
;

41 
u_öt32_t
 
	mtf_t8
;

42 
u_öt32_t
 
	mtf_t9
;

43 
u_öt32_t
 
	mtf_k0
;

44 
u_öt32_t
 
	mtf_k1
;

45 
u_öt32_t
 
	mtf_gp
;

46 
u_öt32_t
 
	mtf_•
;

47 
u_öt32_t
 
	mtf_s8
;

48 
u_öt32_t
 
	mtf_ïc
;

54 
	#EX_IRQ
 0

	)

55 
	#EX_MOD
 1

	)

56 
	#EX_TLBL
 2

	)

57 
	#EX_TLBS
 3

	)

58 
	#EX_ADEL
 4

	)

59 
	#EX_ADES
 5

	)

60 
	#EX_IBE
 6

	)

61 
	#EX_DBE
 7

	)

62 
	#EX_SYS
 8

	)

63 
	#EX_BP
 9

	)

64 
	#EX_RI
 10

	)

65 
	#EX_CPU
 11

	)

66 
	#EX_OVF
 12

	)

74 
mùs_u£rmode
(
å≠‰ame
 *
tf
);

75 
md_f‹kíåy
(*
∑ª¡_tf
, 
∑ddr
);

	@include/types.h

1 #i‚de‡
_TYPES_H_


2 
	#_TYPES_H_


	)

16 
	~<machöe/ty≥s.h
>

19 
	~<kîn/ty≥s.h
>

22 
	~<machöe/kty≥s.h
>

29 
	s__u£Ωå
 { 
	m_dummy
; };

30 
__u£Ωå
 *
	tu£Ωå_t
;

31 c⁄° 
	t__u£Ωå
 *
	tc⁄°_u£Ωå_t
;

	@include/uio.h

1 #i‚de‡
_UIO_H_


2 
	#_UIO_H_


	)

9 
	euio_rw
 {

10 
	mUIO_READ
,

11 
	mUIO_WRITE
,

14 
	euio_£g
 {

15 
	mUIO_USERSPACE
,

16 
	mUIO_SYSSPACE
,

17 
	mUIO_USERISPACE
,

20 
	siovec
 {

22 *
	mun_kba£
;

23 
u£Ωå_t
 
	mun_uba£
;

24 } 
	miov_un
;

25 
size_t
 
	miov_Àn
;

27 
	#iov_kba£
 
iov_un
.
un_kba£


	)

28 
	#iov_uba£
 
iov_un
.
un_uba£


	)

30 
	suio
 {

31 
iovec
 
	muio_iovec
;

32 
off_t
 
	muio_off£t
;

33 
size_t
 
	muio_ªsid
;

34 
uio_£g
 
	muio_£gÊg
;

35 
uio_rw
 
	muio_rw
;

36 
addr•a˚
 *
	muio_•a˚
;

74 
uiomove
(*
kbuf„r
, 
size_t
 
Àn
, 
uio
 *uio);

79 
uiomovezîos
(
size_t
 
Àn
, 
uio
 *uio);

84 
mk_kuio
(
uio
 *, *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
);

	@include/version.h

1 #i‚de‡
_VERSION_H_


2 
	#_VERSION_H_


	)

8 
	#BASE_VERSION
 "1.11"

	)

13 
	#GROUP_VERSION
 "0"

	)

	@include/vfs.h

1 #i‚de‡
_VFS_H_


2 
	#_VFS_H_


	)

11 
	guio
;

12 
	gdevi˚
;

13 
	gfs
;

14 
	gvnode
;

29 
vfs_£tcurdú
(
vnode
 *
dú
);

30 
vfs_˛órcurdú
();

31 
vfs_gëcurdú
(
vnode
 **
ªtdú
);

32 
vfs_sync
();

33 
vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
);

34 c⁄° *
vfs_gëdev«me
(
fs
 *fs);

47 
vfs_lookup
(*
∑th
, 
vnode
 **
ªsu…
);

48 
vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªsu…
,

49 *
buf
, 
size_t
 
buÊí
);

71 
vfs_›í
(*
∑th
, 
›íÊags
, 
vnode
 **
ªt
);

72 
vfs_˛o£
(
vnode
 *
vn
);

73 
vfs_ªadlök
(*
∑th
, 
uio
 *
d©a
);

74 
vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
);

75 
vfs_mkdú
(*
∑th
);

76 
vfs_lök
(*
ﬁd∑th
, *
√w∑th
);

77 
vfs_ªmove
(*
∑th
);

78 
vfs_rmdú
(*
∑th
);

79 
vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
);

81 
vfs_chdú
(*
∑th
);

82 
vfs_gëcwd
(
uio
 *
buf
);

133 
vfs_boŸ°øp
();

135 
vfs_öôboŸfs
();

136 
vfs_£tboŸfs
(c⁄° *
f¢ame
);

137 
vfs_˛órboŸfs
();

139 
vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
);

140 
vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs);

142 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

143 (*
mou¡func
)(*
d©a
,

144 
devi˚
 *
dev
,

145 
fs
 **
ªsu…
));

146 
	`vfs_unmou¡
(c⁄° *
dev«me
);

147 
	`vfs_unmou¡Æl
();

	@include/vm.h

1 #i‚de‡
_VM_H_


2 
	#_VM_H_


	)

4 
	~<machöe/vm.h
>

14 
	#VM_FAULT_READ
 0

	)

15 
	#VM_FAULT_WRITE
 1

	)

16 
	#VM_FAULT_READONLY
 2

	)

19 
vm_boŸ°øp
();

20 
c‹em≠_öô
();

21 
sw≠_öô
();

24 
vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
);

27 
vaddr_t
 
Æloc_k∑ges
(
≈ages
);

28 
‰ì_k∑ges
(
vaddr_t
 
addr
);

30 
	s∑ge_èbÀ_íåy
 {

31 
vaddr_t
 
	mva
;

32 
∑ddr_t
 
	m∑
;

33 
	m≈ages
;

36 
u_öt8_t
 
	mvÆid
;

37 
u_öt8_t
 
	mdúty
;

38 
u_öt8_t
 
	msw≠≥d
 ;

39 
u_öt8_t
 
	mlocked
 ;

40 
u_öt8_t
 
	mwrôóbÀ
 ;

45 
	sÆloc_°©us
 {

46 
vaddr_t
 
	mvaddr
;

47 
	m≈ages
;

52 
∑ge_èbÀ_íåy
 *
	gc‹em≠
;

53 
∑ge_èbÀ_íåy
 *
	gsw≠_hﬁdî
;

54 
Æloc_°©us
* 
	gÆloc
;

55 
bôm≠
* 
	ggbl_bmp
;

56 
bôm≠
* 
	gsw≠_bmp
;

58 
u_öt32_t
 
	gmem_°¨t
;

59 
u_öt32_t
 
	gfú°addr
, 
	gœ°addr
, 
	g‰ìaddr
;

60 
u_öt32_t
 
c‹em≠_ªmove
 (u_öt32_à
∑ddr
, 
ödex
);

61 
	gif_£tupcom∂ëe
, 
	gmax_∑ge_num
;

63 
u_öt32_t
 
c‹esw≠_ö£π
 (u_öt32_à
vaddr
, u_öt32_à
off£t
, 
≈ages
);

64 
u_öt32_t
 
c‹esw≠_ªmove
 (u_öt32_à
off£t
);

66 
pgdú_wÆk
(
vaddr_t
 
vaddr
, 
addr•a˚
 *
as
);

67 
u_öt32_t
 
gë_sögÀ_∑ge
 (u_öt32_à*
ödex
);

68 
u_öt32_t
 
±_ö£π
 (u_öt32_à
vaddr
, u_öt32_à
∑ddr
);

69 
∑ddr_t
 
gëµages
(
≈ages
);

	@include/vnode.h

1 #i‚de‡
_VNODE_H_


2 
	#_VNODE_H_


	)

4 
	guio
;

5 
	g°©
;

24 
	svnode
 {

25 
	mvn_ªfcou¡
;

26 
	mvn_›ícou¡
;

27 
lock
 *
	mvn_cou¡lock
;

29 
fs
 *
	mvn_fs
;

31 *
	mvn_d©a
;

33 c⁄° 
vnode_›s
 *
	mvn_›s
;

164 
	#VOP_MAGIC
 0xa2b3c4d5

	)

166 
	svnode_›s
 {

167 
	mv›_magic
;

169 (*
	mv›_›í
)(
vnode
 *
	mobje˘
, 
	mÊags_‰om_›í
);

170 (*
	mv›_˛o£
)(
vnode
 *
	mobje˘
);

171 (*
	mv›_ª˛aim
)(
vnode
 *
	mvnode
);

174 (*
	mv›_ªad
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

175 (*
	mv›_ªadlök
)(
vnode
 *
	mlök
, 
uio
 *
	muio
);

176 (*
	mv›_gëdúíåy
)(
vnode
 *
	mdú
, 
uio
 *
	muio
);

177 (*
	mv›_wrôe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

178 (*
	mv›_io˘l
)(
vnode
 *
	mobje˘
, 
	m›
, 
u£Ωå_t
 
	md©a
);

179 (*
	mv›_°©
)(
vnode
 *
	mobje˘
, 
°©
 *
	m°©buf
);

180 (*
	mv›_gëty≥
)(
vnode
 *
	mobje˘
, 
u_öt32_t
 *
	mªsu…
);

181 (*
	mv›_åy£ek
)(
vnode
 *
	mobje˘
, 
off_t
 
	mpos
);

182 (*
	mv›_fsync
)(
vnode
 *
	mobje˘
);

183 (*
	mv›_mm≠
)(
vnode
 *
	mfûe
 );

184 (*
	mv›_åunˇã
)(
vnode
 *
	mfûe
, 
off_t
 
	mÀn
);

185 (*
	mv›_«mefûe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

188 (*
	mv›_¸ót
)(
vnode
 *
	mdú
,

189 c⁄° *
	m«me
, 
	mex˛
,

190 
vnode
 **
	mªsu…
);

191 (*
	mv›_symlök
)(
vnode
 *
	mdú
,

192 c⁄° *
	mc⁄ã¡s
, c⁄° *
	m«me
);

193 (*
	mv›_mkdú
)(
vnode
 *
	m∑ª¡dú
,

194 c⁄° *
	m«me
);

195 (*
	mv›_lök
)(
vnode
 *
	mdú
,

196 c⁄° *
	m«me
, 
vnode
 *
	mfûe
);

197 (*
	mv›_ªmove
)(
vnode
 *
	mdú
,

198 c⁄° *
	m«me
);

199 (*
	mv›_rmdú
)(
vnode
 *
	mdú
,

200 c⁄° *
	m«me
);

202 (*
	mv›_ª«me
)(
vnode
 *
	mvn1
, c⁄° *
	m«me1
,

203 
vnode
 *
	mvn2
, c⁄° *
	m«me2
);

206 (*
	mv›_lookup
)(
vnode
 *
	mdú
,

207 *
	m∑th«me
, 
vnode
 **
	mªsu…
);

208 (*
	mv›_look∑ª¡
)(
vnode
 *
	mdú
,

209 *
	m∑th«me
, 
vnode
 **
	mªsu…
,

210 *
	mbuf
, 
size_t
 
	mÀn
);

213 
	#__VOP
(
vn
, 
sym
Ë(
	`vnode_check
(vn, #sym), (vn)->
vn_›s
->
v›_
##sym)

	)

215 
	#VOP_OPEN
(
vn
, 
Êags
Ë(
	`__VOP
(vn, 
›í
)(vn, fœgs))

	)

216 
	#VOP_CLOSE
(
vn
Ë(
	`__VOP
(vn, 
˛o£
)(vn))

	)

217 
	#VOP_RECLAIM
(
vn
Ë(
	`__VOP
(vn, 
ª˛aim
)(vn))

	)

219 
	#VOP_READ
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªad
)(vn, uio))

	)

220 
	#VOP_READLINK
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªadlök
)(vn, uio))

	)

221 
	#VOP_GETDIRENTRY
(
vn
, 
uio
Ë(
	`__VOP
(vn,
gëdúíåy
)(vn, uio))

	)

222 
	#VOP_WRITE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
wrôe
)(vn, uio))

	)

223 
	#VOP_IOCTL
(
vn
, 
code
, 
buf
Ë(
	`__VOP
(vn, 
io˘l
)(vn,code,buf))

	)

224 
	#VOP_STAT
(
vn
, 
±r
Ë(
	`__VOP
(vn, 
°©
)(vn,Öå))

	)

225 
	#VOP_GETTYPE
(
vn
, 
ªsu…
Ë(
	`__VOP
(vn, 
gëty≥
)(vn,Ñesu…))

	)

226 
	#VOP_TRYSEEK
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åy£ek
)(vn,Öos))

	)

227 
	#VOP_FSYNC
(
vn
Ë(
	`__VOP
(vn, 
fsync
)(vn))

	)

228 
	#VOP_MMAP
(
vn
 ) (
	`__VOP
(vn, 
mm≠
)(v¿ ))

	)

229 
	#VOP_TRUNCATE
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åunˇã
)(vn,Öos))

	)

230 
	#VOP_NAMEFILE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
«mefûe
)(vn, uio))

	)

232 
	#VOP_CREAT
(
vn
, 
«me
, 
ex˛
, 
ªs
Ë(
	`__VOP
(vn, 
¸ót
)(vn,Çame,Éx˛,Ñes))

	)

233 
	#VOP_SYMLINK
(
vn
, 
«me
, 
c⁄ã¡
Ë(
	`__VOP
(vn, 
symlök
)(vn,Çame, c⁄ã¡))

	)

234 
	#VOP_MKDIR
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
mkdú
)(vn,Çame))

	)

235 
	#VOP_LINK
(
vn
, 
«me
, 
vn2
Ë(
	`__VOP
(vn, 
lök
)(vn,Çame, vn2))

	)

236 
	#VOP_REMOVE
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
ªmove
)(vn,Çame))

	)

237 
	#VOP_RMDIR
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
rmdú
)(vn,Çame))

	)

238 
	#VOP_RENAME
(
vn1
,
«me1
,
vn2
,
«me2
)(
	`__VOP
(vn1,
ª«me
)(vn1,«me1,vn2,«me2))

	)

240 
	#VOP_LOOKUP
(
vn
, 
«me
, 
ªs
Ë(
	`__VOP
(vn, 
lookup
)(vn,Çame,Ñes))

	)

241 
	#VOP_LOOKPARENT
(
vn
,
nm
,
ªs
,
bf
,
 
Ë(
	`__VOP
(vn,
look∑ª¡
)(vn,nm,ªs,bf, ))

	)

246 
vnode_check
(
vnode
 *, c⁄° *
›
);

251 
vnode_ö¸ef
(
vnode
 *);

252 
vnode_de¸ef
(
vnode
 *);

254 
	#VOP_INCREF
(
vn
Ë
	`vnode_ö¸ef
(vn)

	)

255 
	#VOP_DECREF
(
vn
Ë
	`vnode_de¸ef
(vn)

	)

263 
vnode_öc›í
(
vnode
 *);

264 
vnode_dec›í
(
vnode
 *);

266 
	#VOP_INCOPEN
(
vn
Ë
	`vnode_öc›í
(vn)

	)

267 
	#VOP_DECOPEN
(
vn
Ë
	`vnode_dec›í
(vn)

	)

273 
vnode_öô
(
vnode
 *, c⁄° 
vnode_›s
 *
›s
,

274 
fs
 *fs, *
fsd©a
);

276 
	#VOP_INIT
(
vn
, 
›s
, 
fs
, 
d©a
Ë
	`vnode_öô
(vn, ops, fs, d©a)

	)

282 
vnode_kûl
(
vnode
 *);

284 
	#VOP_KILL
(
vn
Ë
	`vnode_kûl
(vn)

	)

	@include/wait.h

1 #i‚de‡
_WAIT_H_


2 
	#_WAIT_H_


	)

	@lib/array.c

4 
	~<ty≥s.h
>

5 
	~<kîn/î∫o.h
>

6 
	~<lib.h
>

7 
	~<¨øy.h
>

9 
	s¨øy
 {

10 
	mnum
;

11 
	mmax
;

12 **
	mv
;

15 
¨øy
 *

16 
	$¨øy_¸óã
()

18 
¨øy
 *
a
 = 
	`kmÆloc
((array));

19 i‡(
a
==
NULL
) {

20  
NULL
;

22 
a
->
v
 = 
NULL
;

23 
a
->
num
 = 0;

24 
a
->
max
 = 0;

25  
a
;

26 
	}
}

29 
	$¨øy_gënum
(
¨øy
 *
a
)

31  
a
->
num
;

32 
	}
}

35 
	$¨øy_gëguy
(
¨øy
 *
a
, 
ödex
)

37 
	`as£π
(
a
->
num
 <a->
max
);

38 
	`as£π
(
ödex
 >=0 && index < 
a
->
num
);

39  
a
->
v
[
ödex
];

40 
	}
}

43 
	$¨øy_¥óŒoˇã
(
¨øy
 *
a
, 
nguys
)

45 **
√wv
;

46 
i
;

47 
√wmax
 = 
a
->
max
;

49 
	`as£π
(
a
->
num
 >=0 &&á->num <a->
max
);

51 
nguys
 > 
√wmax
) {

52 
√wmax
 = (newmax+1)*2;

54 
√wv
 = 
	`kmÆloc
(
√wmax
 * (*));

55 i‡(
√wv
==
NULL
) {

56  
ENOMEM
;

58 
a
->
max
 = 
√wmax
;

59 
i
=0; i<
a
->
num
; i++Ë
√wv
[i] =á->
v
[i];

60 i‡(
a
->
v
!=
NULL
) {

61 
	`k‰ì
(
a
->
v
);

63 
a
->
v
 = 
√wv
;

65 
	}
}

68 
	$¨øy_£tsize
(
¨øy
 *
a
, 
nguys
)

70 
ªsu…
;

72 
	`as£π
(
a
->
num
 >=0 &&á->num <a->
max
);

74 i‡(
nguys
 > 
a
->
max
) {

75 
ªsu…
 = 
	`¨øy_¥óŒoˇã
(
a
, 
nguys
);

76 i‡(
ªsu…
) {

77  
ªsu…
;

80 i‡(
nguys
==0 && 
a
->
max
 > 16) {

81 
	`as£π
(
a
->
v
!=
NULL
);

82 
	`k‰ì
(
a
->
v
);

83 
a
->
v
 = 
NULL
;

84 
a
->
max
 = 0;

86 
a
->
num
 = 
nguys
;

89 
	}
}

92 
	$¨øy_£tguy
(
¨øy
 *
a
, 
ödex
, *
±r
)

94 
	`as£π
(
a
->
num
 <a->
max
);

95 
	`as£π
(
ödex
 >=0 && index < 
a
->
num
);

96 
a
->
v
[
ödex
] = 
±r
;

97 
	}
}

100 
	$¨øy_add
(
¨øy
 *
a
, *
guy
)

102 
ix
, 
ªsu…
;

104 
ix
 = 
a
->
num
;

106 
ªsu…
 = 
	`¨øy_£tsize
(
a
, 
ix
+1);

107 i‡(
ªsu…
) {

108  
ªsu…
;

111 
a
->
v
[
ix
] = 
guy
;

114 
	}
}

117 
	$¨øy_ªmove
(
¨øy
 *
a
, 
ödex
)

119 
nmove
;

121 
	`as£π
(
a
->
num
 <a->
max
);

122 
	`as£π
(
ödex
 >=0 && index < 
a
->
num
);

124 
nmove
 = 
a
->
num
 - (
ödex
 + 1);

125 
	`memmove
(
a
->
v
+
ödex
,á->v+ödex+1, 
nmove
*(*));

126 
a
->
num
--;

127 
	}
}

130 
	$¨øy_de°roy
(
¨øy
 *
a
)

132 i‡(
a
->
v
Ë
	`k‰ì
(a->v);

133 
	`k‰ì
(
a
);

134 
	}
}

	@lib/bitmap.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<kîn/î∫o.h
>

9 
	~<bôm≠.h
>

20 
	#BITS_PER_WORD
 (
CHAR_BIT
)

	)

21 
	#WORD_TYPE
 

	)

22 
	#WORD_ALLBITS
 (0xff)

	)

24 
	sbôm≠
 {

25 
u_öt32_t
 
	mnbôs
;

26 
WORD_TYPE
 *
	mv
;

30 
bôm≠
 *

31 
	$bôm≠_¸óã
(
u_öt32_t
 
nbôs
)

33 
bôm≠
 *
b
;

34 
u_öt32_t
 
w‹ds
;

36 
w‹ds
 = 
	`DIVROUNDUP
(
nbôs
, 
BITS_PER_WORD
);

37 
b
 = 
	`kmÆloc
((
bôm≠
));

38 i‡(
b
 =
NULL
) {

39  
NULL
;

41 
b
->
v
 = 
	`kmÆloc
(
w‹ds
*(
WORD_TYPE
));

42 i‡(
b
->
v
 =
NULL
) {

43 
	`k‰ì
(
b
);

44  
NULL
;

47 
	`bzîo
(
b
->
v
, 
w‹ds
*(
WORD_TYPE
));

48 
b
->
nbôs
 =Çbits;

51 i‡(
nbôs
 / 
BITS_PER_WORD
 < 
w‹ds
) {

52 
u_öt32_t
 
j
, 
ix
 = 
w‹ds
-1;

53 
u_öt32_t
 
ovîbôs
 = 
nbôs
 - 
ix
*
BITS_PER_WORD
;

55 
	`as£π
(
nbôs
 / 
BITS_PER_WORD
 =
w‹ds
-1);

56 
	`as£π
(
ovîbôs
 > 0 && ovîbô†< 
BITS_PER_WORD
);

58 
j
=
ovîbôs
; j<
BITS_PER_WORD
; j++) {

59 
b
->
v
[
ix
] |((
WORD_TYPE
)1 << 
j
);

63  
b
;

64 
	}
}

67 
	$bôm≠_gëd©a
(
bôm≠
 *
b
)

69  
b
->
v
;

70 
	}
}

73 
	$bôm≠_Æloc
(
bôm≠
 *
b
, 
u_öt32_t
 *
ödex
)

75 
u_öt32_t
 
ix
;

76 
u_öt32_t
 
maxix
 = 
	`DIVROUNDUP
(
b
->
nbôs
, 
BITS_PER_WORD
);

77 
u_öt32_t
 
off£t
;

79 
ix
=0; ix<
maxix
; ix++) {

80 i‡(
b
->
v
[
ix
]!=
WORD_ALLBITS
) {

81 
off£t
 = 0; off£à< 
BITS_PER_WORD
; offset++) {

82 
WORD_TYPE
 
mask
 = ((WORD_TYPE)1)<<
off£t
;

83 i‡((
b
->
v
[
ix
] & 
mask
)==0) {

84 
b
->
v
[
ix
] |
mask
;

85 *
ödex
 = (
ix
*
BITS_PER_WORD
)+
off£t
;

86 
	`as£π
(*
ödex
 < 
b
->
nbôs
);

90 
	`as£π
(0);

93  
ENOSPC
;

94 
	}
}

97 
ölöe


99 
	$bôm≠_å™¶©e
(
u_öt32_t
 
bôno
, u_öt32_à*
ix
, 
WORD_TYPE
 *
mask
)

101 
u_öt32_t
 
off£t
;

102 *
ix
 = 
bôno
 / 
BITS_PER_WORD
;

103 
off£t
 = 
bôno
 % 
BITS_PER_WORD
;

104 *
mask
 = ((
WORD_TYPE
)1Ë<< 
off£t
;

105 
	}
}

108 
	$bôm≠_m¨k
(
bôm≠
 *
b
, 
u_öt32_t
 
ödex
)

110 
u_öt32_t
 
ix
;

111 
WORD_TYPE
 
mask
;

112 
	`as£π
(
ödex
 < 
b
->
nbôs
);

113 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

115 
	`as£π
((
b
->
v
[
ix
] & 
mask
)==0);

117 
b
->
v
[
ix
] |
mask
;

118 
	}
}

121 
	$bôm≠_unm¨k
(
bôm≠
 *
b
, 
u_öt32_t
 
ödex
)

123 
u_öt32_t
 
ix
;

124 
WORD_TYPE
 
mask
;

125 
	`as£π
(
ödex
 < 
b
->
nbôs
);

126 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

128 
	`as£π
((
b
->
v
[
ix
] & 
mask
)!=0);

130 
b
->
v
[
ix
] &~
mask
;

131 
	}
}

135 
	$bôm≠_is£t
(
bôm≠
 *
b
, 
u_öt32_t
 
ödex
)

137 
u_öt32_t
 
ix
;

138 
WORD_TYPE
 
mask
;

139 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

141  (
b
->
v
[
ix
] & 
mask
);

142 
	}
}

145 
	$bôm≠_de°roy
(
bôm≠
 *
b
)

147 
	`k‰ì
(
b
->
v
);

148 
	`k‰ì
(
b
);

149 
	}
}

	@lib/copyinout.c

40 
	~<ty≥s.h
>

41 
	~<kîn/î∫o.h
>

42 
	~<lib.h
>

43 
	~<machöe/£tjmp.h
>

44 
	~<machöe/pcb.h
>

45 
	~<vm.h
>

46 
	~<thªad.h
>

47 
	~<cuπhªad.h
>

60 
	$c›yÁû
()

62 
	`l⁄gjmp
(
cuπhªad
->
t_pcb
.
pcb_c›yjmp
, 1);

63 
	}
}

78 
	$c›ycheck
(
c⁄°_u£Ωå_t
 
u£Ωå
, 
size_t
 
Àn
, size_à*
°›Àn
)

80 
vaddr_t
 
bŸ
, 
t›
;

82 *
°›Àn
 = 
Àn
;

84 
bŸ
 = (
vaddr_t
Ë
u£Ωå
;

85 
t›
 = 
bŸ
+
Àn
-1;

87 i‡(
t›
 < 
bŸ
) {

89  
EFAULT
;

92 i‡(
bŸ
 >
USERTOP
) {

94  
EFAULT
;

97 i‡(
t›
 >
USERTOP
) {

99 *
°›Àn
 = 
USERTOP
 - 
bŸ
;

103 
	}
}

113 
	$c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
)

115 
ªsu…
;

116 
size_t
 
°›Àn
;

118 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

119 i‡(
ªsu…
) {

120  
ªsu…
;

122 i‡(
°›Àn
 !
Àn
) {

124  
EFAULT
;

127 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
c›yÁû
;

129 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_pcb
.
pcb_c›yjmp
);

130 i‡(
ªsu…
) {

131 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

132  
EFAULT
;

135 
	`mem˝y
(
de°
, (c⁄° *)
u£r§c
, 
Àn
);

137 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

139 
	}
}

149 
	$c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
)

151 
ªsu…
;

152 
size_t
 
°›Àn
;

154 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

155 i‡(
ªsu…
) {

156  
ªsu…
;

158 i‡(
°›Àn
 !
Àn
) {

160  
EFAULT
;

163 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
c›yÁû
;

165 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_pcb
.
pcb_c›yjmp
);

166 i‡(
ªsu…
) {

167 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

168  
EFAULT
;

171 
	`mem˝y
((*)
u£rde°
, 
§c
, 
Àn
);

173 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

175 
	}
}

195 
	$c›y°r
(*
de°
, c⁄° *
§c
, 
size_t
 
maxÀn
, size_à
°›Àn
,

196 
size_t
 *
gŸÀn
)

198 
size_t
 
i
;

199 
i
=0; i<
maxÀn
 && i<
°›Àn
; i++) {

200 
de°
[
i
] = 
§c
[i];

201 i‡(
§c
[
i
]==0) {

202 i‡(
gŸÀn
 !
NULL
) {

203 *
gŸÀn
 = 
i
+1;

208 i‡(
°›Àn
 < 
maxÀn
) {

210  
EFAULT
;

212  
ENAMETOOLONG
;

213 
	}
}

224 
	$c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

226 
ªsu…
;

227 
size_t
 
°›Àn
;

229 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

230 i‡(
ªsu…
) {

231  
ªsu…
;

234 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
c›yÁû
;

236 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_pcb
.
pcb_c›yjmp
);

237 i‡(
ªsu…
) {

238 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

239  
EFAULT
;

242 
ªsu…
 = 
	`c›y°r
(
de°
, (c⁄° *)
u£r§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

244 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

245  
ªsu…
;

246 
	}
}

257 
	$c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

259 
ªsu…
;

260 
size_t
 
°›Àn
;

262 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

263 i‡(
ªsu…
) {

264  
ªsu…
;

267 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
c›yÁû
;

269 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_pcb
.
pcb_c›yjmp
);

270 i‡(
ªsu…
) {

271 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

272  
EFAULT
;

275 
ªsu…
 = 
	`c›y°r
((*)
u£rde°
, 
§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

277 
cuπhªad
->
t_pcb
.
pcb_badÁu…func
 = 
NULL
;

278  
ªsu…
;

279 
	}
}

	@lib/kgets.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

11 
	$back•
()

13 
	`putch
('\b');

14 
	`putch
(' ');

15 
	`putch
('\b');

16 
	}
}

24 
	$kgës
(*
buf
, 
size_t
 
maxÀn
)

26 
size_t
 
pos
 = 0;

27 
ch
;

30 
ch
 = 
	`gëch
();

31 i‡(
ch
=='\n' || ch=='\r') {

32 
	`putch
('\n');

37 i‡(
ch
>=32 && ch<127 && 
pos
 < 
maxÀn
 - 1) {

38 
	`putch
(
ch
);

39 
buf
[
pos
++] = 
ch
;

41 i‡((
ch
=='\b' || ch==127Ë&& 
pos
>0) {

43 
	`back•
();

44 
pos
--;

46 i‡(
ch
==3) {

48 
	`putch
('^');

49 
	`putch
('C');

50 
	`putch
('\n');

51 
pos
 = 0;

54 i‡(
ch
==18) {

56 
buf
[
pos
] = 0;

57 
	`k¥ötf
("^R\n%s", 
buf
);

59 i‡(
ch
==21) {

61 
pos
 > 0) {

62 
	`back•
();

63 
pos
--;

66 i‡(
ch
==23) {

68 
pos
 > 0 && 
buf
[pos-1]==' ') {

69 
	`back•
();

70 
pos
--;

72 
pos
 > 0 && 
buf
[pos-1]!=' ') {

73 
	`back•
();

74 
pos
--;

78 i‡(
ch
==4) {

79 
	`k¥ötf
("end of file was found\n");

82 
	`bìp
();

86 
buf
[
pos
] = 0;

87 
	}
}

	@lib/kheap.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<vm.h
>

4 
	~<machöe/•l.h
>

8 
	$fûl_dódbìf
(*
v±r
, 
size_t
 
Àn
)

10 
u_öt32_t
 *
±r
 = 
v±r
;

11 
size_t
 
i
;

13 
i
=0; i<
Àn
/(
u_öt32_t
); i++) {

14 
±r
[
i
] = 0xdeadbeef;

16 
	}
}

45 #unde‡
SLOW


46 #unde‡
SLOWER


50 #i‡
PAGE_SIZE
 == 4096

52 
	#NSIZES
 8

	)

53 c⁄° 
size_t
 
	gsizes
[
NSIZES
] = { 16, 32, 64, 128, 256, 512, 1024, 2048 };

55 
	#SMALLEST_SUBPAGE_SIZE
 16

	)

56 
	#LARGEST_SUBPAGE_SIZE
 2048

	)

58 #ñi‡
PAGE_SIZE
 == 8192

66 
	s‰ìli°
 {

67 
‰ìli°
 *
	m√xt
;

70 
	s∑gîef
 {

71 
∑gîef
 *
	m√xt_ßmesize
;

72 
∑gîef
 *
	m√xt_Æl
;

73 
vaddr_t
 
	m∑góddr_™d_blockty≥
;

74 
u_öt16_t
 
	m‰ìli°_off£t
;

75 
u_öt16_t
 
	mn‰ì
;

78 
	#INVALID_OFFSET
 (0xffff)

	)

80 
	#PR_PAGEADDR
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & 
PAGE_FRAME
)

	)

81 
	#PR_BLOCKTYPE
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & ~
PAGE_FRAME
)

	)

82 
	#MKPAB
(
∑
, 
blk
Ë((’a)&
PAGE_FRAME
Ë| ((blkË& ~PAGE_FRAME))

	)

104 
	#NPAGEREFS
 (
PAGE_SIZE
 / (
∑gîef
))

	)

105 
∑gîef
 
	g∑gîefs
[
NPAGEREFS
];

107 
	#INUSE_WORDS
 (
NPAGEREFS
/32)

	)

108 
u_öt32_t
 
	g∑gîefs_öu£
[
INUSE_WORDS
];

111 
∑gîef
 *

112 
	$Ælo˝agîef
()

114 
i
,
j
;

115 
u_öt32_t
 
k
;

117 
i
=0; i<
INUSE_WORDS
; i++) {

118 i‡(
∑gîefs_öu£
[
i
]==0xffffffff) {

122 
k
=1,
j
=0; k!=0; k<<=1,j++) {

123 i‡((
∑gîefs_öu£
[
i
] & 
k
)==0) {

124 
∑gîefs_öu£
[
i
] |
k
;

125  &
∑gîefs
[
i
*32 + 
j
];

128 
	`as£π
(0);

132  
NULL
;

133 
	}
}

137 
	$‰ì∑gîef
(
∑gîef
 *
p
)

139 
size_t
 
i
, 
j
;

140 
u_öt32_t
 
k
;

142 
j
 = 
p
-
∑gîefs
;

143 
	`as£π
(
j
 < 
NPAGEREFS
);

144 
i
 = 
j
/32;

145 
k
 = ((
u_öt32_t
)1Ë<< (
j
%32);

146 
	`as£π
((
∑gîefs_öu£
[
i
] & 
k
) != 0);

147 
∑gîefs_öu£
[
i
] &~
k
;

148 
	}
}

152 
∑gîef
 *
	gsizeba£s
[
NSIZES
];

153 
∑gîef
 *
	gÆlba£
;

158 #ifde‡
SLOWER


159 #i‚de‡
SLOW


160 
	#SLOW


	)

164 #ifde‡
SLOW


167 
	$checksub∑ge
(
∑gîef
 *
¥
)

169 
vaddr_t
 
¥∑ge
, 
Êa
;

170 
‰ìli°
 *
Ê
;

171 
blkty≥
;

172 
n‰ì
=0;

174 
	`as£π
(
cur•l
>0);

176 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

177 
	`as£π
(
¥
->
n‰ì
==0);

181 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

182 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

184 
	`as£π
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

185 
	`as£π
(
¥
->
‰ìli°_off£t
 % 
sizes
[
blkty≥
] == 0);

187 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

188 
Ê
 = (
‰ìli°
 *)
Êa
;

190 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

191 
Êa
 = (
vaddr_t
)
Ê
;

192 
	`as£π
(
Êa
 >
¥∑ge
 && fœ <ÖΩagê+ 
PAGE_SIZE
);

193 
	`as£π
((
Êa
-
¥∑ge
Ë% 
sizes
[
blkty≥
] == 0);

194 
	`as£π
(
Êa
 >
MIPS_KSEG0
);

195 
	`as£π
(
Êa
 < 
MIPS_KSEG1
);

196 
n‰ì
++;

198 
	`as£π
(
n‰ì
==
¥
->nfree);

199 
	}
}

201 
	#checksub∑ge
(
¥
Ë(()’r))

	)

204 #ifde‡
SLOWER


207 
	$checksub∑ges
()

209 
∑gîef
 *
¥
;

210 
i
;

211 
sc
=0, 
ac
=0;

213 
	`as£π
(
cur•l
>0);

215 
i
=0; i<
NSIZES
; i++) {

216 
¥
 = 
sizeba£s
[
i
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

217 
	`checksub∑ge
(
¥
);

218 
	`as£π
(
sc
 < 
NPAGEREFS
);

219 
sc
++;

223 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

224 
	`checksub∑ge
(
¥
);

225 
	`as£π
(
ac
 < 
NPAGEREFS
);

226 
ac
++;

229 
	`as£π
(
sc
==
ac
);

230 
	}
}

232 
	#checksub∑ges
()

	)

239 
	$dumpsub∑ge
(
∑gîef
 *
¥
)

241 
vaddr_t
 
¥∑ge
, 
Êa
;

242 
‰ìli°
 *
Ê
;

243 
blkty≥
;

244 
i
, 
n
, 
ödex
;

245 
u_öt32_t
 
‰ìm≠
[
PAGE_SIZE
 / (
SMALLEST_SUBPAGE_SIZE
*32)];

247 
	`checksub∑ge
(
¥
);

248 
	`as£π
(
cur•l
>0);

251 
i
=0; i<(
‰ìm≠
)/(freemap[0]); i++) {

252 
‰ìm≠
[
i
] = 0;

255 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

256 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

259 
n
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

260 
	`as£π
(
n
 <32*(
‰ìm≠
)/(freemap[0]));

262 i‡(
¥
->
‰ìli°_off£t
 !
INVALID_OFFSET
) {

263 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

264 
Ê
 = (
‰ìli°
 *)
Êa
;

266 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

267 
Êa
 = (
vaddr_t
)
Ê
;

268 
ödex
 = (
Êa
-
¥∑ge
Ë/ 
sizes
[
blkty≥
];

269 
	`as£π
(
ödex
<
n
);

270 
‰ìm≠
[
ödex
/32] |= (1<<(index%32));

274 
	`k¥ötf
("at 0x%08lx: size %-4lu %u/%u free\n",

275 ()
¥∑ge
, (Ë
sizes
[
blkty≥
],

276 (Ë
¥
->
n‰ì
, 
n
);

277 
	`k¥ötf
(" ");

278 
i
=0; i<
n
; i++) {

279 
vÆ
 = (
‰ìm≠
[
i
/32] & (1<<(i%32)))!=0;

280 
	`k¥ötf
("%c", 
vÆ
 ? '.' : '*');

281 i‡(
i
%64==63 && i<
n
-1) {

282 
	`k¥ötf
("\n ");

285 
	`k¥ötf
("\n");

286 
	}
}

289 
	$khóp_¥öt°©s
()

291 
∑gîef
 *
¥
;

294 
•l
 = 
	`•lhigh
();

296 
	`k¥ötf
("Subpageállocator status:\n");

298 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

299 
	`dumpsub∑ge
(
¥
);

302 
	`•lx
(
•l
);

303 
	}
}

309 
	$ªmove_li°s
(
∑gîef
 *
¥
, 
blkty≥
)

311 
∑gîef
 **
guy
;

313 
	`as£π
(
blkty≥
>=0 && blkty≥<
NSIZES
);

315 
guy
 = &
sizeba£s
[
blkty≥
]; *guy; guy = &(*guy)->
√xt_ßmesize
) {

316 
	`checksub∑ge
(*
guy
);

317 i‡(*
guy
 =
¥
) {

318 *
guy
 = 
¥
->
√xt_ßmesize
;

323 
guy
 = &
Ælba£
; *guy; guy = &(*guy)->
√xt_Æl
) {

324 
	`checksub∑ge
(*
guy
);

325 i‡(*
guy
 =
¥
) {

326 *
guy
 = 
¥
->
√xt_Æl
;

330 
	}
}

333 
ölöe


334 
	$blockty≥
(
size_t
 
sz
)

336 
i
;

337 
i
=0; i<
NSIZES
; i++) {

338 i‡(
sz
 <
sizes
[
i
]) {

339  
i
;

343 
	`∑nic
("Subpageállocator cannot handleállocation of size %lu\n",

344 ()
sz
);

348 
	}
}

352 
	$sub∑ge_kmÆloc
(
size_t
 
sz
)

354 
•l
;

355 
blkty≥
;

356 
∑gîef
 *
¥
;

357 
vaddr_t
 
¥∑ge
;

358 
vaddr_t
 
Êa
;

359 
‰ìli°
 *vﬁ©ûê
Ê
;

360 *
ªçå
;

362 vﬁ©ûê
i
;

365 
blkty≥
 = 
	`blockty≥
(
sz
);

366 
sz
 = 
sizes
[
blkty≥
];

368 
•l
 = 
	`•lhigh
();

370 
	`checksub∑ges
();

372 
¥
 = 
sizeba£s
[
blkty≥
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

375 
	`as£π
(
	`PR_BLOCKTYPE
(
¥
Ë=
blkty≥
);

376 
	`checksub∑ge
(
¥
);

378 i‡(
¥
->
n‰ì
 > 0) {

380 
dﬂŒoc
:

382 
	`as£π
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

383 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

384 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

385 
Ê
 = (
‰ìli°
 *)
Êa
;

387 
ªçå
 = 
Ê
;

388 
Ê
 = fl->
√xt
;

389 
¥
->
n‰ì
--;

391 i‡(
Ê
 !
NULL
) {

392 
	`as£π
(
¥
->
n‰ì
 > 0);

393 
Êa
 = (
vaddr_t
)
Ê
;

394 
	`as£π
(
Êa
 - 
¥∑ge
 < 
PAGE_SIZE
);

395 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

398 
	`as£π
(
¥
->
n‰ì
 == 0);

399 
¥
->
‰ìli°_off£t
 = 
INVALID_OFFSET
;

402 
	`checksub∑ges
();

404 
	`•lx
(
•l
);

405  
ªçå
;

414 
¥
 = 
	`Ælo˝agîef
();

415 i‡(
¥
==
NULL
) {

417 
	`•lx
(
•l
);

418 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getÖageref\n");

419  
NULL
;

422 
¥∑ge
 = 
	`Æloc_k∑ges
(1);

423 i‡(
¥∑ge
==0) {

425 
	`‰ì∑gîef
(
¥
);

426 
	`•lx
(
•l
);

427 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getáÖage\n");

428  
NULL
;

431 
¥
->
∑góddr_™d_blockty≥
 = 
	`MKPAB
(
¥∑ge
, 
blkty≥
);

432 
¥
->
n‰ì
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

440 
Êa
 = 
¥∑ge
;

441 
Ê
 = (
‰ìli°
 *)
Êa
;

442 
Ê
->
√xt
 = 
NULL
;

443 
i
=1; i<
¥
->
n‰ì
; i++) {

444 
Ê
 = (
‰ìli°
 *)(
Êa
 + 
i
*
sizes
[
blkty≥
]);

445 
Ê
->
√xt
 = (
‰ìli°
 *)(
Êa
 + (
i
-1)*
sizes
[
blkty≥
]);

446 
	`as£π
(
Ê
 !Ê->
√xt
);

448 
Êa
 = (
vaddr_t
Ë
Ê
;

449 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

450 
	`as£π
(
¥
->
‰ìli°_off£t
 =’r->
n‰ì
-1)*
sizes
[
blkty≥
]);

452 
¥
->
√xt_ßmesize
 = 
sizeba£s
[
blkty≥
];

453 
sizeba£s
[
blkty≥
] = 
¥
;

455 
¥
->
√xt_Æl
 = 
Ælba£
;

456 
Ælba£
 = 
¥
;

459 
dﬂŒoc
;

460 
	}
}

464 
	$sub∑ge_k‰ì
(*
±r
)

466 
•l
;

467 
blkty≥
;

468 
vaddr_t
 
±øddr
;

469 
∑gîef
 *
¥
;

470 
vaddr_t
 
¥∑ge
;

471 
vaddr_t
 
Êa
;

472 
‰ìli°
 *
Ê
;

473 
vaddr_t
 
off£t
;

475 
±øddr
 = (
vaddr_t
)
±r
;

477 
•l
 = 
	`•lhigh
();

479 
	`checksub∑ges
();

481 
¥
 = 
Ælba£
;Ör;Ö∏¥->
√xt_Æl
) {

482 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

483 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

486 
	`as£π
(
blkty≥
>=0 && blkty≥<
NSIZES
);

487 
	`checksub∑ge
(
¥
);

489 i‡(
±øddr
 >
¥∑ge
 &&Öåadd∏<ÖΩagê+ 
PAGE_SIZE
) {

494 i‡(
¥
==
NULL
) {

496 
	`•lx
(
•l
);

500 
off£t
 = 
±øddr
 - 
¥∑ge
;

503 i‡(
off£t
 >
PAGE_SIZE
 || off£à% 
sizes
[
blkty≥
] != 0) {

504 
	`∑nic
("k‰ì: sub∑gê‰ì o‡övÆidádd∏%p\n", 
±r
);

511 
	`fûl_dódbìf
(
±r
, 
sizes
[
blkty≥
]);

518 
Êa
 = 
¥∑ge
 + 
off£t
;

519 
Ê
 = (
‰ìli°
 *)
Êa
;

520 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

521 
Ê
->
√xt
 = 
NULL
;

523 
Ê
->
√xt
 = (
‰ìli°
 *)(
¥∑ge
 + 
¥
->
‰ìli°_off£t
);

525 
¥
->
‰ìli°_off£t
 = 
off£t
;

526 
¥
->
n‰ì
++;

528 
	`as£π
(
¥
->
n‰ì
 <
PAGE_SIZE
 / 
sizes
[
blkty≥
]);

529 i‡(
¥
->
n‰ì
 =
PAGE_SIZE
 / 
sizes
[
blkty≥
]) {

531 
	`ªmove_li°s
(
¥
, 
blkty≥
);

532 
	`‰ì_k∑ges
(
¥∑ge
);

533 
	`‰ì∑gîef
(
¥
);

536 
	`checksub∑ges
();

538 
	`•lx
(
•l
);

540 
	}
}

546 
	$kmÆloc
(
size_t
 
sz
)

548 i‡(
sz
>=
LARGEST_SUBPAGE_SIZE
) {

549 
≈ages
;

550 
vaddr_t
 
addªss
;

553 
≈ages
 = (
sz
 + 
PAGE_SIZE
 - 1)/PAGE_SIZE;

554 
addªss
 = 
	`Æloc_k∑ges
(
≈ages
);

555 i‡(
addªss
==0) {

556  
NULL
;

559  (*)
addªss
;

562  
	`sub∑ge_kmÆloc
(
sz
);

563 
	}
}

566 
	$k‰ì
(*
±r
)

571 i‡(
±r
 =
NULL
) {

573 } i‡(
	`sub∑ge_k‰ì
(
±r
)) {

574 
	`as£π
((
vaddr_t
)
±r
%
PAGE_SIZE
==0);

575 
	`‰ì_k∑ges
((
vaddr_t
)
±r
);

577 
	}
}

	@lib/kprintf.c

1 
	~<ty≥s.h
>

2 
	~<°d¨g.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<lib.h
>

5 
	~<synch.h
>

6 
	~<vfs.h
>

7 
	~<thªad.h
>

8 
	~<machöe/pcb.h
>

9 
	~<machöe/•l.h
>

12 
u_öt32_t
 
	gdbÊags
 = 0;

15 
lock
 *
	gk¥ötf_lock
;

26 
	$c⁄sﬁe_£nd
(*
junk
, c⁄° *
d©a
, 
size_t
 
Àn
)

28 
size_t
 
i
;

30 ()
junk
;

32 
i
=0; i<
Àn
; i++) {

33 
	`putch
(
d©a
[
i
]);

35 
	}
}

39 
	$k¥ötf_boŸ°øp
()

41 
	`as£π
(
k¥ötf_lock
 =
NULL
);

43 
k¥ötf_lock
 = 
	`lock_¸óã
("kprintf_lock");

44 i‡(
k¥ötf_lock
 =
NULL
) {

45 
	`∑nic
("CouldÇot create kprintfÜock\n");

47 
	}
}

51 
	$k¥ötf
(c⁄° *
fmt
, ...)

53 
ch¨s
;

54 
va_li°
 
≠
;

56 i‡(
k¥ötf_lock
 !
NULL
 && !
ö_öãºu±
 && 
cur•l
==0) {

57 
	`lock_acquúe
(
k¥ötf_lock
);

60 
	`va_°¨t
(
≠
, 
fmt
);

61 
ch¨s
 = 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

62 
	`va_íd
(
≠
);

64 i‡(
k¥ötf_lock
 !
NULL
 && !
ö_öãºu±
 && 
cur•l
==0) {

65 
	`lock_ªÀa£
(
k¥ötf_lock
);

68  
ch¨s
;

69 
	}
}

77 
	$∑nic
(c⁄° *
fmt
, ...)

79 
va_li°
 
≠
;

92 vﬁ©ûê
evû
;

94 i‡(
evû
==0) {

95 
evû
 = 1;

103 
	`•lhigh
();

106 i‡(
evû
==1) {

107 
evû
 = 2;

109 
	`thªad_∑nic
();

112 i‡(
evû
==2) {

113 
evû
 = 3;

115 
	`k¥ötf
("panic: ");

116 
	`va_°¨t
(
≠
, 
fmt
);

117 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

118 
	`va_íd
(
≠
);

121 i‡(
evû
==3) {

122 
evû
 = 4;

124 
	`vfs_sync
();

127 i‡(
evû
==4) {

128 
evû
 = 5;

130 
	`md_∑nic
();

138 
	}
}

	@lib/misc.c

1 
	~<ty≥s.h
>

2 
	~<kîn/îrmsg.h
>

3 
	~<lib.h
>

9 
	$k°rdup
(c⁄° *
s
)

11 *
z
 = 
	`kmÆloc
(
	`°æí
(
s
)+1);

12 i‡(
z
==
NULL
) {

13  
NULL
;

15 
	`°r˝y
(
z
, 
s
);

16  
z
;

17 
	}
}

24 
	$°ªº‹
(
îrcode
)

26 i‡(
îrcode
>=0 &&Éºcodê< 
sys_√º
) {

27  
sys_îæi°
[
îrcode
];

29 
	`∑nic
("InvÆidÉº‹ codê%d\n", 
îrcode
);

30  
NULL
;

31 
	}
}

	@lib/ntoh.c

17 
	~<ty≥s.h
>

18 
	~<lib.h
>

20 #ifde‡
_LITTLE_ENDIAN


22 
	#SWAPFUNCS
(
size
, 
ty≥
) \

23 
ty≥
 \

24 
¡oh
##
	`size
(vﬁ©ûê
ty≥
 
vÆ
) \

26 vﬁ©ûê
ty≥
 
rv
; \

27 vﬁ©ûê*
§c
, *
de°
; \

28 
i
; \

29 
§c
 = (*)&
vÆ
; \

30 
de°
 = (*)&
rv
; \

31 
i
=0; i<(
rv
); i++) { \

32 
de°
[
i
] = 
§c
[(
rv
)-i-1]; \

34  
rv
; \

38 
ty≥
 \

39 
ht⁄
##
	`size
(
ty≥
 
vÆ
) \

41  
¡oh
##
	`size
(
vÆ
); \

42 }

	)

50 #ifde‡
_BIG_ENDIAN


52 
	#SWAPFUNCS
(
size
, 
ty≥
) \

53 
ty≥
 
¡oh
##
	`size
—y≥ 
vÆ
) {  val; } \

54 
ty≥
 
ht⁄
##
	`size
—y≥ 
vÆ
Ë{  vÆ; }

	)

58 #i‚de‡
SWAPFUNCS


62 
	$SWAPFUNCS
(
s
, 
u_öt16_t
)

63 
	$SWAPFUNCS
(
l
, 
u_öt32_t
)

64 
	`SWAPFUNCS
(
Œ
, 
u_öt64_t
)

	@lib/queue.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<lib.h
>

8 
	~<queue.h
>

10 
	squeue
 {

11 
	msize
;

12 
	m√xtwrôe
;

13 
	m√xåód
;

14 **
	md©a
;

19 
	$q_grow
(
queue
 *
q
, 
èrgësize
)

21 **
ﬁdd©a
 = 
q
->
d©a
;

22 
⁄r
 = 
q
->
√xåód
;

23 
⁄w
 = 
q
->
√xtwrôe
;

24 
osize
 = 
q
->
size
;

26 
nsize
;

27 **
nd©a
;

29 
i
, 
ªsu…
;

31 
nsize
 = 
q
->
size
;

32 
nsize
 < 
èrgësize
) {

33 
nsize
 *= 2;

35 
	`as£π
(
nsize
 > 0);

37 
nd©a
 = 
	`kmÆloc
(
nsize
 * (*));

38 i‡(
nd©a
 =
NULL
) {

39  
ENOMEM
;

41 
q
->
size
 = 
nsize
;

42 
q
->
d©a
 = 
nd©a
;

43 
q
->
√xåód
 = q->
√xtwrôe
 = 0;

45 
i
=
⁄r
; i!=
⁄w
; i = (i+1)%
osize
) {

46 
ªsu…
 = 
	`q_addèû
(
q
, 
ﬁdd©a
[
i
]);

47 
	`as£π
(
ªsu…
==0);

49 
	`k‰ì
(
ﬁdd©a
);

51 
	}
}

53 
queue
 *

54 
	$q_¸óã
(
size
)

56 
queue
 *
q
 = 
	`kmÆloc
((queue));

57 i‡(
q
==
NULL
) {

58  
NULL
;

60 
q
->
size
 = size;

61 
q
->
d©a
 = 
	`kmÆloc
(
size
 * (*));

62 i‡(
q
->
d©a
==
NULL
) {

63 
	`k‰ì
(
q
);

64  
NULL
;

66 
q
->
√xåód
 = q->
√xtwrôe
 = 0;

67  
q
;

68 
	}
}

71 
	$q_¥óŒoˇã
(
queue
 *
q
, 
size
)

73 
ªsu…
 = 0;

75 
	`as£π
(
q
->
size
 > 0);

77 i‡(
size
 > 
q
->size) {

78 
ªsu…
 = 
	`q_grow
(
q
, 
size
);

80  
ªsu…
;

81 
	}
}

83 
ölöe


85 
	$q_em±y
(
queue
 *
q
)

87  
q
->
√xtwrôe
 =q->
√xåód
;

88 
	}
}

91 
	$q_addèû
(
queue
 *
q
, *
±r
)

93 
√xäext
, 
ªsu…
;

95 
	`as£π
(
q
->
size
 > 0);

97 
√xäext
 = (
q
->
√xtwrôe
+1Ë% q->
size
;

98 i‡(
√xäext
==
q
->
√xåód
) {

99 
ªsu…
 = 
	`q_grow
(
q
, q->
size
+1);

100 i‡(
ªsu…
) {

101  
ªsu…
;

103 
√xäext
 = (
q
->
√xtwrôe
+1Ë% q->
size
;

105 
q
->
d©a
[q->
√xtwrôe
] = 
±r
;

106 
q
->
√xtwrôe
 = 
√xäext
;

108 
	}
}

111 
	$q_ªmhód
(
queue
 *
q
)

113 *
ªt
;

115 
	`as£π
(
q
->
size
 > 0);

117 
	`as£π
(!
	`q_em±y
(
q
));

118 
ªt
 = 
q
->
d©a
[q->
√xåód
];

119 
q
->
√xåód
 = (q->√xåód+1)%q->
size
;

120  
ªt
;

121 
	}
}

124 
	$q_de°roy
(
queue
 *
q
)

126 
	`as£π
(
	`q_em±y
(
q
));

127 
	`k‰ì
(
q
->
d©a
);

128 
	`k‰ì
(
q
);

129 
	}
}

132 
	$q_gë°¨t
(
queue
 *
q
)

134  
q
->
√xåód
;

135 
	}
}

138 
	$q_gëíd
(
queue
 *
q
)

140  
q
->
√xtwrôe
;

141 
	}
}

144 
	$q_gësize
(
queue
 *
q
)

146  
q
->
size
;

147 
	}
}

150 
	$q_gëguy
(
queue
 *
q
, 
ödex
)

155 
	`as£π
(
ödex
>=0 && index<
q
->
size
);

156  
q
->
d©a
[
ödex
];

157 
	}
}

	@main/hello.c

1 
	~<hñlo.h
>

3 
	$hñlo
 () {

5 
	}
}

	@main/main.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<kîn/uni°d.h
>

8 
	~<machöe/•l.h
>

9 
	~<ã°.h
>

10 
	~<addr•a˚.h
>

11 
	~<synch.h
>

12 
	~<thªad.h
>

13 
	~<å≠‰ame.h
>

14 
	~<scheduÀr.h
>

15 
	~<dev.h
>

16 
	~<vfs.h
>

17 
	~<vm.h
>

18 
	~<sysˇŒ.h
>

19 
	~<vîsi⁄.h
>

20 
	~<hñlo.h
>

21 
	~<lib.h
>

22 
	~<cuπhªad.h
>

23 
	~<f‹k.h
>

35 c⁄° 
buûdvîsi⁄
;

36 c⁄° 
buûdc⁄fig
[];

41 c⁄° 
	gh¨v¨d_c›yright
[] =

51 
	$boŸ
()

70 
	`k¥ötf
("\n");

71 
	`k¥ötf
("OS/161 ba£ sy°em vîsi⁄ %s\n", 
BASE_VERSION
);

72 
	`k¥ötf
("%s", 
h¨v¨d_c›yright
);

73 
	`k¥ötf
("\n");

75 
	`k¥ötf
("Danánd Fil's superáwesome system version %s (%s #%d)\n",

76 
GROUP_VERSION
, 
buûdc⁄fig
, 
buûdvîsi⁄
);

77 
	`k¥ötf
("\n");

79 
	`øm_boŸ°øp
();

80 
	`scheduÀr_boŸ°øp
();

81 
	`thªad_boŸ°øp
();

82 
	`vfs_boŸ°øp
();

83 
	`dev_boŸ°øp
();

84 
	`vm_boŸ°øp
();

85 
	`k¥ötf_boŸ°øp
();

90 
	`vfs_£tboŸfs
("emu0");

96 
	`as£π
((
u£Ωå_t
)==(*));

97 
	`as£π
((*(
u£Ωå_t
)0)==());

98 
	}
}

105 
	$shutdown
()

108 
	`k¥ötf
("Shutting down.\n");

110 
	`vfs_˛órboŸfs
();

111 
	`vfs_˛órcurdú
();

112 
	`vfs_unmou¡Æl
();

114 
	`•lhigh
();

116 
	`scheduÀr_shutdown
();

117 
	`thªad_shutdown
();

118 
	}
}

130 
	$sys_ªboŸ
(
code
)

132 
code
) {

133 
RB_REBOOT
:

134 
RB_HALT
:

135 
RB_POWEROFF
:

138  
EINVAL
;

141 
	`shutdown
();

143 
code
) {

144 
RB_HALT
:

145 
	`k¥ötf
("The system is halted.\n");

146 
	`md_hÆt
();

148 
RB_REBOOT
:

149 
	`k¥ötf
("Rebooting...\n");

150 
	`md_ªboŸ
();

152 
RB_POWEROFF
:

153 
	`k¥ötf
("The system is halted.\n");

154 
	`md_powîoff
();

158 
	`∑nic
("reboot operation failed\n");

160 
	}
}

164 
	$sys_ªadch¨
()

166 
ch
;

167 
ch
 = 
	`gëch
();

168 i‡(
ch
=='\n' || ch=='\r') {

171 i‡(
ch
>=32 && ch<127) {

172  
ch
;

174 i‡(
ch
==4) {

180  
ch
;

181 
	}
}

189 
	$kmaö
(*
¨gumíts
)

191 
	`boŸ
();

192 
	`hñlo
();

194 
	`míu
(
¨gumíts
);

198 
	}
}

	@main/menu.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<kîn/uni°d.h
>

8 
	~<kîn/limôs.h
>

9 
	~<lib.h
>

10 
	~<˛ock.h
>

11 
	~<thªad.h
>

12 
	~<sysˇŒ.h
>

13 
	~<uio.h
>

14 
	~<vfs.h
>

15 
	~<sfs.h
>

16 
	~<ã°.h
>

17 
	~"›t-synch¥obs.h
"

18 
	~"›t-sfs.h
"

19 
	~"›t-√t.h
"

20 
	~<machöe/•l.h
>

21 
	~<addr•a˚.h
>

22 
	~<synch.h
>

23 
	~<å≠‰ame.h
>

24 
	~<scheduÀr.h
>

25 
	~<dev.h
>

26 
	~<vm.h
>

27 
	~<cuπhªad.h
>

28 
	~<f‹k.h
>

31 
	#_PATH_SHELL
 "/bö/sh"

	)

33 
	#MAXMENUARGS
 16

	)

36 
	$gëöãrvÆ
(
time_t
 
s1
, 
u_öt32_t
 
ns1
,Åime_à
s2
, u_öt32_à
ns2
,

37 
time_t
 *
rs
, 
u_öt32_t
 *
∫s
)

39 i‡(
ns2
 < 
ns1
) {

40 
ns2
 += 1000000000;

41 
s2
--;

44 *
∫s
 = 
ns2
 - 
ns1
;

45 *
rs
 = 
s2
 - 
s1
;

46 
	}
}

65 
	$cmd_¥ogthªad
(**
±r
, 
«rgs
)

67 **
¨gs
 = 
±r
;

68 
¥og«me
[128];

69 
ªsu…
;

71 
	`as£π
(
«rgs
 >= 1);

74 
	`as£π
(
	`°æí
(
¨gs
[0]Ë< (
¥og«me
));

76 
	`°r˝y
(
¥og«me
, 
¨gs
[0]);

78 
ªsu…
 = 
	`ru≈rogøm
(
¥og«me
, 
«rgs
, 
¨gs
);

79 i‡(
ªsu…
) {

80 
	`k¥ötf
("Ru¬ögÖrogøm %†Áûed: %s\n", 
¨gs
[0],

81 
	`°ªº‹
(
ªsu…
));

86 
	}
}

102 
	$comm⁄_¥og
(
«rgs
, **
¨gs
)

104 
ªsu…
, 
exôcode
;

106 #i‡
OPT_SYNCHPROBS


107 
	`k¥ötf
("Warning:ÅhisÖrobably won't work withá "

111 
thªad
 *
chûd_±r
 = 
NULL
;

113 
ªsu…
 = 
	`thªad_f‹k
(
¨gs
[0] ,

114 
¨gs
 , 
«rgs
 ,

115 
cmd_¥ogthªad
, &
chûd_±r
);

117 i‡(
ªsu…
) {

118 
	`k¥ötf
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

119  
ªsu…
;

123 i‡(
pid_lock
 =
NULL
)

124 
pid_lock
 = 
	`lock_¸óã
("pid");

126 
	`lock_acquúe
(
pid_lock
);

128 
chûd_±r
->
pid
 = 
	`gë_√wpid
();

130 
pid_li°
 *
√w_pid
;

131 
√w_pid
 = 
	`pidli°_¸óã
(
chûd_±r
->
pid
);

132 i‡(
√w_pid
 =
NULL
){

136 
pid_li°
 *
cuºít
 = 
pidli°
;

138 i‡(
cuºít
 =
NULL
){

139 
cuºít
 = 
√w_pid
;

141 
cuºít
->
√xt
 !
NULL
){

142 
cuºít
 = cuºít->
√xt
;

144 
cuºít
->
√xt
 = 
√w_pid
;

147 
	`lock_ªÀa£
(
pid_lock
);

149 
	`thªad_joö
(
chûd_±r
, &
exôcode
);

152 
	}
}

159 
	$cmd_¥og
(
«rgs
, **
¨gs
)

161 i‡(
«rgs
 < 2) {

162 
	`k¥ötf
("Usage:ÖÖrogram [arguments]\n");

163  
EINVAL
;

167 
¨gs
++;

168 
«rgs
--;

170  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

171 
	}
}

178 
	$cmd_shñl
(
«rgs
, **
¨gs
)

180 ()
¨gs
;

181 i‡(
«rgs
 != 1) {

182 
	`k¥ötf
("Usage: s\n");

183  
EINVAL
;

186 
¨gs
[0] = (*)
_PATH_SHELL
;

188  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

189 
	}
}

196 
	$cmd_chdú
(
«rgs
, **
¨gs
)

198 i‡(
«rgs
 != 2) {

199 
	`k¥ötf
("Usage: cd directory\n");

200  
EINVAL
;

203  
	`vfs_chdú
(
¨gs
[1]);

204 
	}
}

214 
	$cmd_df
(
«rgs
, **
¨gs
)

216 i‡–(
«rgs
 !3Ë|| (
	`©oi
(
¨gs
[1]) < 1) || (atoi(args[1]) > 12) )

217 
	`k¥ötf
("Usage: dfÇr on/off\n");

219 
ãmp
 = 1, 
i
 = 1;

220 
i
 = 1; i < 
	`©oi
(
¨gs
[1]); i ++)

221 
ãmp
 =Åemp * 2;

223 i‡(
	`°rcmp
(
¨gs
[2], "on") == 0)

224 
dbÊags
 = dbÊag†| 
ãmp
;

225 i‡(
	`°rcmp
(
¨gs
[2], "off") == 0)

226 
dbÊags
 = dbÊag†& ~
ãmp
;

228 
	`k¥ötf
("Usage: dfÇr on/off\n");

231 
	}
}

239 
	$cmd_pwd
(
«rgs
, **
¨gs
)

241 
buf
[
PATH_MAX
+1];

242 
uio
 
ku
;

243 
ªsu…
;

245 ()
«rgs
;

246 ()
¨gs
;

248 
	`mk_kuio
(&
ku
, 
buf
, (buf)-1, 0, 
UIO_READ
);

249 
ªsu…
 = 
	`vfs_gëcwd
(&
ku
);

250 i‡(
ªsu…
) {

251 
	`k¥ötf
("vfs_gëcwd faûed (%s)\n", 
	`°ªº‹
(
ªsu…
));

252  
ªsu…
;

256 
buf
[(buf)-1-
ku
.
uio_ªsid
] = 0;

259 
	`k¥ötf
("%s\n", 
buf
);

262 
	}
}

269 
	$cmd_sync
(
«rgs
, **
¨gs
)

271 ()
«rgs
;

272 ()
¨gs
;

274 
	`vfs_sync
();

277 
	}
}

284 
	$cmd_∑nic
(
«rgs
, **
¨gs
)

286 ()
«rgs
;

287 ()
¨gs
;

289 
	`∑nic
("UserÑequestedÖanic\n");

291 
	}
}

298 
	$cmd_quô
(
«rgs
, **
¨gs
)

300 ()
«rgs
;

301 ()
¨gs
;

303 
	`vfs_sync
();

304 
	`sys_ªboŸ
(
RB_POWEROFF
);

305 
	`thªad_exô
();

307 
	}
}

315 c⁄° *
	m«me
;

316 (*
	mfunc
)(c⁄° *
	mdevi˚
);

317 } 
	gmou¡èbÀ
[] = {

318 #i‡
OPT_SFS


319 { "sfs", 
sfs_mou¡
 },

321 { 
NULL
, NULL }

326 
	$cmd_mou¡
(
«rgs
, **
¨gs
)

328 *
f°y≥
;

329 *
devi˚
;

330 
i
;

332 i‡(
«rgs
 != 3) {

333 
	`k¥ötf
("Usage: mount fstype device:\n");

334  
EINVAL
;

337 
f°y≥
 = 
¨gs
[1];

338 
devi˚
 = 
¨gs
[2];

341 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

342 
devi˚
[
	`°æí
(device)-1] = 0;

345 
i
=0; 
mou¡èbÀ
[i].
«me
; i++) {

346 i‡(!
	`°rcmp
(
mou¡èbÀ
[
i
].
«me
, 
f°y≥
)) {

347  
mou¡èbÀ
[
i
].
	`func
(
devi˚
);

350 
	`k¥ötf
("Unknow¿fûesy°emÅy≥ %s\n", 
f°y≥
);

351  
EINVAL
;

352 
	}
}

356 
	$cmd_unmou¡
(
«rgs
, **
¨gs
)

358 *
devi˚
;

360 i‡(
«rgs
 != 2) {

361 
	`k¥ötf
("Usage: unmount device:\n");

362  
EINVAL
;

365 
devi˚
 = 
¨gs
[1];

368 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

369 
devi˚
[
	`°æí
(device)-1] = 0;

372  
	`vfs_unmou¡
(
devi˚
);

373 
	}
}

385 
	$cmd_boŸfs
(
«rgs
, **
¨gs
)

387 *
devi˚
;

389 i‡(
«rgs
 != 2) {

390 
	`k¥ötf
("Usage: bootfs device\n");

391  
EINVAL
;

394 
devi˚
 = 
¨gs
[1];

397 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

398 
devi˚
[
	`°æí
(device)-1] = 0;

401  
	`vfs_£tboŸfs
(
devi˚
);

402 
	}
}

406 
	$cmd_khóp°©s
(
«rgs
, **
¨gs
)

408 ()
«rgs
;

409 ()
¨gs
;

411 
	`khóp_¥öt°©s
();

414 
	}
}

422 
	$showmíu
(c⁄° *
«me
, c⁄° *
x
[])

424 
˘
, 
hÆf
, 
i
;

426 
	`k¥ötf
("\n");

427 
	`k¥ötf
("%s\n", 
«me
);

429 
i
=
˘
=0; 
x
[i]; i++) {

430 
˘
++;

432 
hÆf
 = (
˘
+1)/2;

434 
i
=0; i<
hÆf
; i++) {

435 
	`k¥ötf
(" %-36s", 
x
[
i
]);

436 i‡(
i
+
hÆf
 < 
˘
) {

437 
	`k¥ötf
("%s", 
x
[
i
+
hÆf
]);

439 
	`k¥ötf
("\n");

442 
	`k¥ötf
("\n");

443 
	}
}

445 c⁄° *
	g›smíu
[] = {

458 
NULL


463 
	$cmd_›smíu
(
n
, **
a
)

465 ()
n
;

466 ()
a
;

468 
	`showmíu
("OS/161 o≥øti⁄†míu", 
›smíu
);

470 
	}
}

473 c⁄° *
	gdbÊagsmíu
[] = {

486 
NULL


492 
	$cmd_dbÊagsmíu
(
n
, **
a
)

494 ()
n
;

495 ()
a
;

497 
	`showmíu
("OS/161 Debug fœgs", 
dbÊagsmíu
);

498 
	`k¥ötf
("CuºíàvÆuêo‡dbÊag†i†0x%x\n", 
dbÊags
);

500 
	}
}

502 c⁄° *
	gã°míu
[] = {

511 #i‡
OPT_NET


522 
NULL


527 
	$cmd_ã°míu
(
n
, **
a
)

529 ()
n
;

530 ()
a
;

532 
	`showmíu
("OS/161Åe°†míu", 
ã°míu
);

533 
	`k¥ötf
(" (1) TheseÅests will fail until you finishÅhe "

535 
	`k¥ötf
(" (4) TheseÅests will fail until you finishÅhe "

537 
	`k¥ötf
("\n");

540 
	}
}

542 c⁄° *
	gmaömíu
[] = {

545 #i‡
OPT_SYNCHPROBS


552 
NULL


557 
	$cmd_maömíu
(
n
, **
a
)

559 ()
n
;

560 ()
a
;

562 
	`showmíu
("OS/161 kî√»míu", 
maömíu
);

564 
	}
}

571 c⁄° *
	m«me
;

572 (*
	mfunc
)(
	m«rgs
, **
	m¨gs
);

573 } 
	gcmdèbÀ
[] = {

575 { "?", 
cmd_maömíu
 },

576 { "h", 
cmd_maömíu
 },

577 { "hñp", 
cmd_maömíu
 },

578 { "?o", 
cmd_›smíu
 },

579 { "dbÊags", 
cmd_dbÊagsmíu
 },

580 { "?t", 
cmd_ã°míu
 },

583 { "s", 
cmd_shñl
 },

584 { "p", 
cmd_¥og
 },

585 { "df", 
cmd_df
 },

586 { "mou¡", 
cmd_mou¡
 },

587 { "unmou¡", 
cmd_unmou¡
 },

588 { "boŸfs", 
cmd_boŸfs
 },

589 { "pf", 
¥ötfûe
 },

590 { "cd", 
cmd_chdú
 },

591 { "pwd", 
cmd_pwd
 },

592 { "sync", 
cmd_sync
 },

593 { "∑nic", 
cmd_∑nic
 },

594 { "q", 
cmd_quô
 },

595 { "exô", 
cmd_quô
 },

596 { "hÆt", 
cmd_quô
 },

598 #i‡
OPT_SYNCHPROBS


600 { "1a", 
ˇtmou££m
 },

601 { "1b", 
ˇtmou£lock
 },

602 { "1c", 
¸óãˇrs
 },

606 { "kh", 
cmd_khóp°©s
 },

609 { "©", 
¨øyã°
 },

610 { "bt", 
bôm≠ã°
 },

611 { "qt", 
queuëe°
 },

612 { "km1", 
mÆlo˘e°
 },

613 { "km2", 
mÆloc°ªss
 },

614 #i‡
OPT_NET


615 { "√t", 
√âe°
 },

617 { "â1", 
thªadã°
 },

618 { "â2", 
thªadã°2
 },

619 { "â3", 
thªadã°3
 },

620 { "sy1", 
£mã°
 },

623 { "sy2", 
lockã°
 },

624 { "sy3", 
cvã°
 },

627 { "fs1", 
f°e°
 },

628 { "fs2", 
ªad°ªss
 },

629 { "fs3", 
wrôe°ªss
 },

630 { "fs4", 
wrôe°ªss2
 },

631 { "fs5", 
¸óã°ªss
 },

633 { 
NULL
, NULL }

641 
	$cmd_di•©ch
(*
cmd
)

643 
time_t
 
bef‹e£cs
, 
a·î£cs
, 
£cs
;

644 
u_öt32_t
 
bef‹í£cs
, 
a·în£cs
, 
n£cs
;

645 *
¨gs
[
MAXMENUARGS
];

646 
«rgs
=0;

647 *
w‹d
;

648 *
c⁄ãxt
;

649 
i
, 
ªsu…
;

651 
w‹d
 = 
	`°πok_r
(
cmd
, " \t", &
c⁄ãxt
);

652 
w‹d
 !
NULL
;

653 
w‹d
 = 
	`°πok_r
(
NULL
, " \t", &
c⁄ãxt
)) {

655 i‡(
«rgs
 >
MAXMENUARGS
) {

656 
	`k¥ötf
("CommandÜine hasÅoo many words\n");

657  
E2BIG
;

659 
¨gs
[
«rgs
++] = 
w‹d
;

662 i‡(
«rgs
==0) {

666 
i
=0; 
cmdèbÀ
[i].
«me
; i++) {

667 i‡(*
cmdèbÀ
[
i
].
«me
 && !
	`°rcmp
(
¨gs
[0], cmdtable[i].name)) {

668 
	`as£π
(
cmdèbÀ
[
i
].
func
!=
NULL
);

670 
	`gëtime
(&
bef‹e£cs
, &
bef‹í£cs
);

671 
ªsu…
 = 
cmdèbÀ
[
i
].
	`func
(
«rgs
, 
¨gs
);

673 
	`gëtime
(&
a·î£cs
, &
a·în£cs
);

674 
	`gëöãrvÆ
(
bef‹e£cs
, 
bef‹í£cs
,

675 
a·î£cs
, 
a·în£cs
,

676 &
£cs
, &
n£cs
);

678 
	`k¥ötf
("OperationÅook %lu.%09lu seconds\n",

679 (Ë
£cs
,

680 (Ë
n£cs
);

682  
ªsu…
;

686 
	`k¥ötf
("%s: Comm™dÇŸ found\n", 
¨gs
[0]);

687  
EINVAL
;

688 
	}
}

699 
	$míu_execuã
(*
löe
, 
ißrgs
)

701 *
comm™d
;

702 *
c⁄ãxt
;

703 
ªsu…
;

706 
comm™d
 = 
	`°πok_r
(
löe
, ";", &
c⁄ãxt
);

707 
comm™d
 !
NULL
;

708 
comm™d
 = 
	`°πok_r
(
NULL
, ";", &
c⁄ãxt
)) {

710 i‡(
ißrgs
) {

711 
	`k¥ötf
("OS/161 kî√l: %s\n", 
comm™d
);

714 
ªsu…
 = 
	`cmd_di•©ch
(
comm™d
);

715 i‡(
ªsu…
) {

716 
	`k¥ötf
("Míu comm™d faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

717 i‡(
ißrgs
) {

718 
	`∑nic
("FailureÖrocessing kernelárguments\n");

722 
	}
}

742 
	$míu
(*
¨gs
)

744 
buf
[64];

747 
	`míu_execuã
(
¨gs
, 1);

749 
	`öô_pid
();

752 
	`k¥ötf
("OS/161 kernel [? for menu]: ");

753 
	`kgës
(
buf
, (buf));

754 
	`míu_execuã
(
buf
, 0);

756 
	}
}

	@test/arraytest.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<¨øy.h
>

4 
	~<ã°.h
>

6 
	#TESTSIZE
 73

	)

10 
	$ã°a
(
¨øy
 *
a
)

12 
ã°¨øy
[
TESTSIZE
];

13 
i
, 
j
, 
n
, 
r
, *
p
;

15 
i
=0; i<
TESTSIZE
; i++) {

16 
ã°¨øy
[
i
]=i;

19 
n
 = 
	`¨øy_gënum
(
a
);

20 
	`as£π
(
n
==0);

22 
i
=0; i<
TESTSIZE
; i++) {

23 
r
 = 
	`¨øy_add
(
a
, &
ã°¨øy
[
i
]);

24 
	`as£π
(
r
==0);

25 
n
 = 
	`¨øy_gënum
(
a
);

26 
	`as£π
(
n
==
i
+1);

28 
n
 = 
	`¨øy_gënum
(
a
);

29 
	`as£π
(
n
==
TESTSIZE
);

31 
i
=0; i<
TESTSIZE
; i++) {

32 
p
 = 
	`¨øy_gëguy
(
a
, 
i
);

33 
	`as£π
(*
p
 =
i
);

35 
n
 = 
	`¨øy_gënum
(
a
);

36 
	`as£π
(
n
==
TESTSIZE
);

38 
j
=0; j<
TESTSIZE
*4; j++) {

39 
i
 = 
	`øndom
()%
TESTSIZE
;

40 
p
 = 
	`¨øy_gëguy
(
a
, 
i
);

41 
	`as£π
(*
p
 =
i
);

43 
n
 = 
	`¨øy_gënum
(
a
);

44 
	`as£π
(
n
==
TESTSIZE
);

46 
i
=0; i<
TESTSIZE
; i++) {

47 
	`¨øy_£tguy
(
a
, 
i
, &
ã°¨øy
[
TESTSIZE
-i-1]);

50 
i
=0; i<
TESTSIZE
; i++) {

51 
p
 = 
	`¨øy_gëguy
(
a
, 
i
);

52 
	`as£π
(*
p
 =
TESTSIZE
-
i
-1);

55 
r
 = 
	`¨øy_£tsize
(
a
, 
TESTSIZE
/2);

56 
	`as£π
(
r
==0);

58 
i
=0; i<
TESTSIZE
/2; i++) {

59 
p
 = 
	`¨øy_gëguy
(
a
, 
i
);

60 
	`as£π
(*
p
 =
TESTSIZE
-
i
-1);

63 
	`¨øy_ªmove
(
a
, 1);

65 
i
=1; i<
TESTSIZE
/2 - 1; i++) {

66 
p
 = 
	`¨øy_gëguy
(
a
, 
i
);

67 
	`as£π
(*
p
 =
TESTSIZE
-
i
-2);

69 
p
 = 
	`¨øy_gëguy
(
a
, 0);

70 
	`as£π
(*
p
 =
TESTSIZE
-1);

72 
	`¨øy_£tsize
(
a
, 2);

73 
p
 = 
	`¨øy_gëguy
(
a
, 0);

74 
	`as£π
(*
p
 =
TESTSIZE
-1);

75 
p
 = 
	`¨øy_gëguy
(
a
, 1);

76 
	`as£π
(*
p
 =
TESTSIZE
-3);

78 
	`¨øy_£tguy
(
a
, 1, 
NULL
);

79 
	`¨øy_£tsize
(
a
, 2);

80 
p
 = 
	`¨øy_gëguy
(
a
, 0);

81 
	`as£π
(*
p
 =
TESTSIZE
-1);

82 
p
 = 
	`¨øy_gëguy
(
a
, 1);

83 
	`as£π
(
p
==
NULL
);

85 
	`¨øy_£tsize
(
a
, 
TESTSIZE
*10);

86 
p
 = 
	`¨øy_gëguy
(
a
, 0);

87 
	`as£π
(*
p
 =
TESTSIZE
-1);

88 
p
 = 
	`¨øy_gëguy
(
a
, 1);

89 
	`as£π
(
p
==
NULL
);

90 
	}
}

93 
	$¨øyã°
(
«rgs
, **
¨gs
)

95 
¨øy
 *
a
;

97 ()
«rgs
;

98 ()
¨gs
;

100 
	`k¥ötf
("BeginningárrayÅest...\n");

101 
a
 = 
	`¨øy_¸óã
();

102 
	`as£π
(
a
 !
NULL
);

104 
	`ã°a
(
a
);

106 
	`¨øy_£tsize
(
a
, 0);

108 
	`ã°a
(
a
);

110 
	`¨øy_de°roy
(
a
);

112 
	`k¥ötf
("ArrayÅest complete\n");

114 
	}
}

	@test/bitmaptest.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<bôm≠.h
>

4 
	~<ã°.h
>

6 
	#TESTSIZE
 533

	)

9 
	$bôm≠ã°
(
«rgs
, **
¨gs
)

11 
bôm≠
 *
b
;

12 
d©a
[
TESTSIZE
];

13 
u_öt32_t
 
x
;

14 
i
;

16 ()
«rgs
;

17 ()
¨gs
;

19 
	`k¥ötf
("Starting bitmapÅest...\n");

21 
i
=0; i<
TESTSIZE
; i++) {

22 
d©a
[
i
] = 
	`øndom
()%2;

25 
b
 = 
	`bôm≠_¸óã
(
TESTSIZE
);

26 
	`as£π
(
b
 !
NULL
);

28 
i
=0; i<
TESTSIZE
; i++) {

29 
	`as£π
(
	`bôm≠_is£t
(
b
, 
i
)==0);

32 
i
=0; i<
TESTSIZE
; i++) {

33 i‡(
d©a
[
i
]) {

34 
	`bôm≠_m¨k
(
b
, 
i
);

37 
i
=0; i<
TESTSIZE
; i++) {

38 i‡(
d©a
[
i
]) {

39 
	`as£π
(
	`bôm≠_is£t
(
b
, 
i
));

42 
	`as£π
(
	`bôm≠_is£t
(
b
, 
i
)==0);

46 
i
=0; i<
TESTSIZE
; i++) {

47 i‡(
d©a
[
i
]) {

48 
	`bôm≠_unm¨k
(
b
, 
i
);

51 
	`bôm≠_m¨k
(
b
, 
i
);

54 
i
=0; i<
TESTSIZE
; i++) {

55 i‡(
d©a
[
i
]) {

56 
	`as£π
(
	`bôm≠_is£t
(
b
, 
i
)==0);

59 
	`as£π
(
	`bôm≠_is£t
(
b
, 
i
));

63 
	`bôm≠_Æloc
(
b
, &
x
)==0) {

64 
	`as£π
(
x
 < 
TESTSIZE
);

65 
	`as£π
(
	`bôm≠_is£t
(
b
, 
x
));

66 
	`as£π
(
d©a
[
x
]==1);

67 
d©a
[
x
] = 0;

70 
i
=0; i<
TESTSIZE
; i++) {

71 
	`as£π
(
	`bôm≠_is£t
(
b
, 
i
));

72 
	`as£π
(
d©a
[
i
]==0);

75 
	`k¥ötf
("BitmapÅest complete\n");

77 
	}
}

	@test/fstest.c

12 
	~<ty≥s.h
>

13 
	~<kîn/î∫o.h
>

14 
	~<kîn/uni°d.h
>

15 
	~<lib.h
>

16 
	~<synch.h
>

17 
	~<fs.h
>

18 
	~<vnode.h
>

19 
	~<vfs.h
>

20 
	~<uio.h
>

21 
	~<ã°.h
>

22 
	~<thªad.h
>

24 
	#SLOGAN
 "HODIE MIHI - CRAS TIBI\n"

	)

25 
	#FILENAME
 "f°e°.tmp"

	)

26 
	#NCHUNKS
 720

	)

27 
	#NTHREADS
 12

	)

28 
	#NCREATES
 32

	)

30 
£m≠h‹e
 *
	gthªad£m
 = 
NULL
;

34 
	$öô_thªad£m
()

36 i‡(
thªad£m
==
NULL
) {

37 
thªad£m
 = 
	`£m_¸óã
("fstestsem", 0);

38 i‡(
thªad£m
 =
NULL
) {

39 
	`∑nic
("fstest: sem_create failed\n");

42 
	}
}

50 
	$rŸ©e
(*
°r
, 
amt
)

52 
i
, 
ch
;

54 
amt
 = (amt+2600)%26;

55 
	`as£π
(
amt
>=0);

57 
i
=0; 
°r
[i]; i++) {

58 
ch
 = 
°r
[
i
];

59 i‡(
ch
>='A' && ch<='Z') {

60 
ch
 = ch - 'A';

61 
ch
 +
amt
;

62 
ch
 %= 26;

63 
ch
 = ch + 'A';

64 
	`as£π
(
ch
>='A' && ch<='Z');

66 
°r
[
i
] = 
ch
;

68 
	}
}

74 
	$f°e°_makíame
(*
buf
, 
size_t
 
buÊí
,

75 c⁄° *
fs
, c⁄° *
«mesuffix
)

77 
	`¢¥ötf
(
buf
, 
buÊí
, "%s:%s%s", 
fs
, 
FILENAME
, 
«mesuffix
);

78 
	`as£π
(
	`°æí
(
buf
Ë< 
buÊí
);

79 
	}
}

81 
	#MAKENAME
(Ë
	`f°e°_makíame
(
«me
, “ame), 
fs
, 
«mesuffix
)

	)

85 
	$f°e°_ªmove
(c⁄° *
fs
, c⁄° *
«mesuffix
)

87 
«me
[32];

88 
buf
[32];

89 
îr
;

91 
	`MAKENAME
();

93 
	`°r˝y
(
buf
, 
«me
);

94 
îr
 = 
	`vfs_ªmove
(
buf
);

95 i‡(
îr
) {

96 
	`k¥ötf
("CouldÇŸÑemovê%s: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

101 
	}
}

105 
	$f°e°_wrôe
(c⁄° *
fs
, c⁄° *
«mesuffix
,

106 
°ridesize
, 
°ridïos
)

108 
vnode
 *
vn
;

109 
îr
;

110 
i
;

111 
size_t
 
shouldbyãs
=0;

112 
size_t
 
byãs
=0;

113 
off_t
 
pos
=0;

114 
«me
[32];

115 
buf
[32];

116 
uio
 
ku
;

117 
Êags
;

119 
	`as£π
((
buf
Ë> 
	`°æí
(
SLOGAN
));

121 
	`MAKENAME
();

123 
Êags
 = 
O_WRONLY
|
O_CREAT
;

124 i‡(
°ridesize
 == 1) {

125 
Êags
 |
O_TRUNC
;

129 
	`°r˝y
(
buf
, 
«me
);

130 
îr
 = 
	`vfs_›í
(
buf
, 
Êags
, &
vn
);

131 i‡(
îr
) {

132 
	`k¥ötf
("CouldÇot open %s for write: %s\n",

133 
«me
, 
	`°ªº‹
(
îr
));

137 
i
=0; i<
NCHUNKS
; i++) {

138 i‡(
i
 % 
°ridesize
 !
°ridïos
) {

139 
pos
 +
	`°æí
(
SLOGAN
);

142 
	`°r˝y
(
buf
, 
SLOGAN
);

143 
	`rŸ©e
(
buf
, 
i
);

144 
	`mk_kuio
(&
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
pos
, 
UIO_WRITE
);

145 
îr
 = 
	`VOP_WRITE
(
vn
, &
ku
);

146 i‡(
îr
) {

147 
	`k¥ötf
("%s: Wrôêîr‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

148 
	`vfs_˛o£
(
vn
);

149 
	`vfs_ªmove
(
«me
);

153 i‡(
ku
.
uio_ªsid
 > 0) {

154 
	`k¥ötf
("%s: Short write: %lu bytesÜeft over\n",

155 
«me
, (Ë
ku
.
uio_ªsid
);

156 
	`vfs_˛o£
(
vn
);

157 
	`vfs_ªmove
(
«me
);

161 
byãs
 +(
ku
.
uio_off£t
 - 
pos
);

162 
shouldbyãs
 +
	`°æí
(
SLOGAN
);

163 
pos
 = 
ku
.
uio_off£t
;

166 
	`vfs_˛o£
(
vn
);

168 i‡(
byãs
 !
shouldbyãs
) {

169 
	`k¥ötf
("%s: %lu bytes written, should have been %lu!\n",

170 
«me
, (Ë
byãs
,

171 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

172 
	`vfs_ªmove
(
«me
);

175 
	`k¥ötf
("%s: %lu byã†wrôãn\n", 
«me
, (Ë
byãs
);

178 
	}
}

182 
	$f°e°_ªad
(c⁄° *
fs
, c⁄° *
«mesuffix
)

184 
vnode
 *
vn
;

185 
îr
;

186 
i
;

187 
size_t
 
byãs
=0;

188 
«me
[32];

189 
buf
[32];

190 
uio
 
ku
;

192 
	`MAKENAME
();

195 
	`°r˝y
(
buf
, 
«me
);

196 
îr
 = 
	`vfs_›í
(
buf
, 
O_RDONLY
, &
vn
);

197 i‡(
îr
) {

198 
	`k¥ötf
("CouldÇot openÅest file forÑead: %s\n",

199 
	`°ªº‹
(
îr
));

203 
i
=0; i<
NCHUNKS
; i++) {

204 
	`mk_kuio
(&
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
byãs
, 
UIO_READ
);

205 
îr
 = 
	`VOP_READ
(
vn
, &
ku
);

206 i‡(
îr
) {

207 
	`k¥ötf
("%s: RódÉº‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

208 
	`vfs_˛o£
(
vn
);

212 i‡(
ku
.
uio_ªsid
 > 0) {

213 
	`k¥ötf
("%s: Sh‹àªad: %lu byã†À· ovî\n", 
«me
,

214 (Ë
ku
.
uio_ªsid
);

215 
	`vfs_˛o£
(
vn
);

218 
buf
[
	`°æí
(
SLOGAN
)] = 0;

219 
	`rŸ©e
(
buf
, -
i
);

220 i‡(
	`°rcmp
(
buf
, 
SLOGAN
)) {

221 
	`k¥ötf
("%s: Test failed:Üine %d mismatched: %s\n",

222 
«me
, 
i
+1, 
buf
);

223 
	`vfs_˛o£
(
vn
);

227 
byãs
 = 
ku
.
uio_off£t
;

230 
	`vfs_˛o£
(
vn
);

232 i‡(
byãs
 !
NCHUNKS
*
	`°æí
(
SLOGAN
)) {

233 
	`k¥ötf
("%s: %lu bytesÑead, should have been %lu!\n",

234 
«me
, (Ë
byãs
,

235 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

238 
	`k¥ötf
("%s: %lu byã†ªad\n", 
«me
, (Ë
byãs
);

240 
	}
}

246 
	$dof°e°
(c⁄° *
fûesys
)

248 
	`k¥ötf
("*** Sèπög fûesy°emÅe° o¿%s:\n", 
fûesys
);

250 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

251 
	`k¥ötf
("*** Test failed\n");

255 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

256 
	`k¥ötf
("*** Test failed\n");

260 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

261 
	`k¥ötf
("*** Test failed\n");

265 
	`k¥ötf
("*** FilesystemÅest done\n");

266 
	}
}

272 
	$ªad°ªss_thªad
(*
fs
, 
num
)

274 c⁄° *
fûesys
 = 
fs
;

275 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

276 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

278 
	`V
(
thªad£m
);

279 
	}
}

283 
	$d‹ód°ªss
(c⁄° *
fûesys
)

285 
i
, 
îr
;

287 
	`öô_thªad£m
();

289 
	`k¥ötf
("*** Sèπög f†ªad såes†ã° o¿%s:\n", 
fûesys
);

291 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

292 
	`k¥ötf
("*** Test failed\n");

296 
i
=0; i<
NTHREADS
; i++) {

297 
îr
 = 
	`thªad_f‹k
("ªad°ªss", (*)
fûesys
, 
i
,

298 
ªad°ªss_thªad
, 
NULL
);

299 i‡(
îr
) {

300 
	`∑nic
("readstress:Åhread_fork failed: %s\n",

301 
	`°ªº‹
(
îr
));

305 
i
=0; i<
NTHREADS
; i++) {

306 
	`P
(
thªad£m
);

309 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

310 
	`k¥ötf
("*** Test failed\n");

314 
	`k¥ötf
("*** fsÑead stressÅest done\n");

315 
	}
}

321 
	$wrôe°ªss_thªad
(*
fs
, 
num
)

323 c⁄° *
fûesys
 = 
fs
;

324 
num°r
[8];

325 
	`¢¥ötf
(
num°r
, “um°r), "%lu", 
num
);

327 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

328 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

329 
	`V
(
thªad£m
);

333 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

334 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

335 
	`V
(
thªad£m
);

339 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

340 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

343 
	`k¥ötf
("*** Thªad %lu: d⁄e\n", 
num
);

345 
	`V
(
thªad£m
);

346 
	}
}

350 
	$dowrôe°ªss
(c⁄° *
fûesys
)

352 
i
, 
îr
;

354 
	`öô_thªad£m
();

356 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° o¿%s:\n", 
fûesys
);

358 
i
=0; i<
NTHREADS
; i++) {

359 
îr
 = 
	`thªad_f‹k
("wrôe°ªss", (*)
fûesys
, 
i
,

360 
wrôe°ªss_thªad
, 
NULL
);

361 i‡(
îr
) {

362 
	`∑nic
("thªad_f‹k faûed %s\n", 
	`°ªº‹
(
îr
));

366 
i
=0; i<
NTHREADS
; i++) {

367 
	`P
(
thªad£m
);

370 
	`k¥ötf
("*** fs write stressÅest done\n");

371 
	}
}

377 
	$wrôe°ªss2_thªad
(*
fs
, 
num
)

379 c⁄° *
fûesys
 = 
fs
;

381 i‡(
	`f°e°_wrôe
(
fûesys
, "", 
NTHREADS
, 
num
)) {

382 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

383 
	`V
(
thªad£m
);

387 
	`V
(
thªad£m
);

388 
	}
}

392 
	$dowrôe°ªss2
(c⁄° *
fûesys
)

394 
i
, 
îr
;

395 
«me
[32];

396 
vnode
 *
vn
;

398 
	`öô_thªad£m
();

400 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° 2 o¿%s:\n", 
fûesys
);

403 
	`f°e°_makíame
(
«me
, “ame), 
fûesys
, "");

404 
îr
 = 
	`vfs_›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, &
vn
);

405 i‡(
îr
) {

406 
	`k¥ötf
("CouldÇŸ cª©êã° fûe: %s\n", 
	`°ªº‹
(
îr
));

407 
	`k¥ötf
("*** Test failed\n");

410 
	`vfs_˛o£
(
vn
);

412 
i
=0; i<
NTHREADS
; i++) {

413 
îr
 = 
	`thªad_f‹k
("wrôe°ªss2", (*)
fûesys
, 
i
,

414 
wrôe°ªss2_thªad
, 
NULL
);

415 i‡(
îr
) {

416 
	`∑nic
("writestress2:Åhread_fork failed: %s\n",

417 
	`°ªº‹
(
îr
));

421 
i
=0; i<
NTHREADS
; i++) {

422 
	`P
(
thªad£m
);

425 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

426 
	`k¥ötf
("*** Test failed\n");

430 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

431 
	`k¥ötf
("*** Test failed\n");

435 
	`k¥ötf
("*** fs write stressÅest 2 done\n");

436 
	}
}

442 
	$¸óã°ªss_thªad
(*
fs
, 
num
)

444 c⁄° *
fûesys
 = 
fs
;

445 
i
;

446 
num°r
[16];

448 
i
=0; i<
NCREATES
; i++) {

450 
	`¢¥ötf
(
num°r
, “um°r), "%lu-%d", 
num
, 
i
);

452 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

453 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

454 
	`V
(
thªad£m
);

458 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

459 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

460 
	`V
(
thªad£m
);

464 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

465 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

466 
	`V
(
thªad£m
);

472 
	`V
(
thªad£m
);

473 
	}
}

477 
	$do¸óã°ªss
(c⁄° *
fûesys
)

479 
i
, 
îr
;

481 
	`öô_thªad£m
();

483 
	`k¥ötf
("*** Sèπög f†¸óã såes†ã° o¿%s:\n", 
fûesys
);

485 
i
=0; i<
NTHREADS
; i++) {

486 
îr
 = 
	`thªad_f‹k
("¸óã°ªss", (*)
fûesys
, 
i
,

487 
¸óã°ªss_thªad
, 
NULL
);

488 i‡(
îr
) {

489 
	`∑nic
("createstress:Åhread_fork failed %s\n",

490 
	`°ªº‹
(
îr
));

494 
i
=0; i<
NTHREADS
; i++) {

495 
	`P
(
thªad£m
);

498 
	`k¥ötf
("*** fs create stressÅest done\n");

499 
	}
}

505 
	$checkfûesy°em
(
«rgs
, **
¨gs
)

507 *
devi˚
;

509 i‡(
«rgs
 != 2) {

510 
	`k¥ötf
("Usage: fs[12345] filesystem:\n");

511  
EINVAL
;

514 
devi˚
 = 
¨gs
[1];

517 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

518 
devi˚
[
	`°æí
(device)-1] = 0;

522 
	}
}

524 
	#DEFTEST
(
ã°«me
) \

526 
	`ã°«me
(
«rgs
, **
¨gs
) \

528 
ªsu…
; \

529 
ªsu…
 = 
	`checkfûesy°em
(
«rgs
, 
¨gs
); \

530 i‡(
ªsu…
) { \

531  
ªsu…
; \

533 do##
	`ã°«me
(
¨gs
[1]); \

535 }

	)

537 
DEFTEST
(
f°e°
);

538 
DEFTEST
(
ªad°ªss
);

539 
DEFTEST
(
wrôe°ªss
);

540 
DEFTEST
(
wrôe°ªss2
);

541 
DEFTEST
(
¸óã°ªss
);

546 
	$¥ötfûe
(
«rgs
, **
¨gs
)

548 
vnode
 *
rv
, *
wv
;

549 
uio
 
ku
;

550 
off_t
 
Ωos
=0, 
wpos
=0;

551 
buf
[128];

552 
outfûe
[16];

553 
ªsu…
;

554 
d⁄e
=0;

556 i‡(
«rgs
 != 2) {

557 
	`k¥ötf
("Usage:Öf filename\n");

558  
EINVAL
;

562 
	`°r˝y
(
outfûe
, "con:");

564 
ªsu…
 = 
	`vfs_›í
(
¨gs
[1], 
O_RDONLY
, &
rv
);

565 i‡(
ªsu…
) {

566 
	`k¥ötf
("¥ötfûe: %s\n", 
	`°ªº‹
(
ªsu…
));

567  
ªsu…
;

570 
ªsu…
 = 
	`vfs_›í
(
outfûe
, 
O_WRONLY
, &
wv
);

571 i‡(
ªsu…
) {

572 
	`k¥ötf
("¥ötfûe: ouçut: %s\n", 
	`°ªº‹
(
ªsu…
));

573 
	`vfs_˛o£
(
rv
);

574  
ªsu…
;

577 !
d⁄e
) {

578 
	`mk_kuio
(&
ku
, 
buf
, (buf), 
Ωos
, 
UIO_READ
);

579 
ªsu…
 = 
	`VOP_READ
(
rv
, &
ku
);

580 i‡(
ªsu…
) {

581 
	`k¥ötf
("RódÉº‹: %s\n", 
	`°ªº‹
(
ªsu…
));

584 
Ωos
 = 
ku
.
uio_off£t
;

586 i‡(
ku
.
uio_ªsid
 > 0) {

587 
d⁄e
 = 1;

590 
	`mk_kuio
(&
ku
, 
buf
, (buf)-ku.
uio_ªsid
, 
wpos
, 
UIO_WRITE
);

591 
ªsu…
 = 
	`VOP_WRITE
(
wv
, &
ku
);

592 i‡(
ªsu…
) {

593 
	`k¥ötf
("Wrôêîr‹: %s\n", 
	`°ªº‹
(
ªsu…
));

596 
wpos
 = 
ku
.
uio_off£t
;

598 i‡(
ku
.
uio_ªsid
 > 0) {

599 
	`k¥ötf
("Warning: short write\n");

603 
	`vfs_˛o£
(
wv
);

604 
	`vfs_˛o£
(
rv
);

607 
	}
}

	@test/malloctest.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<synch.h
>

7 
	~<thªad.h
>

8 
	~<ã°.h
>

21 
	#NTRIES
 1200

	)

22 
	#ITEMSIZE
 997

	)

23 
	#NTHREADS
 8

	)

27 
	$mÆlo˘hªad
(*
sm
, 
num
)

29 
£m≠h‹e
 *
£m
 = 
sm
;

30 *
±r
;

31 *
ﬁd±r
=
NULL
;

32 *
ﬁd±r2
=
NULL
;

33 
i
;

35 
i
=0; i<
NTRIES
; i++) {

36 
±r
 = 
	`kmÆloc
(
ITEMSIZE
);

37 i‡(
±r
==
NULL
) {

38 i‡(
£m
) {

39 
	`k¥ötf
("thread %lu: kmallocÑeturned NULL\n",

40 
num
);

41 
	`V
(
£m
);

44 
	`k¥ötf
("kmallocÑeturnedÇull;Åest failed.\n");

47 i‡(
ﬁd±r2
) {

48 
	`k‰ì
(
ﬁd±r2
);

50 
ﬁd±r2
 = 
ﬁd±r
;

51 
ﬁd±r
 = 
±r
;

53 i‡(
ﬁd±r2
) {

54 
	`k‰ì
(
ﬁd±r2
);

56 i‡(
ﬁd±r
) {

57 
	`k‰ì
(
ﬁd±r
);

59 i‡(
£m
) {

60 
	`V
(
£m
);

62 
	}
}

65 
	$mÆlo˘e°
(
«rgs
, **
¨gs
)

67 ()
«rgs
;

68 ()
¨gs
;

70 
	`k¥ötf
("Starting kmallocÅest...\n");

71 
	`mÆlo˘hªad
(
NULL
, 0);

72 
	`k¥ötf
("kmallocÅest done\n");

75 
	}
}

78 
	$mÆloc°ªss
(
«rgs
, **
¨gs
)

80 
£m≠h‹e
 *
£m
;

81 
i
, 
ªsu…
;

83 ()
«rgs
;

84 ()
¨gs
;

86 
£m
 = 
	`£m_¸óã
("mallocstress", 0);

87 i‡(
£m
 =
NULL
) {

88 
	`∑nic
("mallocstress: sem_create failed\n");

91 
	`k¥ötf
("Starting kmalloc stressÅest...\n");

93 
i
=0; i<
NTHREADS
; i++) {

94 
ªsu…
 = 
	`thªad_f‹k
("mÆloc°ªss", 
£m
, 
i
, 
mÆlo˘hªad
,

95 
NULL
);

96 i‡(
ªsu…
) {

97 
	`∑nic
("mallocstress:Åhread_fork failed: %s\n",

98 
	`°ªº‹
(
ªsu…
));

102 
i
=0; i<
NTHREADS
; i++) {

103 
	`P
(
£m
);

106 
	`£m_de°roy
(
£m
);

107 
	`k¥ötf
("kmalloc stressÅest done\n");

110 
	}
}

	@test/nettest.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<ã°.h
>

9 
	$√âe°
()

11 
	`k¥ötf
("NoÇetwork supportávailable\n");

12 
	}
}

	@test/queuetest.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<queue.h
>

4 
	~<ã°.h
>

8 
	$ã°q
(
queue
 *
q
, 
n
)

10 
i
, 
ªsu…
, *
x
, *
r
;

12 
x
 = 
	`kmÆloc
(
n
 * ());

13 
i
=0; i<
n
; i++) {

14 
x
[
i
] = i;

17 
	`as£π
(
	`q_em±y
(
q
));

19 
i
=0; i<
n
; i++) {

20 
	`k¥ötf
("queue:áddög %d\n", 
i
);

21 
ªsu…
 = 
	`q_addèû
(
q
, &
x
[
i
]);

22 
	`as£π
(
ªsu…
==0);

25 
i
=0; i<
n
; i++) {

26 
r
 = 
	`q_ªmhód
(
q
);

27 
	`as£π
(
r
 !
NULL
);

28 
	`k¥ötf
("queue: gŸ %d, should bê%d\n", *
r
, 
i
);

29 
	`as£π
(*
r
 =
i
);

32 
	`as£π
(
	`q_em±y
(
q
));

34 
	`k‰ì
(
x
);

35 
	}
}

39 
	$queuëe°
(
«rgs
, **
¨gs
)

41 
queue
 *
q
;

43 ()
«rgs
;

44 ()
¨gs
;

46 
q
 = 
	`q_¸óã
(8);

47 
	`as£π
(
q
 !
NULL
);

50 
	`ã°q
(
q
, 6);

53 
	`ã°q
(
q
, 27);

55 
	`q_de°roy
(
q
);

58 
	}
}

	@test/synchtest.c

5 
	~<ty≥s.h
>

6 
	~<lib.h
>

7 
	~<synch.h
>

8 
	~<thªad.h
>

9 
	~<ã°.h
>

10 
	~<˛ock.h
>

12 
	#NSEMLOOPS
 63

	)

13 
	#NLOCKLOOPS
 120

	)

14 
	#NCVLOOPS
 5

	)

15 
	#NTHREADS
 32

	)

17 vﬁ©ûê
	gã°vÆ1
;

18 vﬁ©ûê
	gã°vÆ2
;

19 vﬁ©ûê
	gã°vÆ3
;

20 
£m≠h‹e
 *
	gã°£m
;

21 
lock
 *
	gã°lock
;

22 
cv
 *
	gã°cv
;

23 
£m≠h‹e
 *
	gd⁄e£m
;

27 
	$öôôems
()

29 i‡(
ã°£m
==
NULL
) {

30 
ã°£m
 = 
	`£m_¸óã
("testsem", 2);

31 i‡(
ã°£m
 =
NULL
) {

32 
	`∑nic
("synchtest: sem_create failed\n");

35 i‡(
ã°lock
==
NULL
) {

36 
ã°lock
 = 
	`lock_¸óã
("testlock");

37 i‡(
ã°lock
 =
NULL
) {

38 
	`∑nic
("synchtest:Üock_create failed\n");

41 i‡(
ã°cv
==
NULL
) {

42 
ã°cv
 = 
	`cv_¸óã
("testlock");

43 i‡(
ã°cv
 =
NULL
) {

44 
	`∑nic
("synchtest: cv_create failed\n");

47 i‡(
d⁄e£m
==
NULL
) {

48 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

49 i‡(
d⁄e£m
 =
NULL
) {

50 
	`∑nic
("synchtest: sem_create failed\n");

53 
	}
}

57 
	$£mã°thªad
(*
junk
, 
num
)

59 
i
;

60 ()
junk
;

65 
	`P
(
ã°£m
);

66 
	`k¥ötf
("Thªad %2lu: ", 
num
);

67 
i
=0; i<
NSEMLOOPS
; i++) {

68 
	`k¥ötf
("%c", ()
num
+64);

70 
	`k¥ötf
("\n");

71 
	`V
(
d⁄e£m
);

72 
	}
}

75 
	$£mã°
(
«rgs
, **
¨gs
)

77 
i
, 
ªsu…
;

79 ()
«rgs
;

80 ()
¨gs
;

82 
	`öôôems
();

83 
	`k¥ötf
("Starting semaphoreÅest...\n");

84 
	`k¥ötf
("IfÅhis hangs, it's broken: ");

85 
	`P
(
ã°£m
);

86 
	`P
(
ã°£m
);

87 
	`k¥ötf
("ok\n");

89 
i
=0; i<
NTHREADS
; i++) {

90 
ªsu…
 = 
	`thªad_f‹k
("£mã°", 
NULL
, 
i
, 
£mã°thªad
, NULL);

91 i‡(
ªsu…
) {

92 
	`∑nic
("semtest:Åhread_fork failed: %s\n",

93 
	`°ªº‹
(
ªsu…
));

97 
i
=0; i<
NTHREADS
; i++) {

98 
	`V
(
ã°£m
);

99 
	`P
(
d⁄e£m
);

103 
	`V
(
ã°£m
);

104 
	`V
(
ã°£m
);

106 
	`k¥ötf
("SemaphoreÅest done.\n");

108 
	}
}

112 
	$Áû
(
num
, c⁄° *
msg
)

114 
	`k¥ötf
("thªad %lu: Mism©ch o¿%s\n", 
num
, 
msg
);

115 
	`k¥ötf
("Test failed\n");

117 
	`lock_ªÀa£
(
ã°lock
);

119 
	`V
(
d⁄e£m
);

120 
	`thªad_exô
();

121 
	}
}

125 
	$lockã°thªad
(*
junk
, 
num
)

127 
i
;

128 ()
junk
;

130 
i
=0; i<
NLOCKLOOPS
; i++) {

131 
	`lock_acquúe
(
ã°lock
);

132 
ã°vÆ1
 = 
num
;

133 
ã°vÆ2
 = 
num
*num;

134 
ã°vÆ3
 = 
num
%3;

136 i‡(
ã°vÆ2
 !
ã°vÆ1
*testval1) {

137 
	`Áû
(
num
, "testval2/testval1");

140 i‡(
ã°vÆ2
%3 !(
ã°vÆ3
*testval3)%3) {

141 
	`Áû
(
num
, "testval2/testval3");

144 i‡(
ã°vÆ3
 !
ã°vÆ1
%3) {

145 
	`Áû
(
num
, "testval3/testval1");

148 i‡(
ã°vÆ1
 !
num
) {

149 
	`Áû
(
num
, "testval1/num");

152 i‡(
ã°vÆ2
 !
num
*num) {

153 
	`Áû
(
num
, "testval2/num");

156 i‡(
ã°vÆ3
 !
num
%3) {

157 
	`Áû
(
num
, "testval3/num");

160 
	`lock_ªÀa£
(
ã°lock
);

162 
	`V
(
d⁄e£m
);

163 
	}
}

167 
	$lockã°
(
«rgs
, **
¨gs
)

169 
i
, 
ªsu…
;

171 ()
«rgs
;

172 ()
¨gs
;

174 
	`öôôems
();

175 
	`k¥ötf
("StartingÜockÅest...\n");

177 
i
=0; i<
NTHREADS
; i++) {

178 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
i
, 
lockã°thªad
,

179 
NULL
);

180 i‡(
ªsu…
) {

181 
	`∑nic
("locktest:Åhread_fork failed: %s\n",

182 
	`°ªº‹
(
ªsu…
));

185 
i
=0; i<
NTHREADS
; i++) {

186 
	`P
(
d⁄e£m
);

189 
	`k¥ötf
("LockÅest done.\n");

192 
	}
}

196 
	$cvã°thªad
(*
junk
, 
num
)

198 
i
;

199 vﬁ©ûê
j
;

200 
time_t
 
£cs1
, 
£cs2
;

201 
u_öt32_t
 
n£cs1
, 
n£cs2
;

203 ()
junk
;

205 
i
=0; i<
NCVLOOPS
; i++) {

206 
	`lock_acquúe
(
ã°lock
);

207 
ã°vÆ1
 !
num
) {

208 
	`gëtime
(&
£cs1
, &
n£cs1
);

209 
	`cv_waô
(
ã°cv
, 
ã°lock
);

210 
	`gëtime
(&
£cs2
, &
n£cs2
);

212 i‡(
n£cs2
 < 
n£cs1
) {

213 
£cs2
--;

214 
n£cs2
 += 1000000000;

217 
n£cs2
 -
n£cs1
;

218 
£cs2
 -
£cs1
;

221 i‡(
£cs2
==0 && 
n£cs2
 < 40*2000) {

222 
	`k¥ötf
("cv_waôÅook o∆y %uÇs\n", 
n£cs2
);

223 
	`k¥ötf
("That'sÅoo fast... you must be "

225 
	`V
(
d⁄e£m
);

226 
	`thªad_exô
();

230 
	`k¥ötf
("Thªad %lu\n", 
num
);

231 
ã°vÆ1
 = (ã°vÆ1 + 
NTHREADS
 - 1)%NTHREADS;

237 
j
=0; j<3000; j++);

240 
	`cv_brﬂdˇ°
(
ã°cv
, 
ã°lock
);

241 
	`lock_ªÀa£
(
ã°lock
);

243 
	`V
(
d⁄e£m
);

244 
	}
}

247 
	$cvã°
(
«rgs
, **
¨gs
)

250 
i
, 
ªsu…
;

252 ()
«rgs
;

253 ()
¨gs
;

255 
	`öôôems
();

256 
	`k¥ötf
("Starting CVÅest...\n");

257 
	`k¥ötf
("Threads shouldÖrint out inÑeverse order.\n");

259 
ã°vÆ1
 = 
NTHREADS
-1;

261 
i
=0; i<
NTHREADS
; i++) {

262 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
i
, 
cvã°thªad
,

263 
NULL
);

264 i‡(
ªsu…
) {

265 
	`∑nic
("cvtest:Åhread_fork failed: %s\n",

266 
	`°ªº‹
(
ªsu…
));

269 
i
=0; i<
NTHREADS
; i++) {

270 
	`P
(
d⁄e£m
);

273 
	`k¥ötf
("CVÅest done\n");

276 
	}
}

	@test/threadtest.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<synch.h
>

7 
	~<thªad.h
>

8 
	~<ã°.h
>

10 
	#NTHREADS
 8

	)

12 
£m≠h‹e
 *
	gt£m
 = 
NULL
;

14 
lock
 *
	gã°î
;

15 
cv
 *
	gc⁄d
;

19 
	$öô_£m
()

21 i‡(
t£m
==
NULL
) {

22 
t£m
 = 
	`£m_¸óã
("tsem", 0);

23 i‡(
t£m
 =
NULL
) {

24 
	`∑nic
("threadtest: sem_create failed\n");

27 
	}
}

31 
	$loudthªad
(*
junk
, 
num
)

33 
ch
 = '0' + 
num
;

34 
i
;

36 ()
junk
;

37 
i
=0; i<120; i++) {

38 
	`lock_acquúe
(
ã°î
);

39 
	`putch
(
ch
);

40 
	`lock_ªÀa£
(
ã°î
);

42 
	`V
(
t£m
);

43 
	}
}

57 
	$quõâhªad
(*
junk
, 
num
)

59 
ch
 = '0' + 
num
;

60 vﬁ©ûê
i
;

62 ()
junk
;

64 
	`putch
(
ch
);

65 
i
=0; i<200000; i++);

66 
	`putch
(
ch
);

68 
	`V
(
t£m
);

69 
	}
}

73 
	$ru¡hªads
(
dﬁoud
)

75 
«me
[16];

76 
i
, 
ªsu…
;

78 
i
=0; i<
NTHREADS
; i++) {

79 
	`¢¥ötf
(
«me
, “ame), "thªadã°%d", 
i
);

80 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
i
,

81 
dﬁoud
 ? 
loudthªad
 : 
quõâhªad
,

82 
NULL
);

83 i‡(
ªsu…
) {

84 
	`∑nic
("threadtest:Åhread_fork failed %s)\n",

85 
	`°ªº‹
(
ªsu…
));

89 
i
=0; i<
NTHREADS
; i++) {

90 
	`P
(
t£m
);

92 
	}
}

96 
	$thªadã°
(
«rgs
, **
¨gs
)

98 ()
«rgs
;

99 ()
¨gs
;

101 
	`öô_£m
();

102 
ã°î
 = 
	`lock_¸óã
("tt1running");

103 
c⁄d
 = 
	`cv_¸óã
("order");

104 
	`k¥ötf
("StartingÅhreadÅest...\n");

105 
	`ru¡hªads
(1);

106 
	`k¥ötf
("\nThreadÅest done.\n");

109 
	}
}

112 
	$thªadã°2
(
«rgs
, **
¨gs
)

114 ()
«rgs
;

115 ()
¨gs
;

118 
ã°î
 = 
	`lock_¸óã
("tt2Ñunning\n");

119 
	`k¥ötf
("StartingÅhreadÅest 2...\n");

120 
	`ru¡hªads
(0);

121 
	`k¥ötf
("\nThreadÅest 2 done.\n");

124 
	}
}

	@test/tt3.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<machöe/•l.h
>

7 
	~<synch.h
>

8 
	~<thªad.h
>

9 
	~<ã°.h
>

11 
	~"›t-synch¥obs.h
"

15 #i‡
OPT_SYNCHPROBS


16 
	#DIM
 10

	)

18 
	#DIM
 70

	)

22 
	#SLEEPALOT_PRINTS
 20

	)

23 
	#SLEEPALOT_ITERS
 4

	)

25 
	#WAKER_WAKES
 100

	)

27 
	#COMPUTE_ITERS
 10

	)

29 
	#NWAITADDRS
 12

	)

30 c⁄° 
	gwaôaddrs
[
NWAITADDRS
];

32 vﬁ©ûê
	gwakîd⁄e
;

33 
£m≠h‹e
 *
	gwakî£m
;

34 
£m≠h‹e
 *
	gd⁄e£m
;

38 
	$£tup
()

40 i‡(
wakî£m
 =
NULL
) {

41 
wakî£m
 = 
	`£m_¸óã
("wakersem", 1);

43 i‡(
d⁄e£m
 =
NULL
) {

44 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

46 
wakîd⁄e
 = 0;

47 
	}
}

51 
	$¶ì∑lŸ_thªad
(*
junk
, 
num
)

53 
i
, 
j
, 
•l
;

55 ()
junk
;

57 
i
=0; i<
SLEEPALOT_PRINTS
; i++) {

58 
j
=0; j<
SLEEPALOT_ITERS
; j++) {

59 
•l
 = 
	`•lhigh
();

60 
	`thªad_¶ìp
(&
waôaddrs
[
	`øndom
()%
NWAITADDRS
]);

61 
	`•lx
(
•l
);

63 
	`k¥ötf
("[%lu]", 
num
);

65 
	`V
(
d⁄e£m
);

66 
	}
}

70 
	$wakî_thªad
(*
junk1
, 
junk2
)

72 
i
, 
•l
, 
d⁄e
;

74 ()
junk1
;

75 ()
junk2
;

78 
	`P
(
wakî£m
);

79 
d⁄e
 = 
wakîd⁄e
;

80 
	`V
(
wakî£m
);

81 i‡(
d⁄e
) {

85 
i
=0; i<
WAKER_WAKES
; i++) {

86 
•l
 = 
	`•lhigh
();

87 
	`thªad_wakeup
(&
waôaddrs
[
	`øndom
()%
NWAITADDRS
]);

88 
	`•lx
(
•l
);

90 
	`thªad_yõld
();

93 
	`V
(
d⁄e£m
);

94 
	}
}

98 
	$make_¶ì∑lŸs
(
howm™y
)

100 
«me
[16];

101 
i
, 
ªsu…
;

103 
i
=0; i<
howm™y
; i++) {

104 
	`¢¥ötf
(
«me
, “ame), "¶ì∑lŸ%d", 
i
);

105 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
i
, 
¶ì∑lŸ_thªad
, NULL);

106 i‡(
ªsu…
) {

107 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

110 
ªsu…
 = 
	`thªad_f‹k
("wakî", 
NULL
, 0, 
wakî_thªad
, NULL);

111 i‡(
ªsu…
) {

112 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

114 
	}
}

118 
	$compuã_thªad
(*
junk1
, 
num
)

120 
	sm©rix
 {

121 
m
[
DIM
][DIM];

123 
m©rix
 *
m1
, *
m2
, *
m3
;

124 
tŸ
;

125 
i
, 
j
, 
k
, 
m
;

126 
u_öt32_t
 
ønd
;

128 ()
junk1
;

130 
m1
 = 
	`kmÆloc
((
m©rix
));

131 
	`as£π
(
m1
 !
NULL
);

132 
m2
 = 
	`kmÆloc
((
m©rix
));

133 
	`as£π
(
m2
 !
NULL
);

134 
m3
 = 
	`kmÆloc
((
m©rix
));

135 
	`as£π
(
m3
 !
NULL
);

137 
m
=0; m<
COMPUTE_ITERS
; m++) {

139 
i
=0; i<
DIM
; i++) {

140 
j
=0; j<
DIM
; j++) {

141 
ønd
 = 
	`øndom
();

142 
m1
->
m
[
i
][
j
] = 
ønd
 >> 16;

143 
m2
->
m
[
i
][
j
] = 
ønd
 & 0xffff;

147 
i
=0; i<
DIM
; i++) {

148 
j
=0; j<
DIM
; j++) {

149 
tŸ
 = 0;

150 
k
=0; k<
DIM
; k++) {

151 
tŸ
 +
m1
->
m
[
i
][
k
] * 
m2
->m[k][
j
];

153 
m3
->
m
[
i
][
j
] = 
tŸ
;

157 
tŸ
 = 0;

158 
i
=0; i<
DIM
; i++) {

159 
tŸ
 +
m3
->
m
[
i
][i];

162 
	`k¥ötf
("{%lu: %u}", 
num
, (Ë
tŸ
);

163 
	`thªad_yõld
();

166 
	`k‰ì
(
m1
);

167 
	`k‰ì
(
m2
);

168 
	`k‰ì
(
m3
);

170 
	`V
(
d⁄e£m
);

171 
	}
}

175 
	$make_compuãs
(
howm™y
)

177 
«me
[16];

178 
i
, 
ªsu…
;

180 
i
=0; i<
howm™y
; i++) {

181 
	`¢¥ötf
(
«me
, “ame), "compuã%d", 
i
);

182 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
i
, 
compuã_thªad
, NULL);

183 i‡(
ªsu…
) {

184 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

187 
	}
}

191 
	$föish
(
howm™ytŸÆ
)

193 
i
;

194 
i
=0; i<
howm™ytŸÆ
; i++) {

195 
	`P
(
d⁄e£m
);

197 
	`P
(
wakî£m
);

198 
wakîd⁄e
 = 1;

199 
	`V
(
wakî£m
);

200 
	`P
(
d⁄e£m
);

201 
	}
}

205 
	$ru¡e°3
(
n¶ìps
, 
ncompuãs
)

207 
	`£tup
();

208 
	`k¥ötf
("StartingÅhreadÅest 3 (%d [sleepalots], %d {computes}, "

210 
n¶ìps
, 
ncompuãs
);

211 
	`make_¶ì∑lŸs
(
n¶ìps
);

212 
	`make_compuãs
(
ncompuãs
);

213 
	`föish
(
n¶ìps
+
ncompuãs
);

214 
	`k¥ötf
("\nThreadÅest 3 done\n");

215 
	}
}

218 
	$thªadã°3
(
«rgs
, **
¨gs
)

220 i‡(
«rgs
==1) {

221 
	`ru¡e°3
(5, 2);

223 i‡(
«rgs
==3) {

224 
	`ru¡e°3
(
	`©oi
(
¨gs
[1]),átoi(args[2]));

227 
	`k¥ötf
("Usage:Åt3 [sleepthreads computethreads]\n");

231 
	}
}

	@thread/hardclock.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<machöe/•l.h
>

4 
	~<thªad.h
>

5 
	~<˛ock.h
>

10 
	glbﬁt
;

12 
	glbﬁt_cou¡î
;

19 
	$h¨d˛ock
()

26 
lbﬁt_cou¡î
++;

27 i‡(
lbﬁt_cou¡î
 >
HZ
) {

28 
lbﬁt_cou¡î
 = 0;

29 
	`thªad_wakeup
(&
lbﬁt
);

32 
	`thªad_yõld
();

33 
	}
}

39 
	$˛ock¶ìp
(
num_£cs
)

41 
s
;

43 
s
 = 
	`•lhigh
();

44 
num_£cs
 > 0) {

45 
	`thªad_¶ìp
(&
lbﬁt
);

46 
num_£cs
--;

48 
	`•lx
(
s
);

49 
	}
}

	@thread/scheduler.c

8 
	~<ty≥s.h
>

9 
	~<lib.h
>

10 
	~<scheduÀr.h
>

11 
	~<thªad.h
>

12 
	~<machöe/•l.h
>

13 
	~<queue.h
>

20 
queue
 *
	grunqueue
;

22 
queue
 *
	gcv_queue
;

27 
	$scheduÀr_boŸ°øp
()

29 
runqueue
 = 
	`q_¸óã
(32);

30 i‡(
runqueue
 =
NULL
) {

31 
	`∑nic
("scheduler: CouldÇot createÑun queue\n");

33 
	}
}

43 
	$scheduÀr_¥óŒoˇã
(
¡hªads
)

45 
	`as£π
(
cur•l
>0);

46  
	`q_¥óŒoˇã
(
runqueue
, 
¡hªads
);

47 
	}
}

56 
	$scheduÀr_kûœŒ
()

58 
	`as£π
(
cur•l
>0);

59 !
	`q_em±y
(
runqueue
)) {

60 
thªad
 *
t
 = 
	`q_ªmhód
(
runqueue
);

61 
	`k¥ötf
("scheduÀr: Dr›pögÅhªad %s.\n", 
t
->
t_«me
);

63 
	}
}

73 
	$scheduÀr_shutdown
()

75 
	`scheduÀr_kûœŒ
();

77 
	`as£π
(
cur•l
>0);

78 
	`q_de°roy
(
runqueue
);

79 
runqueue
 = 
NULL
;

80 
	}
}

88 
thªad
 *

89 
	$scheduÀr
()

92 
	`as£π
(
cur•l
>0);

94 
	`q_em±y
(
runqueue
)) {

95 
	`˝u_idÀ
();

105  
	`q_ªmhód
(
runqueue
);

106 
	}
}

113 
	$make_ru¬abÀ
(
thªad
 *
t
)

116 
	`as£π
(
cur•l
>0);

118  
	`q_addèû
(
runqueue
, 
t
);

119 
	}
}

125 
	$¥öt_run_queue
()

128 
•l
 = 
	`•lhigh
();

130 
i
,
k
=0;

131 
i
 = 
	`q_gë°¨t
(
runqueue
);

133 
i
!=
	`q_gëíd
(
runqueue
)) {

134 
thªad
 *
t
 = 
	`q_gëguy
(
runqueue
, 
i
);

135 
	`k¥ötf
(" %2d: %†%p\n", 
k
, 
t
->
t_«me
,Å->
t_¶ì∑ddr
);

136 
i
=(i+1)%
	`q_gësize
(
runqueue
);

137 
k
++;

140 
	`•lx
(
•l
);

141 
	}
}

	@thread/synch.c

6 
	~<ty≥s.h
>

7 
	~<lib.h
>

8 
	~<synch.h
>

9 
	~<thªad.h
>

10 
	~<cuπhªad.h
>

11 
	~<machöe/•l.h
>

12 
	~<queue.h
>

18 
£m≠h‹e
 *

19 
	$£m_¸óã
(c⁄° *
«mórg
, 
öôül_cou¡
)

21 
£m≠h‹e
 *
£m
;

23 
	`as£π
(
öôül_cou¡
 >= 0);

25 
£m
 = 
	`kmÆloc
((
£m≠h‹e
));

26 i‡(
£m
 =
NULL
) {

27  
NULL
;

30 
£m
->
«me
 = 
	`k°rdup
(
«mórg
);

31 i‡(
£m
->
«me
 =
NULL
) {

32 
	`k‰ì
(
£m
);

33  
NULL
;

36 
£m
->
cou¡
 = 
öôül_cou¡
;

37  
£m
;

38 
	}
}

41 
	$£m_de°roy
(
£m≠h‹e
 *
£m
)

43 
•l
;

44 
	`as£π
(
£m
 !
NULL
);

46 
•l
 = 
	`•lhigh
();

47 
	`as£π
(
	`thªad_has¶ì≥rs
(
£m
)==0);

48 
	`•lx
(
•l
);

59 
	`k‰ì
(
£m
->
«me
);

60 
	`k‰ì
(
£m
);

61 
	}
}

64 
	$P
(
£m≠h‹e
 *
£m
)

66 
•l
;

67 
	`as£π
(
£m
 !
NULL
);

75 
	`as£π
(
ö_öãºu±
==0);

77 
•l
 = 
	`•lhigh
();

78 
£m
->
cou¡
==0) {

79 
	`thªad_¶ìp
(
£m
);

81 
	`as£π
(
£m
->
cou¡
>0);

82 
£m
->
cou¡
--;

83 
	`•lx
(
•l
);

84 
	}
}

87 
	$V
(
£m≠h‹e
 *
£m
)

89 
•l
;

90 
	`as£π
(
£m
 !
NULL
);

91 
•l
 = 
	`•lhigh
();

92 
£m
->
cou¡
++;

93 
	`as£π
(
£m
->
cou¡
>0);

94 
	`thªad_wakeup
(
£m
);

95 
	`•lx
(
•l
);

96 
	}
}

102 
lock
 *

103 
	$lock_¸óã
(c⁄° *
«me
)

105 
lock
 *lock;

107 
lock
 = 
	`kmÆloc
((lock));

108 i‡(
lock
 =
NULL
) {

109  
NULL
;

112 
lock
->
«me
 = 
	`k°rdup
(name);

113 i‡(
lock
->
«me
 =
NULL
) {

114 
	`k‰ì
(
lock
);

115  
NULL
;

118 
lock
->
thªad_addr
 = 
NULL
;

120  
lock
;

121 
	}
}

124 
	$lock_de°roy
(
lock
 *lock)

130 
	`as£π
(
lock
 !
NULL
);

132 
	`k‰ì
(
lock
->
«me
);

133 
	`k‰ì
(
lock
);

138 
	}
}

141 
	$lock_acquúe
(
lock
 *lock)

148 
•l
;

149 
	`as£π
(
lock
 !
NULL
);

151 
	`as£π
(
ö_öãºu±
==0);

152 
•l
 = 
	`•lhigh
();

154 
lock
->
thªad_addr
 !
NULL
 && (
	`lock_do_i_hﬁd
(lock) != 1)){

155 
	`thªad_¶ìp
(
lock
);

157 
lock
->
thªad_addr
 = 
cuπhªad
;

158 
	`•lx
(
•l
);

162 
	}
}

165 
	$lock_ªÀa£
(
lock
 *lock)

171 
•l
;

172 
	`as£π
(
lock
 !
NULL
);

174 
	`as£π
(
ö_öãºu±
==0);

175 
•l
 = 
	`•lhigh
();

177 i‡(
	`lock_do_i_hﬁd
(
lock
) == 1){

178 
lock
->
thªad_addr
 = 
NULL
;

179 
	`thªad_wakeup
(
lock
);

181 
	`•lx
(
•l
);

184 
	}
}

187 
	$lock_do_i_hﬁd
(
lock
 *lock)

189 i‡(
lock
 =
NULL
)

191 i‡(
lock
->
thªad_addr
 =
cuπhªad
)

198 
	}
}

205 
cv
 *

206 
	$cv_¸óã
(c⁄° *
«me
)

208 
cv
 *cv;

210 
cv
 = 
	`kmÆloc
((cv));

211 i‡(
cv
 =
NULL
) {

212  
NULL
;

215 
cv
->
«me
 = 
	`k°rdup
(name);

216 i‡(
cv
->
«me
==
NULL
) {

217 
	`k‰ì
(
cv
);

218  
NULL
;

221 
cv
->
cv_queue
 = 
	`q_¸óã
(32);

222 i‡(
cv
->
cv_queue
 =
NULL
) {

223 
	`∑nic
("scheduler: CouldÇot createÑun queue\n");

226  
cv
;

227 
	}
}

230 
	$cv_de°roy
(
cv
 *cv)

232 
	`as£π
(
cv
 !
NULL
);

234 i‡(
cv
->
cv_queue
 !
NULL
){

235 
	`q_de°roy
(
cv
->
cv_queue
);

238 i‡(
cv
->
«me
!=
NULL
) {

239 
	`k‰ì
(
cv
->
«me
);

241 
	`k‰ì
(
cv
);

243 
	}
}

246 
	$cv_waô
(
cv
 *cv, 
lock
 *lock)

248 
	`q_addèû
(
cv
->
cv_queue
, 
cuπhªad
);

250 
•l
 = 
	`•lhigh
();

251 
	`lock_ªÀa£
(
lock
);

252 
	`thªad_¶ìp
(
cv
);

254 
	`lock_acquúe
(
lock
);

255 
	`•lx
(
•l
);

257 
	}
}

265 
	$cv_sig«l
(
cv
 *cv, 
lock
 *lock)

267 
•l
 = 
	`•lhigh
();

268 
	`as£π
 (
lock
 !
NULL
);

270 i‡(
	`q_em±y
(
cv
->
cv_queue
)){

273 
	`thªad_wakeup_hód
(
cv
, cv->
cv_queue
);

275 
	`•lx
(
•l
);

277 
	}
}

286 
	$cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock)

288 
•l
 = 
	`•lhigh
();

291 
	`thªad_wakeup
(
cv
);

293 
	`•lx
(
•l
);

294 
	}
}

	@thread/thread.c

4 
	~<ty≥s.h
>

5 
	~<lib.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<¨øy.h
>

8 
	~<machöe/•l.h
>

9 
	~<machöe/pcb.h
>

10 
	~<thªad.h
>

11 
	~<cuπhªad.h
>

12 
	~<scheduÀr.h
>

13 
	~<addr•a˚.h
>

14 
	~<vnode.h
>

15 
	~"›t-synch¥obs.h
"

16 
	~<f‹k.h
>

21 
	mS_RUN
,

22 
	mS_READY
,

23 
	mS_SLEEP
,

24 
	mS_ZOMB
,

25 } 
	tthªad°©e_t
;

28 
thªad
 *
	gcuπhªad
;

31 
¨øy
 *
	g¶ì≥rs
;

34 
¨øy
 *
	gzombõs
;

37 
	gnumthªads
;

45 
thªad
 *

46 
	$thªad_¸óã
(c⁄° *
«me
)

48 
thªad
 *thªad = 
	`kmÆloc
((thread));

49 i‡(
thªad
==
NULL
) {

50  
NULL
;

52 
thªad
->
t_«me
 = 
	`k°rdup
(
«me
);

53 i‡(
thªad
->
t_«me
==
NULL
) {

54 
	`k‰ì
(
thªad
);

55  
NULL
;

57 
thªad
->
t_¶ì∑ddr
 = 
NULL
;

58 
thªad
->
t_°ack
 = 
NULL
;

60 
thªad
->
pid
 = 0;

61 
thªad
->
∑ª¡_pid
 = 0;

63 
thªad
->
t_vm•a˚
 = 
NULL
;

65 
thªad
->
t_cwd
 = 
NULL
;

70  
thªad
;

71 
	}
}

81 
	$thªad_de°roy
(
thªad
 *thread)

83 
	`as£π
(
thªad
 !
cuπhªad
);

89 
	`as£π
(
thªad
->
t_vm•a˚
==
NULL
);

90 
	`as£π
(
thªad
->
t_cwd
==
NULL
);

92 i‡(
thªad
->
t_°ack
) {

93 
	`k‰ì
(
thªad
->
t_°ack
);

96 
	`k‰ì
(
thªad
->
t_«me
);

97 
	`k‰ì
(
thªad
);

98 
	}
}

107 
	$ex‹ci£
()

109 
i
, 
ªsu…
;

111 
	`as£π
(
cur•l
>0);

113 
i
=0; i<
	`¨øy_gënum
(
zombõs
); i++) {

114 
thªad
 *
z
 = 
	`¨øy_gëguy
(
zombõs
, 
i
);

115 
	`as£π
(
z
!=
cuπhªad
);

116 
	`thªad_de°roy
(
z
);

118 
ªsu…
 = 
	`¨øy_£tsize
(
zombõs
, 0);

120 
	`as£π
(
ªsu…
==0);

121 
	}
}

129 
	$thªad_kûœŒ
()

131 
i
, 
ªsu…
;

133 
	`as£π
(
cur•l
>0);

140 
i
=0; i<
	`¨øy_gënum
(
¶ì≥rs
); i++) {

141 
thªad
 *
t
 = 
	`¨øy_gëguy
(
¶ì≥rs
, 
i
);

142 
	`k¥ötf
("¶ìp: Dr›pögÅhªad %s\n", 
t
->
t_«me
);

154 
ªsu…
 = 
	`¨øy_£tsize
(
¶ì≥rs
, 0);

156 
	`as£π
(
ªsu…
==0);

157 
	}
}

163 
	$thªad_∑nic
()

165 
	`as£π
(
cur•l
 > 0);

167 
	`thªad_kûœŒ
();

168 
	`scheduÀr_kûœŒ
();

169 
	}
}

174 
thªad
 *

175 
	$thªad_boŸ°øp
()

177 
thªad
 *
me
;

180 
¶ì≥rs
 = 
	`¨øy_¸óã
();

181 i‡(
¶ì≥rs
==
NULL
) {

182 
	`∑nic
("Cannot create sleepersárray\n");

185 
zombõs
 = 
	`¨øy_¸óã
();

186 i‡(
zombõs
==
NULL
) {

187 
	`∑nic
("Cannot create zombiesárray\n");

194 
me
 = 
	`thªad_¸óã
("<boot/menu>");

195 i‡(
me
==
NULL
) {

196 
	`∑nic
("thread_bootstrap: Out of memory\n");

205 
	`md_öôpcb0
(&
me
->
t_pcb
);

208 
cuπhªad
 = 
me
;

211 
numthªads
 = 1;

214  
me
;

215 
	}
}

221 
	$thªad_shutdown
()

223 
	`¨øy_de°roy
(
¶ì≥rs
);

224 
¶ì≥rs
 = 
NULL
;

225 
	`¨øy_de°roy
(
zombõs
);

226 
zombõs
 = 
NULL
;

229 
	}
}

237 
thªad_f‹k
(c⁄° *
«me
,

238 *
d©a1
, 
d©a2
,

239 (*
func
)(*, ),

240 
thªad
 **
ªt
)

242 
thªad
 *
√wguy
;

243 
s
, 
ªsu…
;

246 
√wguy
 = 
	`thªad_¸óã
(
«me
);

251 
√wguy
->
∑ª¡_pid
 = 
cuπhªad
->
pid
;

253 i‡(
√wguy
==
NULL
) {

254  
ENOMEM
;

258 
√wguy
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

259 i‡(
√wguy
->
t_°ack
==
NULL
) {

260 
	`k‰ì
(
√wguy
->
t_«me
);

261 
	`k‰ì
(
√wguy
);

262  
ENOMEM
;

266 
√wguy
->
t_°ack
[0] = 0xae;

267 
√wguy
->
t_°ack
[1] = 0x11;

268 
√wguy
->
t_°ack
[2] = 0xda;

269 
√wguy
->
t_°ack
[3] = 0x33;

272 i‡(
cuπhªad
->
t_cwd
 !
NULL
) {

273 
	`VOP_INCREF
(
cuπhªad
->
t_cwd
);

274 
√wguy
->
t_cwd
 = 
cuπhªad
->t_cwd;

278 
	`md_öôpcb
(&
√wguy
->
t_pcb
,Çewguy->
t_°ack
, 
d©a1
, 
d©a2
, 
func
);

281 
s
 = 
	`•lhigh
();

287 
ªsu…
 = 
	`¨øy_¥óŒoˇã
(
¶ì≥rs
, 
numthªads
+1);

288 i‡(
ªsu…
) {

289 
Áû
;

291 
ªsu…
 = 
	`¨øy_¥óŒoˇã
(
zombõs
, 
numthªads
+1);

292 i‡(
ªsu…
) {

293 
Áû
;

297 
ªsu…
 = 
	`scheduÀr_¥óŒoˇã
(
numthªads
+1);

298 i‡(
ªsu…
) {

299 
Áû
;

303 
ªsu…
 = 
	`make_ru¬abÀ
(
√wguy
);

304 i‡(
ªsu…
 != 0) {

305 
Áû
;

314 
numthªads
++;

317 
	`•lx
(
s
);

325 i‡(
ªt
 !
NULL
) {

326 *
ªt
 = 
√wguy
;

331 
Áû
:

332 
	`•lx
(
s
);

333 i‡(
√wguy
->
t_cwd
 !
NULL
) {

334 
	`VOP_DECREF
(
√wguy
->
t_cwd
);

336 
	`k‰ì
(
√wguy
->
t_°ack
);

337 
	`k‰ì
(
√wguy
->
t_«me
);

338 
	`k‰ì
(
√wguy
);

340  
ªsu…
;

341 
	}
}

348 
	$mi_swôch
(
thªad°©e_t
 
√xt°©e
)

350 
thªad
 *
cur
, *
√xt
;

351 
ªsu…
;

354 
	`as£π
(
cur•l
>0);

356 i‡(
cuπhªad
 !
NULL
 && cuπhªad->
t_°ack
 != NULL) {

364 
	`as£π
(
cuπhªad
->
t_°ack
[0] == ()0xae);

365 
	`as£π
(
cuπhªad
->
t_°ack
[1] == ()0x11);

366 
	`as£π
(
cuπhªad
->
t_°ack
[2] == ()0xda);

367 
	`as£π
(
cuπhªad
->
t_°ack
[3] == ()0x33);

375 i‡(
cuπhªad
 =
NULL
) {

378 
cur
 = 
cuπhªad
;

379 
cuπhªad
 = 
NULL
;

386 i‡(
√xt°©e
==
S_READY
) {

387 
ªsu…
 = 
	`make_ru¬abÀ
(
cur
);

389 i‡(
√xt°©e
==
S_SLEEP
) {

394 
ªsu…
 = 
	`¨øy_add
(
¶ì≥rs
, 
cur
);

397 
	`as£π
(
√xt°©e
==
S_ZOMB
);

398 
ªsu…
 = 
	`¨øy_add
(
zombõs
, 
cur
);

400 
	`as£π
(
ªsu…
==0);

406 
√xt
 = 
	`scheduÀr
();

409 
cuπhªad
 = 
√xt
;

415 
	`md_swôch
(&
cur
->
t_pcb
, &
√xt
->t_pcb);

425 
	`ex‹ci£
();

427 i‡(
cuπhªad
->
t_vm•a˚
) {

428 
	`as_a˘iv©e
(
cuπhªad
->
t_vm•a˚
);

430 
	}
}

440 
	$thªad_exô
()

442 i‡(
cuπhªad
->
t_°ack
 !
NULL
) {

450 
	`as£π
(
cuπhªad
->
t_°ack
[0] == ()0xae);

451 
	`as£π
(
cuπhªad
->
t_°ack
[1] == ()0x11);

452 
	`as£π
(
cuπhªad
->
t_°ack
[2] == ()0xda);

453 
	`as£π
(
cuπhªad
->
t_°ack
[3] == ()0x33);

456 
	`•lhigh
();

458 i‡(
cuπhªad
->
t_vm•a˚
) {

463 
addr•a˚
 *
as
 = 
cuπhªad
->
t_vm•a˚
;

464 
cuπhªad
->
t_vm•a˚
 = 
NULL
;

465 
	`as_de°roy
(
as
);

468 i‡(
cuπhªad
->
t_cwd
) {

469 
	`VOP_DECREF
(
cuπhªad
->
t_cwd
);

470 
cuπhªad
->
t_cwd
 = 
NULL
;

473 
	`as£π
(
numthªads
>0);

474 
numthªads
--;

475 
	`mi_swôch
(
S_ZOMB
);

477 
	`∑nic
("Thread came back fromÅhe dead!\n");

478 
	}
}

484 
	$thªad_yõld
()

486 
•l
 = 
	`•lhigh
();

489 
	`as£π
(
¶ì≥rs
 !
NULL
);

491 
	`mi_swôch
(
S_READY
);

492 
	`•lx
(
•l
);

493 
	}
}

507 
	$thªad_¶ìp
(c⁄° *
addr
)

510 
	`as£π
(
ö_öãºu±
==0);

512 
cuπhªad
->
t_¶ì∑ddr
 = 
addr
;

513 
	`mi_swôch
(
S_SLEEP
);

514 
cuπhªad
->
t_¶ì∑ddr
 = 
NULL
;

515 
	}
}

522 
	$thªad_wakeup
(c⁄° *
addr
)

524 
i
, 
ªsu…
;

527 
	`as£π
(
cur•l
>0);

531 
i
=0; i<
	`¨øy_gënum
(
¶ì≥rs
); i++) {

532 
thªad
 *
t
 = 
	`¨øy_gëguy
(
¶ì≥rs
, 
i
);

533 i‡(
t
->
t_¶ì∑ddr
 =
addr
) {

536 
	`¨øy_ªmove
(
¶ì≥rs
, 
i
);

539 
i
--;

545 
ªsu…
 = 
	`make_ru¬abÀ
(
t
);

546 
	`as£π
(
ªsu…
==0);

549 
	}
}

552 
	$thªad_wakeup_hód
(c⁄° *
addr
, 
queue
 *
cv_queue
)

555 
i
, 
ªsu…
;

556 
thªad
 *
hód
 = 
	`q_ªmhód
(
cv_queue
);

559 
	`as£π
(
cur•l
>0);

563 
i
=0; i<
	`¨øy_gënum
(
¶ì≥rs
); i++) {

565 
thªad
 *
t
 = 
	`¨øy_gëguy
(
¶ì≥rs
, 
i
);

566 i‡(
t
->
t_¶ì∑ddr
 =
addr
 && 
hód
 ==Å) {

568 
	`¨øy_ªmove
(
¶ì≥rs
, 
i
);

573 
ªsu…
 = 
	`make_ru¬abÀ
(
t
);

575 
	`as£π
(
ªsu…
==0);

585 
	}
}

592 
	$thªad_has¶ì≥rs
(c⁄° *
addr
)

594 
i
;

597 
	`as£π
(
cur•l
>0);

599 
i
=0; i<
	`¨øy_gënum
(
¶ì≥rs
); i++) {

600 
thªad
 *
t
 = 
	`¨øy_gëguy
(
¶ì≥rs
, 
i
);

601 i‡(
t
->
t_¶ì∑ddr
 =
addr
) {

606 
	}
}

612 
	$thªad_joö
(
thªad
 *
chûd_thªad
, *
°©us
)

614 
has_exôed
 = 0;

616 i‡(
has_exôed
 == 0){

617 
•l
 = 
	`•lhigh
();

619 
has_exôed
 = 
	`pidli°_£¨ch
(
chûd_thªad
->
pid
, 
°©us
);

621 i‡(
has_exôed
 == 1){

623 
	`•lx
(
•l
);

628 
	`thªad_¶ìp
(
chûd_thªad
->
pid
);

629 
	`•lx
(
•l
);

632 
•l
 = 
	`•lhigh
();

633 
	`ex‹ci£
();

634 
	`•lx
(
•l
);

635 
	}
}

644 
mi_thªad°¨t
(*
d©a1
, 
d©a2
,

645 (*
func
)(*, ))

648 i‡(
cuπhªad
->
t_vm•a˚
) {

649 
	`as_a˘iv©e
(
cuπhªad
->
t_vm•a˚
);

653 
	`•l0
();

655 #i‡
OPT_SYNCHPROBS


658 
i
, 
n
;

659 
n
 = 
	`øndom
()%161 +Ñandom()%161;

660 
i
=0; i<
n
; i++) {

661 
	`thªad_yõld
();

667 
	`func
(
d©a1
, 
d©a2
);

670 
	`thªad_exô
();

671 
	}
}

	@userprog/execv.c

7 
	~<ty≥s.h
>

8 
	~<kîn/uni°d.h
>

9 
	~<kîn/î∫o.h
>

10 
	~<lib.h
>

11 
	~<addr•a˚.h
>

12 
	~<thªad.h
>

13 
	~<cuπhªad.h
>

14 
	~<vm.h
>

15 
	~<vfs.h
>

16 
	~<ã°.h
>

17 
	~<sysˇŒ.h
>

18 
	~<machöe/•l.h
>

19 
	~<å≠‰ame.h
>

20 
	~<synch.h
>

21 
	~<scheduÀr.h
>

22 
	~<dev.h
>

23 
	~<sysˇŒ.h
>

24 
	~<vîsi⁄.h
>

25 
	~<thªad.h
>

26 
	~<kîn/limôs.h
>

28 
	#KERNEL_ADDR
 0x80000000

	)

37 
	$sys_execv
(c⁄° *
¥ogøm
, **
¨gs
)

39 if(
¥ogøm
 =
NULL
)

41  
EFAULT
;

44 if(
¨gs
==
NULL
Ë 
EFAULT
;

47 
i
, 
num¨gs
, 
numch¨s
;

48 
a˘uÆ
, 
off£t
;

49 **
¨gumíts
;

50 *
¥og«me
;

51 *
¨goff£ts
;

52 
tŸÆ_d©a
;

54 
numch¨s
 = 0;

56 
num¨gs
=0;
¨gs
[num¨gs]!=
NULL
;numargs++);

58 
¨gumíts
 = (**)
	`kmÆloc
(
num¨gs
*(*));

60 i‡(
¨gumíts
==
NULL
Ë 
ENOMEM
;

61 
i
=0;i<
num¨gs
;i++){

62 
¨gumíts
[
i
]=
	`kmÆloc
(
	`°æí
(
¨gs
[i])*());

63 i‡(
¨gumíts
[
i
]==
NULL
Ë 
ENOMEM
;

65 
¨goff£ts
 = 
	`kmÆloc
(
num¨gs
*());

67 if(
	`°æí
(
¨gs
[0])>
PATH_MAX
Ë 
E2BIG
;

69 
¥og«me
 = 
	`kmÆloc
(
	`°æí
(
¥ogøm
)*());

70 i‡(
¥og«me
==
NULL
Ë 
ENOMEM
;

72 
	`c›yö°r
(
¥ogøm
, 
¥og«me
, 
	`°æí
’rogøm), &
a˘uÆ
);

74 
i
=1;i<
num¨gs
;i++) {

75 
	`c›yö°r
(
¨gs
[
i
], 
¨gumíts
[i], 
	`°æí
◊rgs[i]), &
a˘uÆ
);

79 
i
=0;i<
num¨gs
;i++) {

80 if(
	`°æí
(
¨gumíts
[
i
]Ë> såÀn(
¨gs
[i]))

81 
¨gumíts
[
i
][
	`°æí
(
¨gs
[i])] = '\0';

82 
numch¨s
 +
	`°æí
(
¨gumíts
[
i
]) + (16 - strlen(arguments[i])%16);

85 
¨gumíts
[
num¨gs
] = 
NULL
;

87 
off£t
 = 4*(
num¨gs
+1);

88 
¨goff£ts
[0] = 
off£t
;

90 
i
=1;i<
num¨gs
;i++)

91 
¨goff£ts
[
i
]˜rgoff£ts[i-1]+
	`°æí
(
¨gumíts
[i-1]) + (16 - strlen(arguments[i-1])%16);

94 
addr•a˚
 *
ﬁd_as
 = 
NULL
;

99 
	`as_de°roy
(
cuπhªad
->
t_vm•a˚
);

100 
cuπhªad
->
t_vm•a˚
 = 
NULL
;

103 
vnode
 *
v
;

104 
vaddr_t
 
íåypoöt
, 
°ack±r
;

105 
ªsu…
;

108 
ªsu…
 = 
	`vfs_›í
(
¥og«me
, 
O_RDONLY
, &
v
);

109 i‡(
ªsu…
) {

110  
EIO
;

114 
	`as£π
(
cuπhªad
->
t_vm•a˚
 =
NULL
);

117 
cuπhªad
->
t_vm•a˚
 = 
	`as_¸óã
();

118 i‡(
cuπhªad
->
t_vm•a˚
==
NULL
) {

119 
	`vfs_˛o£
(
v
);

120  
ENOMEM
;

124 
	`as_a˘iv©e
(
cuπhªad
->
t_vm•a˚
);

127 
ªsu…
 = 
	`lﬂd_ñf
(
v
, &
íåypoöt
);

128 i‡(
ªsu…
) {

130 
	`vfs_˛o£
(
v
);

131  
ªsu…
;

135 
	`vfs_˛o£
(
v
);

138 
ªsu…
 = 
	`as_deföe_°ack
(
cuπhªad
->
t_vm•a˚
, &
°ack±r
);

139 i‡(
ªsu…
) {

141  
ªsu…
;

144 
tŸÆ_d©a
 = (
num¨gs
+1)*(*Ë+ 
numch¨s
 + ();

145 
°ack±r
 -
tŸÆ_d©a
;

146 
cuπhªad
->
t_vm•a˚
->
as_°ackvba£
 = 
°ack±r
;

147 
¨goff£ts
[
num¨gs
] = 
tŸÆ_d©a
;

148 
vaddr_t
 
ãmp_°±r
 = 
°ack±r
;

149 
vaddr_t
 
§c
;

151 
	`c›yout
(&
num¨gs
, 
ãmp_°±r
, ());

152 
ãmp_°±r
 += ();

154 
i
 = 0; i < 
num¨gs
; i ++){

155 
§c
 = 
°ack±r
+4+
¨goff£ts
[
i
];

156 
	`c›yout
(&
§c
, 
ãmp_°±r
, (
¨gumíts
[
i
]));

157 
ãmp_°±r
 += (*);

160 
ãmp_°±r
 += (*);

162 
i
 = 0; i < 
num¨gs
; i ++){

163 
	`c›yout°r
(
¨gumíts
[
i
], 
ãmp_°±r
, 
	`°æí
◊rgumíts[i]), &
a˘uÆ
);

164 
ãmp_°±r
 +
	`°æí
(
¨gumíts
[
i
]) + (16 - strlen(arguments[i])%16);

168 
	`k‰ì
(
¨gumíts
);

169 
	`k‰ì
(
¨goff£ts
);

170 
	`k‰ì
(
¥og«me
);

173 
	`md_u£rmode
(
num¨gs
 , (
°ack±r
+4) ,

174 
°ack±r
, 
íåypoöt
);

177 
	`∑nic
("md_usermodeÑeturned\n");

178  
EINVAL
;

179 
	}
}

	@userprog/exit.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<machöe/•l.h
>

5 
	~<ã°.h
>

6 
	~<addr•a˚.h
>

7 
	~<å≠‰ame.h
>

8 
	~<synch.h
>

9 
	~<scheduÀr.h
>

10 
	~<dev.h
>

11 
	~<vfs.h
>

12 
	~<vm.h
>

13 
	~<sysˇŒ.h
>

14 
	~<vîsi⁄.h
>

15 
	~<hñlo.h
>

16 
	~<lib.h
>

17 
	~<cuπhªad.h
>

18 
	~<thªad.h
>

24 
	$sys_exô
(
exôcode
){

26 
•l
 = 
	`•lhigh
();

28 
	`pidli°_exô
(
cuπhªad
->
pid
, 
exôcode
);

30 
	`thªad_wakeup
(
cuπhªad
->
pid
);

31 
	`•lx
(
•l
);

32 
	`thªad_exô
();

34 
	}
}

	@userprog/fork.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<machöe/•l.h
>

5 
	~<ã°.h
>

6 
	~<addr•a˚.h
>

7 
	~<å≠‰ame.h
>

8 
	~<synch.h
>

9 
	~<scheduÀr.h
>

10 
	~<dev.h
>

11 
	~<vfs.h
>

12 
	~<vm.h
>

13 
	~<sysˇŒ.h
>

14 
	~<vîsi⁄.h
>

15 
	~<hñlo.h
>

16 
	~<lib.h
>

17 
	~<cuπhªad.h
>

18 
	~<thªad.h
>

19 
	~<f‹k.h
>

22 
	$öô_pid
() {

24 
globÆ_pid
=1;

25 
cuπhªad
->
pid
 = 1;

27 
pidli°
 = 
	`kmÆloc
((
pid_li°
));

28 
pidli°
->
pid
 = 1;

29 
pidli°
->
has_exôed
 = 0;

30 
pidli°
->
√xt
 = 
NULL
;

32 
	}
}

34 
pid_t
 
	$gë_globÆpid
(){

35  
globÆ_pid
;

36 
	}
}

38 
pid_t
 
	$gë_√wpid
() {

40 
globÆ_pid
++;

41  
globÆ_pid
;

42 
	}
}

46 
pid_t


47 
	$sys_f‹k
(
å≠‰ame
 *
∑ª¡_tf
){

54 
å≠‰ame
 *
∑ª¡_tf_c›y
 = 
	`kmÆloc
((trapframe));

55 i‡(
∑ª¡_tf_c›y
 =
NULL
){

58 
addr•a˚
 *
∑ª¡_as_c›y
 = 
NULL
;

60 
	`mem˝y
(
∑ª¡_tf_c›y
, 
∑ª¡_tf
, (
å≠‰ame
));

62 
	`as_c›y
(
cuπhªad
->
t_vm•a˚
, &
∑ª¡_as_c›y
);

64 i‡(
∑ª¡_as_c›y
 =
NULL
){

68 
thªad
* 
ãmp
;

69 
îr
 = 
	`thªad_f‹k
(
cuπhªad
->
t_«me
,(*)
∑ª¡_tf_c›y
, ()
∑ª¡_as_c›y
, (*)
md_f‹kíåy
, &
ãmp
);

70 i‡(
îr
) {

76 
	`lock_acquúe
(
pid_lock
);

78 
ãmp
->
pid
 = 
	`gë_√wpid
();

80 
pid_li°
 *
√w_pid
;

81 
√w_pid
 = 
	`pidli°_¸óã
(
	`gë_globÆpid
());

82 i‡(
√w_pid
 =
NULL
){

86 
pid_li°
 *
cuºít
 = 
pidli°
;

88 
cuºít
->
√xt
 !
NULL
)

89 
cuºít
 = cuºít->
√xt
;

91 
cuºít
->
√xt
 = 
√w_pid
;

93 
	`lock_ªÀa£
(
pid_lock
);

95  
ãmp
->
pid
;

97 
	}
}

100 
	$md_f‹kíåy
(*
∑ª¡_tf
, 
∑ddr
 )

103 
å≠‰ame
 *
√w_tf
 = (å≠‰amê*)
∑ª¡_tf
;

105 
√w_tf
->
tf_v0
 = 0;

106 
√w_tf
->
tf_a3
 = 0;

107 
√w_tf
->
tf_ïc
 += 4;

111 
	`mem˝y
(&
cuπhªad
->
t_°ack
[16], 
√w_tf
, (
å≠‰ame
));

112 
cuπhªad
->
t_vm•a˚
 = (
addr•a˚
 *)
∑ddr
;

113 
cuπhªad
->
t_vm•a˚
->
pid
 = 
	`gë_globÆpid
();

114 
	`as_a˘iv©e
(
cuπhªad
->
t_vm•a˚
);

117 
	`mùs_u£rmode
(&
cuπhªad
->
t_°ack
[16]);

119 
	}
}

121 
pid_li°


122 *
	$pidli°_¸óã
(
pid_t
 
pid
)

124 
pid_li°
 *
√w_pid
;

125 
√w_pid
 = 
	`kmÆloc
((
pid_li°
));

126 i‡(
√w_pid
 =
NULL
) {

127  
NULL
;

130 
√w_pid
->
pid
 =Öid;

131 
√w_pid
->
has_exôed
 = 0;

132 
√w_pid
->
√xt
 = 
NULL
;

133  
√w_pid
;

136 
	}
}

138 
	$pidli°_£¨ch
(
pid_t
 
pid
, *
exôcode
){

139 i‡(
pid_lock
 =
NULL
)

140 
pid_lock
 = 
	`lock_¸óã
("pid");

143 
pid_li°
 *
cuºít
;

144 
cuºít
 = 
pidli°
;

145 (
cuºít
 !
NULL
Ë&& (
pid
 != current->pid))

146 
cuºít
 = cuºít->
√xt
;

147 i‡(
cuºít
 =
NULL
){

148 
	`lock_ªÀa£
(
pid_lock
);

151 *
exôcode
 = 
cuºít
->exitcode;

153  
cuºít
->
has_exôed
;

156 
	}
}

158 
	$pidli°_exô
(
pid_t
 
pid
, 
exôcode
){

159 
pid_li°
 *
cuºít
;

160 
cuºít
 = 
pidli°
;

161 (
cuºít
 !
NULL
Ë&& (
pid
 != current->pid))

162 
cuºít
 = cuºít->
√xt
;

163 i‡(
cuºít
 =
NULL
){

166 
cuºít
->
exôcode
 =Éxitcode;

167 
cuºít
->
has_exôed
 = 1;

170 
	}
}

	@userprog/get_pid.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<machöe/•l.h
>

5 
	~<ã°.h
>

6 
	~<addr•a˚.h
>

7 
	~<å≠‰ame.h
>

8 
	~<synch.h
>

9 
	~<scheduÀr.h
>

10 
	~<dev.h
>

11 
	~<vfs.h
>

12 
	~<vm.h
>

13 
	~<sysˇŒ.h
>

14 
	~<vîsi⁄.h
>

15 
	~<hñlo.h
>

16 
	~<lib.h
>

17 
	~<cuπhªad.h
>

18 
	~<thªad.h
>

20 
pid_t
 
	$sys_gë_pid
() {

21  
cuπhªad
->
pid
;

22 
	}
}

	@userprog/loadelf.c

11 
	~<ty≥s.h
>

12 
	~<kîn/î∫o.h
>

13 
	~<lib.h
>

14 
	~<uio.h
>

15 
	~<ñf.h
>

16 
	~<addr•a˚.h
>

17 
	~<thªad.h
>

18 
	~<cuπhªad.h
>

19 
	~<vnode.h
>

20 
	~<vm.h
>

38 
	$lﬂd_£gmít
(
vnode
 *
v
, 
off_t
 
off£t
, 
vaddr_t
 
vaddr
,

39 
size_t
 
memsize
, size_à
fûesize
,

40 
is_execuèbÀ
)

42 
uio
 
u
;

43 
ªsu…
;

44 
size_t
 
fûœmt
;

46 i‡(
fûesize
 > 
memsize
) {

47 
	`k¥ötf
("ELF: warning: segment filesize > segment memsize\n");

48 
fûesize
 = 
memsize
;

51 
	`DEBUG
(
DB_EXEC
, "ELF: Loading %lu bytesÅo 0x%lx\n",

52 (Ë
fûesize
, (Ë
vaddr
);

63 
	`mk_kuio
(&
u
, 
vaddr
, 
memsize
, 
off£t
, 
UIO_READ
);

64 
u
.
uio_ªsid
 = 
fûesize
;

66 
ªsu…
 = 
	`VOP_READ
(
v
, &
u
);

67 i‡(
ªsu…
) {

68  
ªsu…
;

71 i‡(
u
.
uio_ªsid
 != 0) {

73 
	`k¥ötf
("ELF: shortÑead on segment - fileÅruncated?\n");

74  
ENOEXEC
;

78 
fûœmt
 = 
memsize
 - 
fûesize
;

79 i‡(
fûœmt
 > 0) {

80 
	`DEBUG
(
DB_EXEC
, "ELF: Zero-filling %lu more bytes\n",

81 (Ë
fûœmt
);

82 
u
.
uio_ªsid
 +
fûœmt
;

83 
ªsu…
 = 
	`uiomovezîos
(
fûœmt
, &
u
);

86  
ªsu…
;

87 
	}
}

98 
	$lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
)

100 
Elf_Ehdr
 
eh
;

101 
Elf_Phdr
 
ph
;

102 
ªsu…
, 
i
;

103 
uio
 
ku
;

109 
	`mk_kuio
(&
ku
, &
eh
, ”h), 0, 
UIO_READ
);

110 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

111 i‡(
ªsu…
) {

112  
ªsu…
;

115 i‡(
ku
.
uio_ªsid
 != 0) {

117 
	`k¥ötf
("ELF: shortÑead on header - fileÅruncated?\n");

118  
ENOEXEC
;

132 i‡(
eh
.
e_idít
[
EI_MAG0
] !
ELFMAG0
 ||

133 
eh
.
e_idít
[
EI_MAG1
] !
ELFMAG1
 ||

134 
eh
.
e_idít
[
EI_MAG2
] !
ELFMAG2
 ||

135 
eh
.
e_idít
[
EI_MAG3
] !
ELFMAG3
 ||

136 
eh
.
e_idít
[
EI_CLASS
] !
ELFCLASS32
 ||

137 
eh
.
e_idít
[
EI_DATA
] !
ELFDATA2MSB
 ||

138 
eh
.
e_idít
[
EI_VERSION
] !
EV_CURRENT
 ||

139 
eh
.
e_vîsi⁄
 !
EV_CURRENT
 ||

140 
eh
.
e_ty≥
!=
ET_EXEC
 ||

141 
eh
.
e_machöe
!=
EM_MACHINE
) {

142  
ENOEXEC
;

160 
i
=0; i<
eh
.
e_phnum
; i++) {

161 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

162 
	`mk_kuio
(&
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

164 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

165 i‡(
ªsu…
) {

166  
ªsu…
;

169 i‡(
ku
.
uio_ªsid
 != 0) {

171 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

172  
ENOEXEC
;

175 
ph
.
p_ty≥
) {

176 
PT_NULL
: ;

177 
PT_PHDR
: ;

178 
PT_MIPS_REGINFO
: ;

179 
PT_LOAD
: ;

181 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

182 
ph
.
p_ty≥
);

183  
ENOEXEC
;

186 
ªsu…
 = 
	`as_deföe_ªgi⁄
(
cuπhªad
->
t_vm•a˚
,

187 
ph
.
p_vaddr
,Öh.
p_memsz
,Öh.
p_fûesz
,

188 
ph
.
p_Êags
 & 
PF_R
,

189 
ph
.
p_Êags
 & 
PF_W
,

190 
ph
.
p_Êags
 & 
PF_X
, 
v
,Öh.
p_off£t
);

191 i‡(
ªsu…
) {

192  
ªsu…
;

196 
ªsu…
 = 
	`as_¥ï¨e_lﬂd
(
cuπhªad
->
t_vm•a˚
);

197 i‡(
ªsu…
) {

198  
ªsu…
;

260 *
íåypoöt
 = 
eh
.
e_íåy
;

263 
	}
}

	@userprog/printchar.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<machöe/•l.h
>

5 
	~<ã°.h
>

6 
	~<addr•a˚.h
>

7 
	~<synch.h
>

8 
	~<thªad.h
>

9 
	~<scheduÀr.h
>

10 
	~<dev.h
>

11 
	~<vfs.h
>

12 
	~<vm.h
>

13 
	~<sysˇŒ.h
>

14 
	~<vîsi⁄.h
>

15 
	~<lib.h
>

16 
	~<cuπhªad.h
>

19 
	$sys_¥ötch¨
(
w‹d
)

21 
	`k¥ötf
("%c", 
w‹d
);

24 
	}
}

	@userprog/runprogram.c

7 
	~<ty≥s.h
>

8 
	~<kîn/uni°d.h
>

9 
	~<kîn/î∫o.h
>

10 
	~<lib.h
>

11 
	~<addr•a˚.h
>

12 
	~<thªad.h
>

13 
	~<cuπhªad.h
>

14 
	~<vm.h
>

15 
	~<vfs.h
>

16 
	~<ã°.h
>

17 
	~<sysˇŒ.h
>

18 
	~<machöe/•l.h
>

19 
	~<å≠‰ame.h
>

20 
	~<synch.h
>

21 
	~<scheduÀr.h
>

22 
	~<dev.h
>

23 
	~<sysˇŒ.h
>

24 
	~<vîsi⁄.h
>

25 
	~<thªad.h
>

34 
	$ru≈rogøm
(*
¥og«me
, 
«rgs
, **
¨gs
)

38 
i
, 
num¨gs
=
«rgs
, 
numch¨s
;

39 
a˘uÆ
, 
off£t
;

40 *
¨goff£ts
;

41 
tŸÆ_d©a
;

43 
numch¨s
 = 0;

45 
¨goff£ts
 = 
	`kmÆloc
(
num¨gs
*());

47 
i
=0;i<
num¨gs
;i++) {

48 
numch¨s
 +
	`°æí
(
¨gs
[
i
]) + (16 - strlen(args[i])%16);

51 
¨gs
[
num¨gs
] = 
NULL
;

53 
off£t
 = 4*(
num¨gs
+1);

54 
¨goff£ts
[0] = 
off£t
;

56 
i
=1;i<
num¨gs
;i++)

57 
¨goff£ts
[
i
]˜rgoff£ts[i-1]+
	`°æí
(
¨gs
[i-1]) + (16 - strlen(args[i-1])%16);

59 
vnode
 *
v
;

60 
vaddr_t
 
íåypoöt
, 
°ack±r
;

61 
ªsu…
;

64 
ªsu…
 = 
	`vfs_›í
(
¥og«me
, 
O_RDONLY
, &
v
);

65 i‡(
ªsu…
) {

66  
ªsu…
;

70 
	`as£π
(
cuπhªad
->
t_vm•a˚
 =
NULL
);

73 
cuπhªad
->
t_vm•a˚
 = 
	`as_¸óã
();

74 i‡(
cuπhªad
->
t_vm•a˚
==
NULL
) {

75 
	`vfs_˛o£
(
v
);

76  
ENOMEM
;

80 
	`as_a˘iv©e
(
cuπhªad
->
t_vm•a˚
);

83 
ªsu…
 = 
	`lﬂd_ñf
(
v
, &
íåypoöt
);

84 i‡(
ªsu…
) {

86 
	`vfs_˛o£
(
v
);

87  
ªsu…
;

91 
	`vfs_˛o£
(
v
);

94 
ªsu…
 = 
	`as_deföe_°ack
(
cuπhªad
->
t_vm•a˚
, &
°ack±r
);

95 i‡(
ªsu…
) {

97  
ªsu…
;

100 
tŸÆ_d©a
 = (
num¨gs
+1)*(*Ë+ 
numch¨s
 + ();

101 
°ack±r
 -
tŸÆ_d©a
;

102 
cuπhªad
->
t_vm•a˚
->
as_°ackvba£
 = 
°ack±r
;

103 
¨goff£ts
[
num¨gs
] = 
tŸÆ_d©a
;

104 
vaddr_t
 
ãmp_°±r
 = 
°ack±r
;

105 
vaddr_t
 
§c
;

107 
	`c›yout
(&
num¨gs
, 
ãmp_°±r
, ());

108 
ãmp_°±r
 += ();

110 
i
 = 0; i < 
num¨gs
; i ++){

111 
§c
 = 
°ack±r
+4+
¨goff£ts
[
i
];

112 
	`c›yout
(&
§c
, 
ãmp_°±r
, (
¨gs
[
i
]));

113 
ãmp_°±r
 += (*);

116 
ãmp_°±r
 += (*);

118 
i
 = 0; i < 
num¨gs
; i ++){

119 
	`c›yout°r
(
¨gs
[
i
], 
ãmp_°±r
, 
	`°æí
◊rgs[i]), &
a˘uÆ
);

120 
ãmp_°±r
 +
	`°æí
(
¨gs
[
i
]) + (16 - strlen(args[i])%16);

124 
	`md_u£rmode
(
num¨gs
 , (
°ack±r
+4) ,

125 
°ack±r
, 
íåypoöt
);

128 
	`∑nic
("md_usermodeÑeturned\n");

129  
EINVAL
;

130 
	}
}

	@userprog/uio.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<uio.h
>

4 
	~<thªad.h
>

5 
	~<cuπhªad.h
>

12 
	$uiomove
(*
±r
, 
size_t
 
n
, 
uio
 *uio)

14 
iovec
 *
iov
;

15 
size_t
 
size
;

16 
ªsu…
;

18 i‡(
uio
->
uio_rw
 !
UIO_READ
 && uio->uio_rw !
UIO_WRITE
) {

19 
	`∑nic
("uiomove: InvÆid uio_rw %d\n", (Ë
uio
->
uio_rw
);

21 i‡(
uio
->
uio_£gÊg
==
UIO_SYSSPACE
) {

22 
	`as£π
(
uio
->
uio_•a˚
 =
NULL
);

25 
	`as£π
(
uio
->
uio_•a˚
 =
cuπhªad
->
t_vm•a˚
);

28 
n
 > 0 && 
uio
->
uio_ªsid
 > 0) {

29 
iov
 = &
uio
->
uio_iovec
;

30 
size
 = 
iov
->
iov_Àn
;

32 i‡(
size
 > 
n
) {

33 
size
 = 
n
;

36 i‡(
size
==0) {

42 
	`∑nic
("uiomove: sizeÑeached 0\n");

45 
uio
->
uio_£gÊg
) {

46 
UIO_SYSSPACE
:

47 
ªsu…
 = 0;

48 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

49 
	`memmove
(
iov
->
iov_kba£
, 
±r
, 
size
);

52 
	`memmove
(
±r
, 
iov
->
iov_kba£
, 
size
);

54 
iov
->
iov_kba£
 = ((*)iov->iov_kba£+
size
);

56 
UIO_USERSPACE
:

57 
UIO_USERISPACE
:

58 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

59 
ªsu…
 = 
	`c›yout
(
±r
, 
iov
->
iov_uba£
,
size
);

62 
ªsu…
 = 
	`c›yö
(
iov
->
iov_uba£
, 
±r
, 
size
);

64 i‡(
ªsu…
) {

65  
ªsu…
;

67 
iov
->
iov_uba£
 +
size
;

70 
	`∑nic
("uiomove: Invalid uio_segflg %d\n",

71 ()
uio
->
uio_£gÊg
);

74 
iov
->
iov_Àn
 -
size
;

75 
uio
->
uio_ªsid
 -
size
;

76 
uio
->
uio_off£t
 +
size
;

77 
±r
 = ((*Ìå + 
size
);

78 
n
 -
size
;

82 
	}
}

85 
	$uiomovezîos
(
size_t
 
n
, 
uio
 *uio)

88 
zîos
[16];

89 
size_t
 
amt
;

90 
ªsu…
;

93 
	`as£π
(
uio
->
uio_rw
 =
UIO_READ
);

95 
n
>0) {

96 
amt
 = (
zîos
);

97 i‡(
amt
 > 
n
) {

98 
amt
 = 
n
;

100 
ªsu…
 = 
	`uiomove
(
zîos
, 
amt
, 
uio
);

101 i‡(
ªsu…
) {

102  
ªsu…
;

104 
n
 -
amt
;

108 
	}
}

114 
	$mk_kuio
(
uio
 *uio, *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
)

116 
uio
->
uio_iovec
.
iov_kba£
 = 
kbuf
;

117 
uio
->
uio_iovec
.
iov_Àn
 = 
Àn
;

118 
uio
->
uio_off£t
 = 
pos
;

119 
uio
->
uio_ªsid
 = 
Àn
;

120 
uio
->
uio_£gÊg
 = 
UIO_SYSSPACE
;

121 
uio
->
uio_rw
 = 
rw
;

122 
uio
->
uio_•a˚
 = 
NULL
;

123 
	}
}

	@userprog/wait.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<machöe/•l.h
>

5 
	~<ã°.h
>

6 
	~<addr•a˚.h
>

7 
	~<å≠‰ame.h
>

8 
	~<synch.h
>

9 
	~<scheduÀr.h
>

10 
	~<dev.h
>

11 
	~<vfs.h
>

12 
	~<vm.h
>

13 
	~<sysˇŒ.h
>

14 
	~<vîsi⁄.h
>

15 
	~<hñlo.h
>

16 
	~<lib.h
>

17 
	~<cuπhªad.h
>

18 
	~<thªad.h
>

19 
	~<waô.h
>

20 
	~<gë_pid.h
>

21 
	~<f‹k.h
>

26 
pid_t
 
	$sys_waôpid
(
pid_t
 
pid
, *
°©us
, 
›ti⁄s
) {

27 i‡(
›ti⁄s
!=0Ë 
EINVAL
;

28 if(
°©us
==
NULL
Ë 
EFAULT
;

29 
has_exôed
 = 0;

32 i‡(
pid
 > 
	`gë_globÆpid
())

33  
pid
;

36 i‡(
pid
 <
	`sys_gë_pid
())

37  
pid
;

41 
has_exôed
 == 0){

42 
•l
 = 
	`•lhigh
();

44 
has_exôed
 = 
	`pidli°_£¨ch
(
pid
, 
°©us
);

46 i‡(
has_exôed
 == 1){

48 
	`•lx
(
•l
);

49  
pid
;

53 
	`thªad_¶ìp
(
pid
);

54 
	`•lx
(
•l
);

58  
pid
;

60 
	}
}

	@vm/.svn/vm.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~<thªad.h
>

5 
	~<cuπhªad.h
>

6 
	~<addr•a˚.h
>

7 
	~<vm.h
>

8 
	~<machöe/•l.h
>

9 
	~<machöe/éb.h
>

10 
	~<vm.h
>

11 
	~<bôm≠.h
>

13 
u_öt32_t
 
	gc‹em≠_°¨t
;

14 
u_öt32_t
 
	gc‹em≠_size
;

15 
	gÆ_ödex
;

18 
	$vm_boŸ°øp
()

20 
if_£tupcom∂ëe
=0;

21 
u_öt32_t
 
fú°addr
, 
œ°addr
, 
‰ìaddr
;

27 
fú°addr
 = 
	`øm_°ólmem
(0);

28 
œ°addr
 = 
	`mùs_ømsize
();

30 
max_∑ge_num
 = ( 
œ°addr
 - (
fú°addr
 + 
PAGE_SIZE
) ) / PAGE_SIZE;

31 
gbl_bmp
 = 
	`bôm≠_¸óã
(
max_∑ge_num
);

32 
	`as£π
(
gbl_bmp
 !
NULL
);

34 
‰ìaddr
 = 
fú°addr
 + 
PAGE_SIZE
;

38 
c‹em≠
 = (
∑ge_èbÀ_íåy
*)
	`kmÆloc
(
max_∑ge_num
 * (page_table_entry));

39 
c‹em≠_°¨t
 = 
	`øm_°ólmem
(0);

40 
c‹em≠_size
 = 
max_∑ge_num
;

41 
Æloc
 = (
Æloc_°©us
*)
	`kmÆloc
(64*(alloc_status));

44 
	`as£π
(
c‹em≠
 !
NULL
);

47 
i
;

48 
i
 = 1; i < 
max_∑ge_num
; i++) {

49 
c‹em≠
[
i
].
∑
 = (
c‹em≠_°¨t
 + (ò* 
PAGE_SIZE
));

51 
	`bôm≠_m¨k
(
gbl_bmp
, 0);

54 
if_£tupcom∂ëe
=1;

55 
	`k¥ötf
("COREMAP INIT: %d %d\n",
c‹em≠_°¨t
,
c‹em≠_size
);

56 
	}
}

58 
u_öt32_t
 
	$gë_sögÀ∑ge
 (
u_öt32_t
 *
ödex
) {

59 
•l
 = 
	`•lhigh
();

60 
ªsu…
;

61 
ªsu…
 = 
	`bôm≠_Æloc
(
gbl_bmp
, 
ödex
);

64 
	`•lx
(
•l
);

65 i‡(!
ªsu…
)

66  
c‹em≠
[*
ödex
].
∑
;

69 
	}
}

71 
u_öt32_t
 
	$±_ö£π
 (
u_öt32_t
 
vaddr
, u_öt32_à
∑ddr
) {

72 
•l
=
	`•lhigh
();

73 
∑ddr
 =Öadd∏& 
PAGE_FRAME
;

74 
ödex
 = (
∑ddr
 - 
mem_°¨t
Ë/ 
PAGE_SIZE
;

76 
c‹em≠
[
ödex
].
va
 = 
vaddr
;

77 
c‹em≠
[
ödex
].
∑
 = 
	`SET_VALID
(
∑ddr
);

79 if(!
	`bôm≠_is£t
(
gbl_bmp
, 
ödex
))

80 
	`bôm≠_m¨k
(
gbl_bmp
, 
ödex
);

81 
	`•lx
(
•l
);

83 
	}
}

89 
∑ddr_t


90 
	$gëµages
(
≈ages
)

92 
	`as£π
 (
≈ages
 > 0);

93 
•l
 = 
	`•lhigh
();

95 
i
, 
cou¡
;

96 
u_öt32_t
 
ödex
, 
∑ddr
;

99 i‡(
if_£tupcom∂ëe
 == 0){

100 
∑ddr
 = 
	`øm_°ólmem
(
≈ages
);

101 
	`•lx
(
•l
);

102  
∑ddr
 & 
PAGE_FRAME
;

107 i‡(
≈ages
 == 1){

108 
∑ddr
 = 
	`gë_sögÀ∑ge
(&
ödex
);

110 i‡(
∑ddr
 == 0){

111 
	`•lx
(
•l
);

117 
∑ddr
 = 
	`SET_VALID
(paddr);

118 
	`±_ö£π
–
	`PADDR_TO_KVADDR
(
∑ddr
),Öaddr);

120 
	`•lx
(
•l
);

121  (
∑ddr
 & 
PAGE_FRAME
);

125 
i
 = 0; i < 
max_∑ge_num
; i++){

126 i‡(
	`bôm≠_is£t
(
gbl_bmp
, 
i
)){

127 
cou¡
 = 0;

129 
cou¡
 ++;

130 i‡(()
cou¡
 =
≈ages
)

136 i‡(
cou¡
 !
≈ages
){

137 
	`•lx
(
•l
);

145 
ödex
 = 
i
 + 1 - 
cou¡
;

146 
i
 = 0; i < 
cou¡
; i++){

147 
	`bôm≠_m¨k
(
gbl_bmp
, 
ödex
+
i
);

148 
∑ddr
 = 
c‹em≠
[
ödex
+
i
].
∑
;

149 
∑ddr
 = 
	`SET_VALID
(paddr);

150 
	`±_ö£π
–
	`PADDR_TO_KVADDR
(
∑ddr
),Öaddr);

152 
∑ddr
 = 
c‹em≠
[
ödex
].
∑
;

153 
c‹em≠
[
ödex
].
≈ages
 =Çpages;

155 
	`•lx
(
•l
);

156  
∑ddr
 & 
PAGE_FRAME
;

160 
	}
}

162 
u_öt32_t
 
	$c‹em≠_ªmove
 (
u_öt32_t
 
∑ddr
, 
ödex
) {

163 
∑ddr
 =Öadd∏& 
PAGE_FRAME
;

164 
	`as£π
–(
c‹em≠
[
ödex
].
∑
 & 
PAGE_FRAME
Ë=(
∑ddr
 & PAGE_FRAME) );

165 
c‹em≠
[ 
ödex
 ].
va
 = 0;

166 
	`bôm≠_unm¨k
(
gbl_bmp
, 
ödex
);

168 
	}
}

171 
	$‰ì_k∑ges
(
vaddr_t
 
addr
)

173 
•l
=
	`•lhigh
();

175 
i
, 
j
;

176 
i
 = 1; i < 
max_∑ge_num
; i ++){

177 i‡(
c‹em≠
[
i
].
va
 =
addr
+1)

180 i‡(
c‹em≠
[
i
].
va
 !
addr
+1){

181 
	`as£π
(1 == 0);

184 
j
 = 0; j < 
c‹em≠
[
i
].
≈ages
; j++){

185 
	`c‹em≠_ªmove
(
c‹em≠
[
i
+
j
].
∑
, i+j);

188 
	`•lx
(
•l
);

189 
	}
}

194 
	#DUMBVM_STACKPAGES
 12

	)

196 
	$íãr_°©us
(
vaddr_t
 
vaddr
,
no_∑ges
)

198 
Æloc
[
Æ_ödex
].
vaddr
=vaddr;

199 
Æloc
[
Æ_ödex
].
≈ages
=
no_∑ges
;

200 
Æ_ödex
++;

201 
	}
}

203 
vaddr_t


204 
	$Æloc_k∑ges
(
≈ages
)

206 
∑ddr_t
 
∑
;

207 
∑
 = 
	`gëµages
(
≈ages
);

208 
	`íãr_°©us
(
	`PADDR_TO_KVADDR
(
∑
),
≈ages
);

209 i‡(
∑
==0) {

212  
	`PADDR_TO_KVADDR
(
∑
);

213 
	}
}

216 
	$vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
)

218 
vaddr_t
 
vba£1
, 
vt›1
, 
vba£2
, 
vt›2
, 
°ackba£
, 
°ackt›
;

219 
∑ddr_t
 
∑ddr
;

220 
i
;

221 
u_öt32_t
 
ehi
, 
ño
;

222 
addr•a˚
 *
as
;

223 
•l
;

225 
•l
 = 
	`•lhigh
();

227 
Áu…addªss
 &
PAGE_FRAME
;

229 
	`DEBUG
(
DB_VM
, "dumbvm: fau…: 0x%x\n", 
Áu…addªss
);

231 
Áu…ty≥
) {

232 
VM_FAULT_READONLY
:

234 
	`∑nic
("dumbvm: got VM_FAULT_READONLY\n");

235 
VM_FAULT_READ
:

236 
VM_FAULT_WRITE
:

239 
	`•lx
(
•l
);

240  
EINVAL
;

243 
as
 = 
cuπhªad
->
t_vm•a˚
;

244 i‡(
as
 =
NULL
) {

250  
EFAULT
;

254 
	`as£π
(
as
->
as_vba£1
 != 0);

255 
	`as£π
(
as
->
as_pba£1
 != 0);

256 
	`as£π
(
as
->
as_≈ages1
 != 0);

257 
	`as£π
(
as
->
as_vba£2
 != 0);

258 
	`as£π
(
as
->
as_pba£2
 != 0);

259 
	`as£π
(
as
->
as_≈ages2
 != 0);

260 
	`as£π
(
as
->
as_°ackpba£
 != 0);

261 
	`as£π
((
as
->
as_vba£1
 & 
PAGE_FRAME
) ==ás->as_vbase1);

262 
	`as£π
((
as
->
as_pba£1
 & 
PAGE_FRAME
) ==ás->as_pbase1);

263 
	`as£π
((
as
->
as_vba£2
 & 
PAGE_FRAME
) ==ás->as_vbase2);

264 
	`as£π
((
as
->
as_pba£2
 & 
PAGE_FRAME
) ==ás->as_pbase2);

265 
	`as£π
((
as
->
as_°ackpba£
 & 
PAGE_FRAME
) ==ás->as_stackpbase);

267 
vba£1
 = 
as
->
as_vba£1
;

268 
vt›1
 = 
vba£1
 + 
as
->
as_≈ages1
 * 
PAGE_SIZE
;

269 
vba£2
 = 
as
->
as_vba£2
;

270 
vt›2
 = 
vba£2
 + 
as
->
as_≈ages2
 * 
PAGE_SIZE
;

271 
°ackba£
 = 
USERSTACK
 - 
DUMBVM_STACKPAGES
 * 
PAGE_SIZE
;

272 
°ackt›
 = 
USERSTACK
;

274 i‡(
Áu…addªss
 >
vba£1
 && fau…addªs†< 
vt›1
) {

275 
∑ddr
 = (
Áu…addªss
 - 
vba£1
Ë+ 
as
->
as_pba£1
;

277 i‡(
Áu…addªss
 >
vba£2
 && fau…addªs†< 
vt›2
) {

278 
∑ddr
 = (
Áu…addªss
 - 
vba£2
Ë+ 
as
->
as_pba£2
;

280 i‡(
Áu…addªss
 >
°ackba£
 && fau…addªs†< 
°ackt›
) {

281 
∑ddr
 = (
Áu…addªss
 - 
°ackba£
Ë+ 
as
->
as_°ackpba£
;

284 
	`•lx
(
•l
);

285  
EFAULT
;

289 
	`as£π
((
∑ddr
 & 
PAGE_FRAME
)==paddr);

291 
i
=0; i<
NUM_TLB
; i++) {

292 
	`TLB_Ród
(&
ehi
, &
ño
, 
i
);

293 i‡(
ño
 & 
TLBLO_VALID
) {

296 
ehi
 = 
Áu…addªss
;

297 
ño
 = 
∑ddr
 | 
TLBLO_DIRTY
 | 
TLBLO_VALID
;

298 
	`DEBUG
(
DB_VM
, "dumbvm: 0x%x -> 0x%x\n", 
Áu…addªss
, 
∑ddr
);

299 
	`TLB_Wrôe
(
ehi
, 
ño
, 
i
);

300 
	`•lx
(
•l
);

304 
	`k¥ötf
("dumbvm: Ran out of TLBÉntries - cannot handleÖage fault\n");

305 
	`•lx
(
•l
);

306  
EFAULT
;

307 
	}
}

309 
addr•a˚
 *

310 
	$as_¸óã
()

312 
addr•a˚
 *
as
 = 
	`kmÆloc
((addrspace));

313 i‡(
as
==
NULL
) {

314  
NULL
;

317 
as
->
as_vba£1
 = 0;

318 
as
->
as_pba£1
 = 0;

319 
as
->
as_≈ages1
 = 0;

320 
as
->
as_vba£2
 = 0;

321 
as
->
as_pba£2
 = 0;

322 
as
->
as_≈ages2
 = 0;

323 
as
->
as_°ackpba£
 = 0;

325  
as
;

326 
	}
}

329 
	$as_de°roy
(
addr•a˚
 *
as
)

331 
	`k‰ì
(
as
);

332 
	}
}

335 
	$as_a˘iv©e
(
addr•a˚
 *
as
)

337 
i
, 
•l
;

339 ()
as
;

341 
•l
 = 
	`•lhigh
();

343 
i
=0; i<
NUM_TLB
; i++) {

344 
	`TLB_Wrôe
(
	`TLBHI_INVALID
(
i
), 
	`TLBLO_INVALID
(), i);

347 
	`•lx
(
•l
);

348 
	}
}

351 
	$as_deföe_ªgi⁄
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

352 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
)

354 
size_t
 
≈ages
;

357 
sz
 +
vaddr
 & ~(
vaddr_t
)
PAGE_FRAME
;

358 
vaddr
 &
PAGE_FRAME
;

361 
sz
 = (sz + 
PAGE_SIZE
 - 1Ë& 
PAGE_FRAME
;

363 
≈ages
 = 
sz
 / 
PAGE_SIZE
;

366 ()
ªadabÀ
;

367 ()
wrôóbÀ
;

368 ()
execuèbÀ
;

370 i‡(
as
->
as_vba£1
 == 0) {

371 
as
->
as_vba£1
 = 
vaddr
;

372 
as
->
as_≈ages1
 = 
≈ages
;

376 i‡(
as
->
as_vba£2
 == 0) {

377 
as
->
as_vba£2
 = 
vaddr
;

378 
as
->
as_≈ages2
 = 
≈ages
;

385 
	`k¥ötf
("dumbvm: Warning:Åoo manyÑegions\n");

386  
EUNIMP
;

387 
	}
}

390 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
)

392 
	`as£π
(
as
->
as_pba£1
 == 0);

393 
	`as£π
(
as
->
as_pba£2
 == 0);

394 
	`as£π
(
as
->
as_°ackpba£
 == 0);

396 
as
->
as_pba£1
 = 
	`gëµages
◊s->
as_≈ages1
);

397 i‡(
as
->
as_pba£1
 == 0) {

398  
ENOMEM
;

401 
as
->
as_pba£2
 = 
	`gëµages
◊s->
as_≈ages2
);

402 i‡(
as
->
as_pba£2
 == 0) {

403  
ENOMEM
;

406 
as
->
as_°ackpba£
 = 
	`gëµages
(
DUMBVM_STACKPAGES
);

407 i‡(
as
->
as_°ackpba£
 == 0) {

408  
ENOMEM
;

412 
	}
}

415 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
)

417 ()
as
;

419 
	}
}

422 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

424 
	`as£π
(
as
->
as_°ackpba£
 != 0);

426 *
°ack±r
 = 
USERSTACK
;

428 
	}
}

431 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

433 
addr•a˚
 *
√w
;

435 
√w
 = 
	`as_¸óã
();

436 i‡(
√w
==
NULL
) {

437  
ENOMEM
;

440 
√w
->
as_vba£1
 = 
ﬁd
->as_vbase1;

441 
√w
->
as_≈ages1
 = 
ﬁd
->as_npages1;

442 
√w
->
as_vba£2
 = 
ﬁd
->as_vbase2;

443 
√w
->
as_≈ages2
 = 
ﬁd
->as_npages2;

445 i‡(
	`as_¥ï¨e_lﬂd
(
√w
)) {

446 
	`as_de°roy
(
√w
);

447  
ENOMEM
;

450 
	`as£π
(
√w
->
as_pba£1
 != 0);

451 
	`as£π
(
√w
->
as_pba£2
 != 0);

452 
	`as£π
(
√w
->
as_°ackpba£
 != 0);

454 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£1
),

455 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£1
),

456 
ﬁd
->
as_≈ages1
*
PAGE_SIZE
);

458 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£2
),

459 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£2
),

460 
ﬁd
->
as_≈ages2
*
PAGE_SIZE
);

462 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_°ackpba£
),

463 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_°ackpba£
),

464 
DUMBVM_STACKPAGES
*
PAGE_SIZE
);

466 *
ªt
 = 
√w
;

468 
	}
}

	@vm/addrspace.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~<addr•a˚.h
>

5 
	~<vm.h
>

	@vm/vm.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<lib.h
>

4 
	~<thªad.h
>

5 
	~<cuπhªad.h
>

6 
	~<addr•a˚.h
>

7 
	~<vm.h
>

8 
	~<machöe/•l.h
>

9 
	~<machöe/éb.h
>

10 
	~<bôm≠.h
>

11 
	~<vnode.h
>

12 
	~<uio.h
>

13 
	~<ñf.h
>

14 
	~<vfs.h
>

15 
	~<kîn/uni°d.h
>

16 
	~<kîn/°©.h
>

18 
	#SWAP_DEVICE
 "lhd0øw:"

	)

20 
vnode
 *
	gsw≠_vnode
;

23 
	$vm_boŸ°øp
()

25 
	`sw≠_öô
();

26 
	`c‹em≠_öô
();

28 
	}
}

30 
	$sw≠_öô
() {

31 
	`k¥ötf
("Swap:\n\tInitializing...\n");

32 
u_öt32_t
 
ªtvÆ
;

33 
ªtvÆ
 = 
	`vfs_›í
(
SWAP_DEVICE
, 
O_RDWR
, &
sw≠_vnode
);

34 i‡(
ªtvÆ
) {

35 
	`∑nic
("couldn't open swap device\n");

38 
°©
 
ãmp
;

39 
	`VOP_STAT
(
sw≠_vnode
, &
ãmp
);

40 
sw≠_bmp
 = 
	`bôm≠_¸óã
(
ãmp
.
°_size
/
PAGE_SIZE
);

41 i‡(!
sw≠_bmp
)

42 
	`∑nic
("couldn't create swap_bmp\n");

44 
	`k¥ötf
("\tCª©ögÖages: %d.\n", (
ãmp
.
°_size
/
PAGE_SIZE
));

45 
sw≠_hﬁdî
 = 
	`kmÆloc
((
ãmp
.
°_size
/
PAGE_SIZE
Ë* (
∑ge_èbÀ_íåy
));

46 
fú°addr
 = 
	`øm_°ólmem
(0);

47 
i
;

48 
i
 = 0; i < 
ãmp
.
°_size
/
PAGE_SIZE
; i++) {

49 
sw≠_hﬁdî
[
i
].
∑
 = (
fú°addr
 + (ò* 
PAGE_SIZE
));

51 
	`k¥ötf
("\tComplete.\n");

52 
	}
}

55 
	$c‹em≠_öô
()

57 
	`k¥ötf
("Coremap:\n\tInitializing...\n");

58 
if_£tupcom∂ëe
=0;

63 
fú°addr
 = 
	`øm_°ólmem
(0);

64 
œ°addr
 = 
	`mùs_ømsize
();

66 
max_∑ge_num
 = ( 
œ°addr
 - (
fú°addr
 + 2*
PAGE_SIZE
) ) / PAGE_SIZE;

67 
gbl_bmp
 = 
	`bôm≠_¸óã
(
max_∑ge_num
);

68 
	`as£π
(
gbl_bmp
 !
NULL
);

70 
‰ìaddr
 = 
fú°addr
 + 2*
PAGE_SIZE
;

71 
c‹em≠
 = 
	`kmÆloc
(
max_∑ge_num
 * (
∑ge_èbÀ_íåy
));

72 
	`k¥ötf
("\tCª©ögÖages: %d.\n", 
max_∑ge_num
);

74 
	`as£π
(
c‹em≠
 !
NULL
);

77 
i
;

78 
i
 = 2; i < 
max_∑ge_num
; i++) {

79 
c‹em≠
[
i
].
∑
 = 
‰ìaddr
 + (ò* 
PAGE_SIZE
);

80 
c‹em≠
[
i
].
vÆid
 = 0;

81 
c‹em≠
[
i
].
dúty
 = 0;

82 
c‹em≠
[
i
].
sw≠≥d
 = 0;

83 
c‹em≠
[
i
].
locked
 = 0;

84 
c‹em≠
[
i
].
wrôóbÀ
 = 0;

86 
	`bôm≠_m¨k
(
gbl_bmp
, 0);

87 
	`bôm≠_m¨k
(
gbl_bmp
, 1);

89 
mem_°¨t
 = 
‰ìaddr
;

90 
if_£tupcom∂ëe
=1;

92 
	`k¥ötf
("\tComplete.\n");

94 
	}
}

96 
u_öt32_t
 
	$gë_sögÀ∑ge
 (
u_öt32_t
 *
ödex
) {

97 
•l
 = 
	`•lhigh
();

98 
ªsu…
;

99 
ªsu…
 = 
	`bôm≠_Æloc
(
gbl_bmp
, 
ödex
);

102 
	`•lx
(
•l
);

103 i‡(!
ªsu…
)

104  
c‹em≠
[*
ödex
].
∑
;

107 
	}
}

109 
u_öt32_t
 
	$±_ö£π
 (
u_öt32_t
 
vaddr
, u_öt32_à
∑ddr
) {

110 
•l
=
	`•lhigh
();

112 
ödex
 = (
∑ddr
 - 
mem_°¨t
Ë/ 
PAGE_SIZE
;

114 
c‹em≠
[
ödex
].
va
 = 
vaddr
;

115 
c‹em≠
[
ödex
].
∑
 = 
∑ddr
;

116 
c‹em≠
[
ödex
].
vÆid
 = 1;

118 if(!
	`bôm≠_is£t
(
gbl_bmp
, 
ödex
))

119 
	`bôm≠_m¨k
(
gbl_bmp
, 
ödex
);

120 
	`•lx
(
•l
);

122 
	}
}

125 
∑ddr_t


126 
	$gëµages
(
≈ages
)

128 
	`as£π
 (
≈ages
 > 0);

129 
•l
 = 
	`•lhigh
();

131 
i
, 
cou¡
;

132 
u_öt32_t
 
ödex
, 
∑ddr
;

135 i‡(
if_£tupcom∂ëe
 == 0){

136 
∑ddr
 = 
	`øm_°ólmem
(
≈ages
);

137 
	`•lx
(
•l
);

138  
∑ddr
 & 
PAGE_FRAME
;

143 i‡(
≈ages
 == 1){

144 
∑ddr
 = 
	`gë_sögÀ∑ge
(&
ödex
);

145 
c‹em≠
[
ödex
].
≈ages
=npages;

147 i‡(
∑ddr
 == 0){

148 
	`•lx
(
•l
);

155 
	`±_ö£π
–
	`PADDR_TO_KVADDR
(
∑ddr
),Öaddr);

157 
	`•lx
(
•l
);

158  (
∑ddr
 & 
PAGE_FRAME
);

162 
i
 = 0; i < 
max_∑ge_num
; i++){

163 i‡(
	`bôm≠_is£t
(
gbl_bmp
, 
i
)){

164 
cou¡
 = 0;

166 
cou¡
 ++;

167 i‡(()
cou¡
 =
≈ages
)

173 i‡(
cou¡
 !
≈ages
){

174 
	`k¥ötf
("NotÉnoughÖagesávailable in coremap -ÇeedÅo swap\n");

175 
	`•lx
(
•l
);

183 
ödex
 = 
i
 + 1 - 
cou¡
;

184 
i
 = 0; i < 
cou¡
; i++){

185 
	`bôm≠_m¨k
(
gbl_bmp
, 
ödex
+
i
);

186 
∑ddr
 = 
c‹em≠
[
ödex
+
i
].
∑
;

188 
	`±_ö£π
–
	`PADDR_TO_KVADDR
(
∑ddr
),Öaddr);

190 
∑ddr
 = 
c‹em≠
[
ödex
].
∑
;

191 
c‹em≠
[
ödex
].
≈ages
 =Çpages;

193 
	`•lx
(
•l
);

194  
∑ddr
 & 
PAGE_FRAME
;

198 
	}
}

200 
u_öt32_t
 
	$c‹em≠_ªmove
 (
u_öt32_t
 
∑ddr
, 
ödex
) {

201 i‡(
ödex
>
max_∑ge_num
)  0;

202 
∑ddr
 =Öadd∏& 
PAGE_FRAME
;

203 
	`as£π
–(
c‹em≠
[
ödex
].
∑
 & 
PAGE_FRAME
Ë=(
∑ddr
 & PAGE_FRAME) );

204 
c‹em≠
[ 
ödex
 ].
va
 = 0;

205 
c‹em≠
[ 
ödex
 ].
vÆid
 = 0;

206 
c‹em≠
[ 
ödex
 ].
≈ages
 = 0;

207 
c‹em≠
[ 
ödex
 ].
∑
 = 
∑ddr
 & 
PAGE_FRAME
;

209 if(
	`bôm≠_is£t
(
gbl_bmp
, 
ödex
))

210 
	`bôm≠_unm¨k
(
gbl_bmp
, 
ödex
);

212 
	}
}

239 
	$‰ì_k∑ges
(
vaddr_t
 
addr
)

241 
•l
=
	`•lhigh
();

243 
i
, 
j
;

244 
i
 = 2; i < 
max_∑ge_num
; i ++){

245 i‡(
c‹em≠
[
i
].
va
 =
addr
)

248 i‡(
c‹em≠
[
i
].
va
 !
addr
){

251 
j
 = 0; j < 
c‹em≠
[
i
].
≈ages
; j++){

252 
	`c‹em≠_ªmove
(
c‹em≠
[
i
+
j
].
∑
, i+j);

255 
	`•lx
(
•l
);

256 
	}
}

261 
	#DUMBVM_STACKPAGES
 12

	)

263 
vaddr_t


264 
	$Æloc_k∑ges
(
≈ages
)

266 
∑ddr_t
 
∑
;

267 
∑
 = 
	`gëµages
(
≈ages
);

268 i‡(
∑
==0) {

271  
	`PADDR_TO_KVADDR
(
∑
);

272 
	}
}

277 
	$∑ge_ªad
(
vnode
 *
v
, 
off_t
 
off£t
, 
vaddr_t
 
vaddr
,

278 
size_t
 
memsize
, size_à
fûesize
)

280 
uio
 
u
;

281 
ªsu…
;

282 
size_t
 
fûœmt
;

284 i‡(
fûesize
 > 
memsize
) {

285 
fûesize
 = 
memsize
;

288 
	`DEBUG
(
DB_EXEC
, "ELF: Loading %lu bytesÅo 0x%lx\n",

289 (Ë
fûesize
, (Ë
vaddr
);

301 
	`mk_kuio
(&
u
, 
vaddr
, 
memsize
, 
off£t
, 
UIO_READ
);

302 
u
.
uio_ªsid
 = 
fûesize
;

304 
ªsu…
 = 
	`VOP_READ
(
v
, &
u
);

305 i‡(
ªsu…
) {

306  
ªsu…
;

309 i‡(
u
.
uio_ªsid
 != 0) {

311 
	`k¥ötf
("ELF: shortÑead on segment - fileÅruncated?\n");

312  
ENOEXEC
;

316 
fûœmt
 = 
memsize
 - 
fûesize
;

317 i‡(
fûœmt
 > 0) {

318 
	`DEBUG
(
DB_EXEC
, "ELF: Zero-filling %lu more bytes\n",

319 (Ë
fûœmt
);

320 
u
.
uio_ªsid
 +
fûœmt
;

321 
ªsu…
 = 
	`uiomovezîos
(
fûœmt
, &
u
);

324  
ªsu…
;

325 
	}
}

329 
	$∑ge_wrôe
(
vnode
 *
v
, 
off_t
 
off£t
, 
vaddr_t
 
vaddr
,

330 
size_t
 
memsize
, size_à
fûesize
)

332 
uio
 
u
;

333 
ªsu…
;

334 
size_t
 
fûœmt
;

336 i‡(
fûesize
 > 
memsize
) {

337 
fûesize
 = 
memsize
;

340 
	`DEBUG
(
DB_EXEC
, "ELF: Loading %lu bytesÅo 0x%lx\n",

341 (Ë
fûesize
, (Ë
vaddr
);

353 
	`mk_kuio
(&
u
, 
vaddr
, 
memsize
, 
off£t
, 
UIO_WRITE
);

354 
u
.
uio_ªsid
 = 
fûesize
;

356 
ªsu…
 = 
	`VOP_WRITE
(
v
, &
u
);

357 i‡(
ªsu…
) {

358  
ªsu…
;

361 i‡(
u
.
uio_ªsid
 != 0) {

363 
	`k¥ötf
("ELF: short write on segment - fileÅruncated?\n");

364  
ENOEXEC
;

376  
ªsu…
;

377 
	}
}

382 
	$vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
)

384 
vaddr_t
 
vba£1
, 
vt›1
, 
vba£2
, 
vt›2
, 
°ackba£
, 
°ackt›
;

385 
∑ddr_t
 
∑ddr
;

386 
i
;

387 
u_öt32_t
 
ehi
, 
ño
;

388 
addr•a˚
 *
as
;

389 
•l
;

390 
off_t
 
txtoff£t
;

391 
size_t
 
txtfûesz
;

393 
•l
 = 
	`•lhigh
();

398 
Áu…addªss
 &
PAGE_FRAME
;

402 if(
Áu…addªss
==1073741824) {

403  
EFAULT
;

406 
	`DEBUG
(
DB_VM
, "dumbvm: fau…: 0x%x\n", 
Áu…addªss
);

408 
Áu…ty≥
) {

409 
VM_FAULT_READONLY
:

411 
	`∑nic
("dumbvm: got VM_FAULT_READONLY\n");

412 
VM_FAULT_READ
:

413 
VM_FAULT_WRITE
:

416 
	`•lx
(
•l
);

417  
EINVAL
;

420 
as
 = 
cuπhªad
->
t_vm•a˚
;

421 i‡(
as
 =
NULL
) {

427  
EFAULT
;

430 i‡(
Áu…addªss
==0) {

431  
EFAULT
;

434 if(
Áu…addªss
+
PAGE_SIZE
 >
as
->
as_°ackvba£
) {

435 
as
->
as_°ackvba£
 = 
Áu…addªss
;

439 
	`as£π
(
as
->
as_≈ages1
 != 0);

440 
	`as£π
(
as
->
as_vba£2
 != 0);

441 
	`as£π
(
as
->
as_≈ages2
 != 0);

443 
	`as£π
((
as
->
as_vba£1
 & 
PAGE_FRAME
) ==ás->as_vbase1);

444 
	`as£π
((
as
->
as_pba£1
 & 
PAGE_FRAME
) ==ás->as_pbase1);

445 
	`as£π
((
as
->
as_vba£2
 & 
PAGE_FRAME
) ==ás->as_vbase2);

446 
	`as£π
((
as
->
as_pba£2
 & 
PAGE_FRAME
) ==ás->as_pbase2);

449 
vba£1
 = 
as
->
as_vba£1
;

450 
vt›1
 = 
vba£1
 + 
as
->
as_≈ages1
 * 
PAGE_SIZE
;

451 
vba£2
 = 
as
->
as_vba£2
;

452 
vt›2
 = 
vba£2
 + 
as
->
as_≈ages2
 * 
PAGE_SIZE
;

454 
°ackba£
 = 
as
->
as_°ackvba£
;

455 
°ackt›
 = 
USERSTACK
;

458 
u_öt32_t
 
t›ãnbôs
, 
btmãnbôs
, 
ödex
;

459 
t›ãnbôs
 = 
Áu…addªss
 >>22;

460 
btmãnbôs
 = 
Áu…addªss
 & 0x3FFFFF;

461 
btmãnbôs
 = btmtenbits >> 12;

463 if(
as
->
fú°±
[
t›ãnbôs
]==
NULL
){

464 *
£c⁄d±
 = 
	`kmÆloc
(1024*());

465 
as
->
fú°±
[
t›ãnbôs
] = 
£c⁄d±
;

468 if(
as
->
fú°±
[
t›ãnbôs
][
btmãnbôs
]==0){

469 
∑ddr_t
 
ãmp
;

470 
ãmp
=
	`gë_sögÀ∑ge
 (&
ödex
);

471 
c‹em≠
[
ödex
].
≈ages
 = 1;

472 
as
->
fú°±
[
t›ãnbôs
][
btmãnbôs
] = 
ödex
;

474 if(
ãmp
 == 0)

475  
ENOMEM
;

476 
	`±_ö£π
 (
Áu…addªss
, 
ãmp
);

478 i‡(
Áu…addªss
 >
vba£1
 && fau…addªs†< 
vt›1
) {

480 
u_öt32_t
 
cou¡î
, 
tmp_Êsz
, 
tmp_off
;

481 
cou¡î
=0;

482 
Áu…addªss
 - 
cou¡î
*
PAGE_SIZE
 > 
vba£1
)

483 
cou¡î
 ++;

484 
tmp_Êsz
 = 
as
->
fûesize_ãxt
 - 
cou¡î
 * 
PAGE_SIZE
;

485 
tmp_off
 = 
as
->
off_ãxt
 + 
cou¡î
 * 
PAGE_SIZE
;

487 
ªsu…
 = 
	`∑ge_ªad
(
as
->
as_vnode
, 
tmp_off
, 
	`PADDR_TO_KVADDR
(
c‹em≠
[as->
fú°±
[
t›ãnbôs
][
btmãnbôs
]].
∑
),

488 
PAGE_SIZE
, 
tmp_Êsz
);

489 i‡(
ªsu…
) {

490  
ªsu…
;

493 
i
=0; i<
NUM_TLB
; i++) {

494 
	`TLB_Ród
(&
ehi
, &
ño
, 
i
);

495 i‡(
ño
 & 
TLBLO_VALID
) {

499 
ödex
 = 
as
->
fú°±
[
t›ãnbôs
][
btmãnbôs
];

500 
ehi
 = 
Áu…addªss
;

501 
ño
 = 
c‹em≠
[
ödex
].
∑
 | 
TLBLO_VALID
;

502 
	`TLB_Wrôe
(
ehi
, 
ño
, 
i
);

503 
	`•lx
(
•l
);

509 if(
Áu…addªss
 >
vba£2
 && fau…addªs†< 
vt›2
) {

511 
u_öt32_t
 
cou¡î
, 
tmp_Êsz
, 
tmp_off
;

512 
cou¡î
=0;

513 
Áu…addªss
 - 
cou¡î
*
PAGE_SIZE
 > 
vba£2
)

514 
cou¡î
 ++;

515 
tmp_Êsz
 = 
as
->
fûesize_d©a
 - 
cou¡î
 * 
PAGE_SIZE
;

516 
tmp_off
 = 
as
->
off_d©a
 + 
cou¡î
 * 
PAGE_SIZE
;

518 
i
=0; i<
NUM_TLB
; i++) {

519 
	`TLB_Ród
(&
ehi
, &
ño
, 
i
);

520 i‡(
ño
 & 
TLBLO_VALID
) {

524 
ödex
 = 
as
->
fú°±
[
t›ãnbôs
][
btmãnbôs
];

525 
ehi
 = 
Áu…addªss
;

526 
ño
 = 
c‹em≠
[
ödex
].
∑
 | 
TLBLO_VALID
| 
TLBLO_DIRTY
 ;

528 
ªsu…
 = 
	`∑ge_ªad
(
as
->
as_vnode
, 
tmp_off
, 
	`PADDR_TO_KVADDR
(
c‹em≠
[as->
fú°±
[
t›ãnbôs
][
btmãnbôs
]].
∑
),

529 
PAGE_SIZE
, 
tmp_Êsz
);

530 if(
ªsu…
) {

531  
ªsu…
;

534 
	`TLB_Wrôe
(
ehi
, 
ño
, 
i
);

535 
	`•lx
(
•l
);

546 
i
=0; i<
NUM_TLB
; i++) {

547 
	`TLB_Ród
(&
ehi
, &
ño
, 
i
);

548 i‡(
ño
 & 
TLBLO_VALID
) {

552 
ödex
 = 
as
->
fú°±
[
t›ãnbôs
][
btmãnbôs
];

553 
ehi
 = 
Áu…addªss
;

554 
ño
 = 
c‹em≠
[
ödex
].
∑
 | 
TLBLO_DIRTY
 | 
TLBLO_VALID
;

555 
	`TLB_Wrôe
(
ehi
, 
ño
, 
i
);

556 
	`•lx
(
•l
);

565 
	}
}

567 
addr•a˚
 *

568 
	$as_¸óã
()

570 
addr•a˚
 *
as
 = 
	`kmÆloc
((addrspace));

571 i‡(
as
==
NULL
) {

572  
NULL
;

575 
as
->
fú°±
 = 
	`kmÆloc
(1024*(*));

576 
as
->
as_vnode
 = 
NULL
;

577 
as
->
as_°ackvba£
 = 
USERSTACK
;

578 
as
->
hó±›
 = 0;

579 
as
->
hópbŸtom
 = 0;

580 
as
->
as_vba£1
 = 0;

581 
as
->
as_≈ages1
 = 0;

582 
as
->
as_vba£2
 = 0;

583 
as
->
as_≈ages2
 = 0;

584 
as
->
as_pba£1
=0;

585 
as
->
as_pba£2
=0;

586 
as
->
as_°ackpba£
=0;

588  
as
;

589 
	}
}

592 
	$as_de°roy
(
addr•a˚
 *
as
)

594 
•l
 = 
	`•lhigh
();

596 
	`VOP_DECREF
(
as
->
as_vnode
);

597 
	`VOP_DECREF
(
as
->
as_vnode
);

599 
i
, 
j
;

601 
i
=0; i<
NUM_TLB
; i++) {

602 
	`TLB_Wrôe
(
	`TLBHI_INVALID
(
i
), 
	`TLBLO_INVALID
(), i);

605 
i
=1; i < 1024; i++) {

606 if(
as
->
fú°±
[
i
]!=
NULL
) {

607 
j
=0;j<1024;j++) {

608 i‡(
as
->
fú°±
[
i
][
j
]!=0) {

609 
	`c‹em≠_ªmove
 (
c‹em≠
[
as
->
fú°±
[
i
][
j
]].
∑
,ás->firstpt[i][j]);

613 
	`k‰ì
(
as
->
fú°±
[
i
]);

616 
	`k‰ì
(
as
->
fú°±
);

620 
	`k‰ì
(
as
);

622 
	`•lx
(
•l
);

623 
	}
}

626 
	$as_a˘iv©e
(
addr•a˚
 *
as
)

628 
i
, 
•l
;

630 ()
as
;

632 
•l
 = 
	`•lhigh
();

633 if(
as
!=
cuπhªad
->
t_vm•a˚
) {

634 
i
=0; i<
NUM_TLB
; i++) {

635 
	`TLB_Wrôe
(
	`TLBHI_INVALID
(
i
), 
	`TLBLO_INVALID
(), i);

638 
	`•lx
(
•l
);

639 
	}
}

642 
	$as_deföe_ªgi⁄
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
sz
, size_à
fûesize
,

643 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
, 
vnode
 *
v
, 
u_öt32_t
 
off£t
)

645 
size_t
 
≈ages
;

648 
sz
 +
vaddr
 & ~(
vaddr_t
)
PAGE_FRAME
;

649 
vaddr
 &
PAGE_FRAME
;

652 
sz
 = (sz + 
PAGE_SIZE
 - 1Ë& 
PAGE_FRAME
;

654 
≈ages
 = 
sz
 / 
PAGE_SIZE
;

661 
u_öt32_t
 
t›ãnbôs
, 
btmãnbôs
;

662 
t›ãnbôs
 = 
vaddr
 >>22;

663 
btmãnbôs
 = 
vaddr
 & 0x3FFFFF;

664 
btmãnbôs
 = btmtenbits >> 12;

667 i‡(
as
->
as_vba£1
 == 0) {

668 
as
->
as_vba£1
 = 
vaddr
;

669 
as
->
ªadabÀ1
 = 
ªadabÀ
;

670 
as
->
wrôóbÀ1
 = 
wrôóbÀ
;

671 
as
->
execuèbÀ1
 = 
execuèbÀ
;

672 
as
->
as_≈ages1
 = 
≈ages
;

673 
as
->
hópbŸtom
 = 
vaddr
 + 
sz
;

674 
as
->
hó±›
 =ás->
hópbŸtom
;

676 
as
->
as_vnode
 = 
v
;

677 
	`VOP_INCREF
(
v
);

678 
as
->
off_ãxt
 = 
off£t
;

679 
as
->
fûesize_ãxt
 = 
fûesize
;

682 *
£c⁄d±
 = 
	`kmÆloc
(1024*());

683 
as
->
fú°±
[
t›ãnbôs
] = 
£c⁄d±
;

688 i‡(
as
->
as_vba£2
 == 0) {

689 
as
->
as_vba£2
 = 
vaddr
;

690 
as
->
as_≈ages2
 = 
≈ages
;

691 
as
->
hópbŸtom
 = 
vaddr
 + 
sz
;

692 
as
->
hó±›
 =ás->
hópbŸtom
;

694 
as
->
ªadabÀ2
 = 
ªadabÀ
;

695 
as
->
wrôóbÀ2
 = 
wrôóbÀ
;

696 
as
->
execuèbÀ2
 = 
execuèbÀ
;

698 i‡(
as
->
as_vnode
==
NULL
Ëas->as_vnodê
v
;

699 
	`VOP_INCREF
(
v
);

700 
as
->
off_d©a
 = 
off£t
;

701 
as
->
fûesize_d©a
 = 
fûesize
;

703 *
£c⁄d±
 = 
	`kmÆloc
(1024*());

704 
as
->
fú°±
[
t›ãnbôs
] = 
£c⁄d±
;

709 
	`k¥ötf
("Warning:Åoo manyÑegions\n");

710  
EUNIMP
;

711 
	}
}

714 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
)

718 
u_öt32_t
 
i
, 
ödex
;

720 
u_öt32_t
 
t›ãnbôs1
, 
btmãnbôs1
, 
t›ãnbôs2
, 
btmãnbôs2
;

722 
t›ãnbôs1
 = 
as
->
as_vba£1
 >>22;

723 
btmãnbôs1
 = 
as
->
as_vba£1
 & 0x3FFFFF;

724 
btmãnbôs1
 = btmtenbits1 >> 12;

726 
i
=0;i<
as
->
as_≈ages1
;i++)

728 
∑ddr_t
 
ãmp
;

729 
ãmp
=
	`gë_sögÀ∑ge
 (&
ödex
);

730 if(
i
==0) {

731 
c‹em≠
[
ödex
].
≈ages
 = 
as
->
as_≈ages1
;

733 
as
->
fú°±
[
t›ãnbôs1
][
btmãnbôs1
+
i
] = 
ödex
;

734 if(
ãmp
 == 0)

735  
ENOMEM
;

736 
	`±_ö£π
 (
as
->
as_vba£1
+
i
*
PAGE_SIZE
, 
ãmp
);

737 if(
i
==0Ë
as
->
as_pba£1
 = 
ãmp
;

740 
t›ãnbôs2
 = 
as
->
as_vba£2
 >>22;

741 
btmãnbôs2
 = 
as
->
as_vba£2
 & 0x3FFFFF;

742 
btmãnbôs2
 = btmtenbits2 >> 12;

746 
i
=0;i<
as
->
as_≈ages2
;i++)

748 
∑ddr_t
 
ãmp
;

749 
ãmp
=
	`gë_sögÀ∑ge
 (&
ödex
);

750 if(
i
==0) {

751 
c‹em≠
[
ödex
].
≈ages
 = 
as
->
as_≈ages2
;

753 
as
->
fú°±
[
t›ãnbôs2
][
btmãnbôs2
+
i
] = 
ödex
;

754 if(
ãmp
 == 0)

755  
ENOMEM
;

756 
	`±_ö£π
 (
as
->
as_vba£2
+
i
*
PAGE_SIZE
, 
ãmp
);

757 if(
i
==0Ë
as
->
as_pba£2
 = 
ãmp
;

786 
	}
}

789 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
)

791 ()
as
;

793 
	}
}

796 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

799 *
°ack±r
 = 
as
->
as_°ackvba£
;

801 
	}
}

804 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

806 
addr•a˚
 *
√w
;

808 
√w
 = 
	`as_¸óã
();

809 i‡(
√w
==
NULL
) {

810  
ENOMEM
;

812 
√w
->
hó±›
 = 
ﬁd
->heaptop;

813 
√w
->
hópbŸtom
 = 
ﬁd
 ->heapbottom;

814 
√w
->
as_°ackvba£
 = 
ﬁd
 ->ás_stackvbase;

815 
√w
->
as_°ackpba£
 = 
ﬁd
->as_stackpbase;

816 
√w
->
as_vba£1
 = 
ﬁd
->as_vbase1;

817 
√w
->
as_≈ages1
 = 
ﬁd
->as_npages1;

818 
√w
->
as_vba£2
 = 
ﬁd
->as_vbase2;

819 
√w
->
as_≈ages2
 = 
ﬁd
->as_npages2;

820 
√w
->
as_pba£1
 = 
ﬁd
->as_pbase1;

821 
√w
->
as_pba£2
 = 
ﬁd
->as_pbase2;

822 
√w
->
as_vnode
 = 
ﬁd
->as_vnode;

823 
√w
->
off_d©a
 = 
ﬁd
->off_data;

824 
√w
->
off_ãxt
 = 
ﬁd
->off_text;

827 
i
, 
j
, 
ödex
;

829 
i
=1; i < 1024; i++) {

830 if(
ﬁd
->
fú°±
[
i
]!=
NULL
) {

831 *
£c⁄d±
 = 
	`kmÆloc
(1024*());

832 
√w
->
fú°±
[
i
] = 
£c⁄d±
;

833 
j
=0;j<1024;j++) {

834 i‡(
ﬁd
->
fú°±
[
i
][
j
]!=0) {

835 i‡(
c‹em≠
[
ﬁd
->
fú°±
[
i
][
j
]].
≈ages
 >= 1){

836 
∑ddr_t
 
ãmp
;

837 
ãmp
=
	`gëµages
(
c‹em≠
[
ﬁd
->
fú°±
[
i
][
j
]].
≈ages
);

838 
ödex
=((
ãmp
-
c‹em≠
[2].
∑
)/
PAGE_SIZE
) + 2;

839 
√w
->
fú°±
[
i
][
j
] = 
ödex
;

840 if(
ãmp
 == 0)

841  
ENOMEM
;

842 
	`mem˝y
((*)
	`PADDR_TO_KVADDR
(
ãmp
),

843 (c⁄° *)
	`PADDR_TO_KVADDR
(
c‹em≠
[
ﬁd
->
fú°±
[
i
][
j
]].
∑
),

844 
c‹em≠
[
ﬁd
->
fú°±
[
i
][
j
]].
≈ages
*
PAGE_SIZE
);

845 
j
+=
c‹em≠
[
ﬁd
->
fú°±
[
i
][j]].
≈ages
-1;

853 *
ªt
 = 
√w
;

855 
	}
}

	@/usr/include/elf.h

21 #i‚de‡
_ELF_H


22 
	#_ELF_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


30 
	~<°döt.h
>

33 
uöt16_t
 
	tElf32_HÆf
;

34 
uöt16_t
 
	tElf64_HÆf
;

37 
uöt32_t
 
	tElf32_W‹d
;

38 
öt32_t
 
	tElf32_Sw‹d
;

39 
uöt32_t
 
	tElf64_W‹d
;

40 
öt32_t
 
	tElf64_Sw‹d
;

43 
uöt64_t
 
	tElf32_Xw‹d
;

44 
öt64_t
 
	tElf32_Sxw‹d
;

45 
uöt64_t
 
	tElf64_Xw‹d
;

46 
öt64_t
 
	tElf64_Sxw‹d
;

49 
uöt32_t
 
	tElf32_Addr
;

50 
uöt64_t
 
	tElf64_Addr
;

53 
uöt32_t
 
	tElf32_Off
;

54 
uöt64_t
 
	tElf64_Off
;

57 
uöt16_t
 
	tElf32_Se˘i⁄
;

58 
uöt16_t
 
	tElf64_Se˘i⁄
;

61 
Elf32_HÆf
 
	tElf32_Vîsym
;

62 
Elf64_HÆf
 
	tElf64_Vîsym
;

67 
	#EI_NIDENT
 (16)

	)

71 
	me_idít
[
EI_NIDENT
];

72 
Elf32_HÆf
 
	me_ty≥
;

73 
Elf32_HÆf
 
	me_machöe
;

74 
Elf32_W‹d
 
	me_vîsi⁄
;

75 
Elf32_Addr
 
	me_íåy
;

76 
Elf32_Off
 
	me_phoff
;

77 
Elf32_Off
 
	me_shoff
;

78 
Elf32_W‹d
 
	me_Êags
;

79 
Elf32_HÆf
 
	me_ehsize
;

80 
Elf32_HÆf
 
	me_phítsize
;

81 
Elf32_HÆf
 
	me_phnum
;

82 
Elf32_HÆf
 
	me_shítsize
;

83 
Elf32_HÆf
 
	me_shnum
;

84 
Elf32_HÆf
 
	me_sh°∫dx
;

85 } 
	tElf32_Ehdr
;

89 
	me_idít
[
EI_NIDENT
];

90 
Elf64_HÆf
 
	me_ty≥
;

91 
Elf64_HÆf
 
	me_machöe
;

92 
Elf64_W‹d
 
	me_vîsi⁄
;

93 
Elf64_Addr
 
	me_íåy
;

94 
Elf64_Off
 
	me_phoff
;

95 
Elf64_Off
 
	me_shoff
;

96 
Elf64_W‹d
 
	me_Êags
;

97 
Elf64_HÆf
 
	me_ehsize
;

98 
Elf64_HÆf
 
	me_phítsize
;

99 
Elf64_HÆf
 
	me_phnum
;

100 
Elf64_HÆf
 
	me_shítsize
;

101 
Elf64_HÆf
 
	me_shnum
;

102 
Elf64_HÆf
 
	me_sh°∫dx
;

103 } 
	tElf64_Ehdr
;

109 
	#EI_MAG0
 0

	)

110 
	#ELFMAG0
 0x7‡

	)

112 
	#EI_MAG1
 1

	)

113 
	#ELFMAG1
 'E'

	)

115 
	#EI_MAG2
 2

	)

116 
	#ELFMAG2
 'L'

	)

118 
	#EI_MAG3
 3

	)

119 
	#ELFMAG3
 'F'

	)

122 
	#ELFMAG
 "\177ELF"

	)

123 
	#SELFMAG
 4

	)

125 
	#EI_CLASS
 4

	)

126 
	#ELFCLASSNONE
 0

	)

127 
	#ELFCLASS32
 1

	)

128 
	#ELFCLASS64
 2

	)

129 
	#ELFCLASSNUM
 3

	)

131 
	#EI_DATA
 5

	)

132 
	#ELFDATANONE
 0

	)

133 
	#ELFDATA2LSB
 1

	)

134 
	#ELFDATA2MSB
 2

	)

135 
	#ELFDATANUM
 3

	)

137 
	#EI_VERSION
 6

	)

140 
	#EI_OSABI
 7

	)

141 
	#ELFOSABI_NONE
 0

	)

142 
	#ELFOSABI_SYSV
 0

	)

143 
	#ELFOSABI_HPUX
 1

	)

144 
	#ELFOSABI_NETBSD
 2

	)

145 
	#ELFOSABI_LINUX
 3

	)

146 
	#ELFOSABI_SOLARIS
 6

	)

147 
	#ELFOSABI_AIX
 7

	)

148 
	#ELFOSABI_IRIX
 8

	)

149 
	#ELFOSABI_FREEBSD
 9

	)

150 
	#ELFOSABI_TRU64
 10

	)

151 
	#ELFOSABI_MODESTO
 11

	)

152 
	#ELFOSABI_OPENBSD
 12

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_860
 7

	)

182 
	#EM_MIPS
 8

	)

183 
	#EM_S370
 9

	)

184 
	#EM_MIPS_RS3_LE
 10

	)

186 
	#EM_PARISC
 15

	)

187 
	#EM_VPP500
 17

	)

188 
	#EM_SPARC32PLUS
 18

	)

189 
	#EM_960
 19

	)

190 
	#EM_PPC
 20

	)

191 
	#EM_PPC64
 21

	)

192 
	#EM_S390
 22

	)

194 
	#EM_V800
 36

	)

195 
	#EM_FR20
 37

	)

196 
	#EM_RH32
 38

	)

197 
	#EM_RCE
 39

	)

198 
	#EM_ARM
 40

	)

199 
	#EM_FAKE_ALPHA
 41

	)

200 
	#EM_SH
 42

	)

201 
	#EM_SPARCV9
 43

	)

202 
	#EM_TRICORE
 44

	)

203 
	#EM_ARC
 45

	)

204 
	#EM_H8_300
 46

	)

205 
	#EM_H8_300H
 47

	)

206 
	#EM_H8S
 48

	)

207 
	#EM_H8_500
 49

	)

208 
	#EM_IA_64
 50

	)

209 
	#EM_MIPS_X
 51

	)

210 
	#EM_COLDFIRE
 52

	)

211 
	#EM_68HC12
 53

	)

212 
	#EM_MMA
 54

	)

213 
	#EM_PCP
 55

	)

214 
	#EM_NCPU
 56

	)

215 
	#EM_NDR1
 57

	)

216 
	#EM_STARCORE
 58

	)

217 
	#EM_ME16
 59

	)

218 
	#EM_ST100
 60

	)

219 
	#EM_TINYJ
 61

	)

220 
	#EM_X86_64
 62

	)

221 
	#EM_PDSP
 63

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_A5
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_NUM
 95

	)

258 
	#EM_ALPHA
 0x9026

	)

262 
	#EV_NONE
 0

	)

263 
	#EV_CURRENT
 1

	)

264 
	#EV_NUM
 2

	)

270 
Elf32_W‹d
 
	msh_«me
;

271 
Elf32_W‹d
 
	msh_ty≥
;

272 
Elf32_W‹d
 
	msh_Êags
;

273 
Elf32_Addr
 
	msh_addr
;

274 
Elf32_Off
 
	msh_off£t
;

275 
Elf32_W‹d
 
	msh_size
;

276 
Elf32_W‹d
 
	msh_lök
;

277 
Elf32_W‹d
 
	msh_öfo
;

278 
Elf32_W‹d
 
	msh_addølign
;

279 
Elf32_W‹d
 
	msh_ítsize
;

280 } 
	tElf32_Shdr
;

284 
Elf64_W‹d
 
	msh_«me
;

285 
Elf64_W‹d
 
	msh_ty≥
;

286 
Elf64_Xw‹d
 
	msh_Êags
;

287 
Elf64_Addr
 
	msh_addr
;

288 
Elf64_Off
 
	msh_off£t
;

289 
Elf64_Xw‹d
 
	msh_size
;

290 
Elf64_W‹d
 
	msh_lök
;

291 
Elf64_W‹d
 
	msh_öfo
;

292 
Elf64_Xw‹d
 
	msh_addølign
;

293 
Elf64_Xw‹d
 
	msh_ítsize
;

294 } 
	tElf64_Shdr
;

298 
	#SHN_UNDEF
 0

	)

299 
	#SHN_LORESERVE
 0xff00

	)

300 
	#SHN_LOPROC
 0xff00

	)

301 
	#SHN_BEFORE
 0xff00

	)

303 
	#SHN_AFTER
 0xff01

	)

305 
	#SHN_HIPROC
 0xff1‡

	)

306 
	#SHN_LOOS
 0xff20

	)

307 
	#SHN_HIOS
 0xff3‡

	)

308 
	#SHN_ABS
 0xfff1

	)

309 
	#SHN_COMMON
 0xfff2

	)

310 
	#SHN_XINDEX
 0xfff‡

	)

311 
	#SHN_HIRESERVE
 0xfff‡

	)

315 
	#SHT_NULL
 0

	)

316 
	#SHT_PROGBITS
 1

	)

317 
	#SHT_SYMTAB
 2

	)

318 
	#SHT_STRTAB
 3

	)

319 
	#SHT_RELA
 4

	)

320 
	#SHT_HASH
 5

	)

321 
	#SHT_DYNAMIC
 6

	)

322 
	#SHT_NOTE
 7

	)

323 
	#SHT_NOBITS
 8

	)

324 
	#SHT_REL
 9

	)

325 
	#SHT_SHLIB
 10

	)

326 
	#SHT_DYNSYM
 11

	)

327 
	#SHT_INIT_ARRAY
 14

	)

328 
	#SHT_FINI_ARRAY
 15

	)

329 
	#SHT_PREINIT_ARRAY
 16

	)

330 
	#SHT_GROUP
 17

	)

331 
	#SHT_SYMTAB_SHNDX
 18

	)

332 
	#SHT_NUM
 19

	)

333 
	#SHT_LOOS
 0x60000000

	)

334 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

335 
	#SHT_GNU_HASH
 0x6ffffff6

	)

336 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

337 
	#SHT_CHECKSUM
 0x6ffffff8

	)

338 
	#SHT_LOSUNW
 0x6fffffÁ

	)

339 
	#SHT_SUNW_move
 0x6fffffÁ

	)

340 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

341 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

342 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

343 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

344 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

345 
	#SHT_HISUNW
 0x6ffffff‡

	)

346 
	#SHT_HIOS
 0x6ffffff‡

	)

347 
	#SHT_LOPROC
 0x70000000

	)

348 
	#SHT_HIPROC
 0x7ffffff‡

	)

349 
	#SHT_LOUSER
 0x80000000

	)

350 
	#SHT_HIUSER
 0x8ffffff‡

	)

354 
	#SHF_WRITE
 (1 << 0Ë

	)

355 
	#SHF_ALLOC
 (1 << 1Ë

	)

356 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

357 
	#SHF_MERGE
 (1 << 4Ë

	)

358 
	#SHF_STRINGS
 (1 << 5Ë

	)

359 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

360 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

361 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

363 
	#SHF_GROUP
 (1 << 9Ë

	)

364 
	#SHF_TLS
 (1 << 10Ë

	)

365 
	#SHF_MASKOS
 0x0ff00000

	)

366 
	#SHF_MASKPROC
 0xf0000000

	)

367 
	#SHF_ORDERED
 (1 << 30Ë

	)

369 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

373 
	#GRP_COMDAT
 0x1

	)

379 
Elf32_W‹d
 
	m°_«me
;

380 
Elf32_Addr
 
	m°_vÆue
;

381 
Elf32_W‹d
 
	m°_size
;

382 
	m°_öfo
;

383 
	m°_Ÿhî
;

384 
Elf32_Se˘i⁄
 
	m°_shndx
;

385 } 
	tElf32_Sym
;

389 
Elf64_W‹d
 
	m°_«me
;

390 
	m°_öfo
;

391 
	m°_Ÿhî
;

392 
Elf64_Se˘i⁄
 
	m°_shndx
;

393 
Elf64_Addr
 
	m°_vÆue
;

394 
Elf64_Xw‹d
 
	m°_size
;

395 } 
	tElf64_Sym
;

402 
Elf32_HÆf
 
	msi_boundto
;

403 
Elf32_HÆf
 
	msi_Êags
;

404 } 
	tElf32_Symöfo
;

408 
Elf64_HÆf
 
	msi_boundto
;

409 
Elf64_HÆf
 
	msi_Êags
;

410 } 
	tElf64_Symöfo
;

413 
	#SYMINFO_BT_SELF
 0xfff‡

	)

414 
	#SYMINFO_BT_PARENT
 0xff„

	)

415 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

418 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

419 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

420 
	#SYMINFO_FLG_COPY
 0x0004

	)

421 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

424 
	#SYMINFO_NONE
 0

	)

425 
	#SYMINFO_CURRENT
 1

	)

426 
	#SYMINFO_NUM
 2

	)

431 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

432 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

433 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

436 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

437 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

438 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

442 
	#STB_LOCAL
 0

	)

443 
	#STB_GLOBAL
 1

	)

444 
	#STB_WEAK
 2

	)

445 
	#STB_NUM
 3

	)

446 
	#STB_LOOS
 10

	)

447 
	#STB_GNU_UNIQUE
 10

	)

448 
	#STB_HIOS
 12

	)

449 
	#STB_LOPROC
 13

	)

450 
	#STB_HIPROC
 15

	)

454 
	#STT_NOTYPE
 0

	)

455 
	#STT_OBJECT
 1

	)

456 
	#STT_FUNC
 2

	)

457 
	#STT_SECTION
 3

	)

458 
	#STT_FILE
 4

	)

459 
	#STT_COMMON
 5

	)

460 
	#STT_TLS
 6

	)

461 
	#STT_NUM
 7

	)

462 
	#STT_LOOS
 10

	)

463 
	#STT_GNU_IFUNC
 10

	)

464 
	#STT_HIOS
 12

	)

465 
	#STT_LOPROC
 13

	)

466 
	#STT_HIPROC
 15

	)

473 
	#STN_UNDEF
 0

	)

478 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

481 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

484 
	#STV_DEFAULT
 0

	)

485 
	#STV_INTERNAL
 1

	)

486 
	#STV_HIDDEN
 2

	)

487 
	#STV_PROTECTED
 3

	)

494 
Elf32_Addr
 
	mr_off£t
;

495 
Elf32_W‹d
 
	mr_öfo
;

496 } 
	tElf32_Rñ
;

505 
Elf64_Addr
 
	mr_off£t
;

506 
Elf64_Xw‹d
 
	mr_öfo
;

507 } 
	tElf64_Rñ
;

513 
Elf32_Addr
 
	mr_off£t
;

514 
Elf32_W‹d
 
	mr_öfo
;

515 
Elf32_Sw‹d
 
	mr_addíd
;

516 } 
	tElf32_Rña
;

520 
Elf64_Addr
 
	mr_off£t
;

521 
Elf64_Xw‹d
 
	mr_öfo
;

522 
Elf64_Sxw‹d
 
	mr_addíd
;

523 } 
	tElf64_Rña
;

527 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

528 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

529 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

531 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

532 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

533 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

539 
Elf32_W‹d
 
	mp_ty≥
;

540 
Elf32_Off
 
	mp_off£t
;

541 
Elf32_Addr
 
	mp_vaddr
;

542 
Elf32_Addr
 
	mp_∑ddr
;

543 
Elf32_W‹d
 
	mp_fûesz
;

544 
Elf32_W‹d
 
	mp_memsz
;

545 
Elf32_W‹d
 
	mp_Êags
;

546 
Elf32_W‹d
 
	mp_Æign
;

547 } 
	tElf32_Phdr
;

551 
Elf64_W‹d
 
	mp_ty≥
;

552 
Elf64_W‹d
 
	mp_Êags
;

553 
Elf64_Off
 
	mp_off£t
;

554 
Elf64_Addr
 
	mp_vaddr
;

555 
Elf64_Addr
 
	mp_∑ddr
;

556 
Elf64_Xw‹d
 
	mp_fûesz
;

557 
Elf64_Xw‹d
 
	mp_memsz
;

558 
Elf64_Xw‹d
 
	mp_Æign
;

559 } 
	tElf64_Phdr
;

563 
	#PT_NULL
 0

	)

564 
	#PT_LOAD
 1

	)

565 
	#PT_DYNAMIC
 2

	)

566 
	#PT_INTERP
 3

	)

567 
	#PT_NOTE
 4

	)

568 
	#PT_SHLIB
 5

	)

569 
	#PT_PHDR
 6

	)

570 
	#PT_TLS
 7

	)

571 
	#PT_NUM
 8

	)

572 
	#PT_LOOS
 0x60000000

	)

573 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

574 
	#PT_GNU_STACK
 0x6474e551

	)

575 
	#PT_GNU_RELRO
 0x6474e552

	)

576 
	#PT_LOSUNW
 0x6fffffÁ

	)

577 
	#PT_SUNWBSS
 0x6fffffÁ

	)

578 
	#PT_SUNWSTACK
 0x6ffffffb

	)

579 
	#PT_HISUNW
 0x6fffffff

	)

580 
	#PT_HIOS
 0x6ffffff‡

	)

581 
	#PT_LOPROC
 0x70000000

	)

582 
	#PT_HIPROC
 0x7ffffff‡

	)

586 
	#PF_X
 (1 << 0Ë

	)

587 
	#PF_W
 (1 << 1Ë

	)

588 
	#PF_R
 (1 << 2Ë

	)

589 
	#PF_MASKOS
 0x0ff00000

	)

590 
	#PF_MASKPROC
 0xf0000000

	)

594 
	#NT_PRSTATUS
 1

	)

595 
	#NT_FPREGSET
 2

	)

596 
	#NT_PRPSINFO
 3

	)

597 
	#NT_PRXREG
 4

	)

598 
	#NT_TASKSTRUCT
 4

	)

599 
	#NT_PLATFORM
 5

	)

600 
	#NT_AUXV
 6

	)

601 
	#NT_GWINDOWS
 7

	)

602 
	#NT_ASRS
 8

	)

603 
	#NT_PSTATUS
 10

	)

604 
	#NT_PSINFO
 13

	)

605 
	#NT_PRCRED
 14

	)

606 
	#NT_UTSNAME
 15

	)

607 
	#NT_LWPSTATUS
 16

	)

608 
	#NT_LWPSINFO
 17

	)

609 
	#NT_PRFPXREG
 20

	)

610 
	#NT_PRXFPREG
 0x46e62b7‡

	)

611 
	#NT_PPC_VMX
 0x100

	)

612 
	#NT_PPC_SPE
 0x101

	)

613 
	#NT_PPC_VSX
 0x102

	)

614 
	#NT_386_TLS
 0x200

	)

615 
	#NT_386_IOPERM
 0x201

	)

619 
	#NT_VERSION
 1

	)

626 
Elf32_Sw‹d
 
	md_èg
;

629 
Elf32_W‹d
 
	md_vÆ
;

630 
Elf32_Addr
 
	md_±r
;

631 } 
	md_un
;

632 } 
	tElf32_Dyn
;

636 
Elf64_Sxw‹d
 
	md_èg
;

639 
Elf64_Xw‹d
 
	md_vÆ
;

640 
Elf64_Addr
 
	md_±r
;

641 } 
	md_un
;

642 } 
	tElf64_Dyn
;

646 
	#DT_NULL
 0

	)

647 
	#DT_NEEDED
 1

	)

648 
	#DT_PLTRELSZ
 2

	)

649 
	#DT_PLTGOT
 3

	)

650 
	#DT_HASH
 4

	)

651 
	#DT_STRTAB
 5

	)

652 
	#DT_SYMTAB
 6

	)

653 
	#DT_RELA
 7

	)

654 
	#DT_RELASZ
 8

	)

655 
	#DT_RELAENT
 9

	)

656 
	#DT_STRSZ
 10

	)

657 
	#DT_SYMENT
 11

	)

658 
	#DT_INIT
 12

	)

659 
	#DT_FINI
 13

	)

660 
	#DT_SONAME
 14

	)

661 
	#DT_RPATH
 15

	)

662 
	#DT_SYMBOLIC
 16

	)

663 
	#DT_REL
 17

	)

664 
	#DT_RELSZ
 18

	)

665 
	#DT_RELENT
 19

	)

666 
	#DT_PLTREL
 20

	)

667 
	#DT_DEBUG
 21

	)

668 
	#DT_TEXTREL
 22

	)

669 
	#DT_JMPREL
 23

	)

670 
	#DT_BIND_NOW
 24

	)

671 
	#DT_INIT_ARRAY
 25

	)

672 
	#DT_FINI_ARRAY
 26

	)

673 
	#DT_INIT_ARRAYSZ
 27

	)

674 
	#DT_FINI_ARRAYSZ
 28

	)

675 
	#DT_RUNPATH
 29

	)

676 
	#DT_FLAGS
 30

	)

677 
	#DT_ENCODING
 32

	)

678 
	#DT_PREINIT_ARRAY
 32

	)

679 
	#DT_PREINIT_ARRAYSZ
 33

	)

680 
	#DT_NUM
 34

	)

681 
	#DT_LOOS
 0x6000000d

	)

682 
	#DT_HIOS
 0x6ffff000

	)

683 
	#DT_LOPROC
 0x70000000

	)

684 
	#DT_HIPROC
 0x7ffffff‡

	)

685 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

690 
	#DT_VALRNGLO
 0x6ffffd00

	)

691 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

692 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

693 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

694 
	#DT_CHECKSUM
 0x6ffffdf8

	)

695 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

696 
	#DT_MOVEENT
 0x6ffffdÁ

	)

697 
	#DT_MOVESZ
 0x6ffffdfb

	)

698 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

699 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

701 
	#DT_SYMINSZ
 0x6ffffd„

	)

702 
	#DT_SYMINENT
 0x6ffffdf‡

	)

703 
	#DT_VALRNGHI
 0x6ffffdff

	)

704 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

705 
	#DT_VALNUM
 12

	)

712 
	#DT_ADDRRNGLO
 0x6fff„00

	)

713 
	#DT_GNU_HASH
 0x6fff„f5

	)

714 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

715 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

716 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

717 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

718 
	#DT_CONFIG
 0x6fff„Á

	)

719 
	#DT_DEPAUDIT
 0x6fff„fb

	)

720 
	#DT_AUDIT
 0x6fff„f¯

	)

721 
	#DT_PLTPAD
 0x6fff„fd

	)

722 
	#DT_MOVETAB
 0x6fff„„

	)

723 
	#DT_SYMINFO
 0x6fff„f‡

	)

724 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

725 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

726 
	#DT_ADDRNUM
 11

	)

730 
	#DT_VERSYM
 0x6ffffff0

	)

732 
	#DT_RELACOUNT
 0x6ffffff9

	)

733 
	#DT_RELCOUNT
 0x6fffffÁ

	)

736 
	#DT_FLAGS_1
 0x6ffffffb

	)

737 
	#DT_VERDEF
 0x6ffffff¯

	)

739 
	#DT_VERDEFNUM
 0x6ffffffd

	)

740 
	#DT_VERNEED
 0x6fffff„

	)

742 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

743 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

744 
	#DT_VERSIONTAGNUM
 16

	)

748 
	#DT_AUXILIARY
 0x7ffffffd

	)

749 
	#DT_FILTER
 0x7ffffff‡

	)

750 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

751 
	#DT_EXTRANUM
 3

	)

754 
	#DF_ORIGIN
 0x00000001

	)

755 
	#DF_SYMBOLIC
 0x00000002

	)

756 
	#DF_TEXTREL
 0x00000004

	)

757 
	#DF_BIND_NOW
 0x00000008

	)

758 
	#DF_STATIC_TLS
 0x00000010

	)

762 
	#DF_1_NOW
 0x00000001

	)

763 
	#DF_1_GLOBAL
 0x00000002

	)

764 
	#DF_1_GROUP
 0x00000004

	)

765 
	#DF_1_NODELETE
 0x00000008

	)

766 
	#DF_1_LOADFLTR
 0x00000010

	)

767 
	#DF_1_INITFIRST
 0x00000020

	)

768 
	#DF_1_NOOPEN
 0x00000040

	)

769 
	#DF_1_ORIGIN
 0x00000080

	)

770 
	#DF_1_DIRECT
 0x00000100

	)

771 
	#DF_1_TRANS
 0x00000200

	)

772 
	#DF_1_INTERPOSE
 0x00000400

	)

773 
	#DF_1_NODEFLIB
 0x00000800

	)

774 
	#DF_1_NODUMP
 0x00001000

	)

775 
	#DF_1_CONFALT
 0x00002000

	)

776 
	#DF_1_ENDFILTEE
 0x00004000

	)

777 
	#DF_1_DISPRELDNE
 0x00008000

	)

778 
	#DF_1_DISPRELPND
 0x00010000

	)

781 
	#DTF_1_PARINIT
 0x00000001

	)

782 
	#DTF_1_CONFEXP
 0x00000002

	)

785 
	#DF_P1_LAZYLOAD
 0x00000001

	)

786 
	#DF_P1_GROUPPERM
 0x00000002

	)

793 
Elf32_HÆf
 
	mvd_vîsi⁄
;

794 
Elf32_HÆf
 
	mvd_Êags
;

795 
Elf32_HÆf
 
	mvd_ndx
;

796 
Elf32_HÆf
 
	mvd_˙t
;

797 
Elf32_W‹d
 
	mvd_hash
;

798 
Elf32_W‹d
 
	mvd_aux
;

799 
Elf32_W‹d
 
	mvd_√xt
;

801 } 
	tElf32_Vîdef
;

805 
Elf64_HÆf
 
	mvd_vîsi⁄
;

806 
Elf64_HÆf
 
	mvd_Êags
;

807 
Elf64_HÆf
 
	mvd_ndx
;

808 
Elf64_HÆf
 
	mvd_˙t
;

809 
Elf64_W‹d
 
	mvd_hash
;

810 
Elf64_W‹d
 
	mvd_aux
;

811 
Elf64_W‹d
 
	mvd_√xt
;

813 } 
	tElf64_Vîdef
;

817 
	#VER_DEF_NONE
 0

	)

818 
	#VER_DEF_CURRENT
 1

	)

819 
	#VER_DEF_NUM
 2

	)

822 
	#VER_FLG_BASE
 0x1

	)

823 
	#VER_FLG_WEAK
 0x2

	)

826 
	#VER_NDX_LOCAL
 0

	)

827 
	#VER_NDX_GLOBAL
 1

	)

828 
	#VER_NDX_LORESERVE
 0xff00

	)

829 
	#VER_NDX_ELIMINATE
 0xff01

	)

835 
Elf32_W‹d
 
	mvda_«me
;

836 
Elf32_W‹d
 
	mvda_√xt
;

838 } 
	tElf32_Vîdaux
;

842 
Elf64_W‹d
 
	mvda_«me
;

843 
Elf64_W‹d
 
	mvda_√xt
;

845 } 
	tElf64_Vîdaux
;

852 
Elf32_HÆf
 
	mvn_vîsi⁄
;

853 
Elf32_HÆf
 
	mvn_˙t
;

854 
Elf32_W‹d
 
	mvn_fûe
;

856 
Elf32_W‹d
 
	mvn_aux
;

857 
Elf32_W‹d
 
	mvn_√xt
;

859 } 
	tElf32_Vî√ed
;

863 
Elf64_HÆf
 
	mvn_vîsi⁄
;

864 
Elf64_HÆf
 
	mvn_˙t
;

865 
Elf64_W‹d
 
	mvn_fûe
;

867 
Elf64_W‹d
 
	mvn_aux
;

868 
Elf64_W‹d
 
	mvn_√xt
;

870 } 
	tElf64_Vî√ed
;

874 
	#VER_NEED_NONE
 0

	)

875 
	#VER_NEED_CURRENT
 1

	)

876 
	#VER_NEED_NUM
 2

	)

882 
Elf32_W‹d
 
	mv«_hash
;

883 
Elf32_HÆf
 
	mv«_Êags
;

884 
Elf32_HÆf
 
	mv«_Ÿhî
;

885 
Elf32_W‹d
 
	mv«_«me
;

886 
Elf32_W‹d
 
	mv«_√xt
;

888 } 
	tElf32_Vî«ux
;

892 
Elf64_W‹d
 
	mv«_hash
;

893 
Elf64_HÆf
 
	mv«_Êags
;

894 
Elf64_HÆf
 
	mv«_Ÿhî
;

895 
Elf64_W‹d
 
	mv«_«me
;

896 
Elf64_W‹d
 
	mv«_√xt
;

898 } 
	tElf64_Vî«ux
;

902 
	#VER_FLG_WEAK
 0x2

	)

916 
uöt32_t
 
	ma_ty≥
;

919 
uöt32_t
 
	ma_vÆ
;

923 } 
	ma_un
;

924 } 
	tElf32_auxv_t
;

928 
uöt64_t
 
	ma_ty≥
;

931 
uöt64_t
 
	ma_vÆ
;

935 } 
	ma_un
;

936 } 
	tElf64_auxv_t
;

940 
	#AT_NULL
 0

	)

941 
	#AT_IGNORE
 1

	)

942 
	#AT_EXECFD
 2

	)

943 
	#AT_PHDR
 3

	)

944 
	#AT_PHENT
 4

	)

945 
	#AT_PHNUM
 5

	)

946 
	#AT_PAGESZ
 6

	)

947 
	#AT_BASE
 7

	)

948 
	#AT_FLAGS
 8

	)

949 
	#AT_ENTRY
 9

	)

950 
	#AT_NOTELF
 10

	)

951 
	#AT_UID
 11

	)

952 
	#AT_EUID
 12

	)

953 
	#AT_GID
 13

	)

954 
	#AT_EGID
 14

	)

955 
	#AT_CLKTCK
 17

	)

958 
	#AT_PLATFORM
 15

	)

959 
	#AT_HWCAP
 16

	)

964 
	#AT_FPUCW
 18

	)

967 
	#AT_DCACHEBSIZE
 19

	)

968 
	#AT_ICACHEBSIZE
 20

	)

969 
	#AT_UCACHEBSIZE
 21

	)

973 
	#AT_IGNOREPPC
 22

	)

975 
	#AT_SECURE
 23

	)

977 
	#AT_BASE_PLATFORM
 24

	)

979 
	#AT_RANDOM
 25

	)

981 
	#AT_EXECFN
 31

	)

985 
	#AT_SYSINFO
 32

	)

986 
	#AT_SYSINFO_EHDR
 33

	)

990 
	#AT_L1I_CACHESHAPE
 34

	)

991 
	#AT_L1D_CACHESHAPE
 35

	)

992 
	#AT_L2_CACHESHAPE
 36

	)

993 
	#AT_L3_CACHESHAPE
 37

	)

1000 
Elf32_W‹d
 
	mn_«mesz
;

1001 
Elf32_W‹d
 
	mn_descsz
;

1002 
Elf32_W‹d
 
	mn_ty≥
;

1003 } 
	tElf32_Nhdr
;

1007 
Elf64_W‹d
 
	mn_«mesz
;

1008 
Elf64_W‹d
 
	mn_descsz
;

1009 
Elf64_W‹d
 
	mn_ty≥
;

1010 } 
	tElf64_Nhdr
;

1015 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1018 
	#ELF_NOTE_GNU
 "GNU"

	)

1024 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1035 
	#NT_GNU_ABI_TAG
 1

	)

1036 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1040 
	#ELF_NOTE_OS_LINUX
 0

	)

1041 
	#ELF_NOTE_OS_GNU
 1

	)

1042 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1043 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1051 
	#NT_GNU_HWCAP
 2

	)

1055 
	#NT_GNU_BUILD_ID
 3

	)

1058 
	#NT_GNU_GOLD_VERSION
 4

	)

1064 
Elf32_Xw‹d
 
	mm_vÆue
;

1065 
Elf32_W‹d
 
	mm_öfo
;

1066 
Elf32_W‹d
 
	mm_poff£t
;

1067 
Elf32_HÆf
 
	mm_ª≥©
;

1068 
Elf32_HÆf
 
	mm_°ride
;

1069 } 
	tElf32_Move
;

1073 
Elf64_Xw‹d
 
	mm_vÆue
;

1074 
Elf64_Xw‹d
 
	mm_öfo
;

1075 
Elf64_Xw‹d
 
	mm_poff£t
;

1076 
Elf64_HÆf
 
	mm_ª≥©
;

1077 
Elf64_HÆf
 
	mm_°ride
;

1078 } 
	tElf64_Move
;

1081 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1082 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1083 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1085 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1086 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1087 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1093 
	#EF_CPU32
 0x00810000

	)

1097 
	#R_68K_NONE
 0

	)

1098 
	#R_68K_32
 1

	)

1099 
	#R_68K_16
 2

	)

1100 
	#R_68K_8
 3

	)

1101 
	#R_68K_PC32
 4

	)

1102 
	#R_68K_PC16
 5

	)

1103 
	#R_68K_PC8
 6

	)

1104 
	#R_68K_GOT32
 7

	)

1105 
	#R_68K_GOT16
 8

	)

1106 
	#R_68K_GOT8
 9

	)

1107 
	#R_68K_GOT32O
 10

	)

1108 
	#R_68K_GOT16O
 11

	)

1109 
	#R_68K_GOT8O
 12

	)

1110 
	#R_68K_PLT32
 13

	)

1111 
	#R_68K_PLT16
 14

	)

1112 
	#R_68K_PLT8
 15

	)

1113 
	#R_68K_PLT32O
 16

	)

1114 
	#R_68K_PLT16O
 17

	)

1115 
	#R_68K_PLT8O
 18

	)

1116 
	#R_68K_COPY
 19

	)

1117 
	#R_68K_GLOB_DAT
 20

	)

1118 
	#R_68K_JMP_SLOT
 21

	)

1119 
	#R_68K_RELATIVE
 22

	)

1120 
	#R_68K_TLS_GD32
 25

	)

1121 
	#R_68K_TLS_GD16
 26

	)

1122 
	#R_68K_TLS_GD8
 27

	)

1123 
	#R_68K_TLS_LDM32
 28

	)

1124 
	#R_68K_TLS_LDM16
 29

	)

1125 
	#R_68K_TLS_LDM8
 30

	)

1126 
	#R_68K_TLS_LDO32
 31

	)

1127 
	#R_68K_TLS_LDO16
 32

	)

1128 
	#R_68K_TLS_LDO8
 33

	)

1129 
	#R_68K_TLS_IE32
 34

	)

1130 
	#R_68K_TLS_IE16
 35

	)

1131 
	#R_68K_TLS_IE8
 36

	)

1132 
	#R_68K_TLS_LE32
 37

	)

1134 
	#R_68K_TLS_LE16
 38

	)

1136 
	#R_68K_TLS_LE8
 39

	)

1138 
	#R_68K_TLS_DTPMOD32
 40

	)

1139 
	#R_68K_TLS_DTPREL32
 41

	)

1140 
	#R_68K_TLS_TPREL32
 42

	)

1142 
	#R_68K_NUM
 43

	)

1148 
	#R_386_NONE
 0

	)

1149 
	#R_386_32
 1

	)

1150 
	#R_386_PC32
 2

	)

1151 
	#R_386_GOT32
 3

	)

1152 
	#R_386_PLT32
 4

	)

1153 
	#R_386_COPY
 5

	)

1154 
	#R_386_GLOB_DAT
 6

	)

1155 
	#R_386_JMP_SLOT
 7

	)

1156 
	#R_386_RELATIVE
 8

	)

1157 
	#R_386_GOTOFF
 9

	)

1158 
	#R_386_GOTPC
 10

	)

1159 
	#R_386_32PLT
 11

	)

1160 
	#R_386_TLS_TPOFF
 14

	)

1161 
	#R_386_TLS_IE
 15

	)

1163 
	#R_386_TLS_GOTIE
 16

	)

1165 
	#R_386_TLS_LE
 17

	)

1167 
	#R_386_TLS_GD
 18

	)

1169 
	#R_386_TLS_LDM
 19

	)

1172 
	#R_386_16
 20

	)

1173 
	#R_386_PC16
 21

	)

1174 
	#R_386_8
 22

	)

1175 
	#R_386_PC8
 23

	)

1176 
	#R_386_TLS_GD_32
 24

	)

1178 
	#R_386_TLS_GD_PUSH
 25

	)

1179 
	#R_386_TLS_GD_CALL
 26

	)

1181 
	#R_386_TLS_GD_POP
 27

	)

1182 
	#R_386_TLS_LDM_32
 28

	)

1184 
	#R_386_TLS_LDM_PUSH
 29

	)

1185 
	#R_386_TLS_LDM_CALL
 30

	)

1187 
	#R_386_TLS_LDM_POP
 31

	)

1188 
	#R_386_TLS_LDO_32
 32

	)

1189 
	#R_386_TLS_IE_32
 33

	)

1191 
	#R_386_TLS_LE_32
 34

	)

1193 
	#R_386_TLS_DTPMOD32
 35

	)

1194 
	#R_386_TLS_DTPOFF32
 36

	)

1195 
	#R_386_TLS_TPOFF32
 37

	)

1197 
	#R_386_TLS_GOTDESC
 39

	)

1198 
	#R_386_TLS_DESC_CALL
 40

	)

1201 
	#R_386_TLS_DESC
 41

	)

1205 
	#R_386_IRELATIVE
 42

	)

1207 
	#R_386_NUM
 43

	)

1213 
	#STT_SPARC_REGISTER
 13

	)

1217 
	#EF_SPARCV9_MM
 3

	)

1218 
	#EF_SPARCV9_TSO
 0

	)

1219 
	#EF_SPARCV9_PSO
 1

	)

1220 
	#EF_SPARCV9_RMO
 2

	)

1221 
	#EF_SPARC_LEDATA
 0x800000

	)

1222 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1223 
	#EF_SPARC_32PLUS
 0x000100

	)

1224 
	#EF_SPARC_SUN_US1
 0x000200

	)

1225 
	#EF_SPARC_HAL_R1
 0x000400

	)

1226 
	#EF_SPARC_SUN_US3
 0x000800

	)

1230 
	#R_SPARC_NONE
 0

	)

1231 
	#R_SPARC_8
 1

	)

1232 
	#R_SPARC_16
 2

	)

1233 
	#R_SPARC_32
 3

	)

1234 
	#R_SPARC_DISP8
 4

	)

1235 
	#R_SPARC_DISP16
 5

	)

1236 
	#R_SPARC_DISP32
 6

	)

1237 
	#R_SPARC_WDISP30
 7

	)

1238 
	#R_SPARC_WDISP22
 8

	)

1239 
	#R_SPARC_HI22
 9

	)

1240 
	#R_SPARC_22
 10

	)

1241 
	#R_SPARC_13
 11

	)

1242 
	#R_SPARC_LO10
 12

	)

1243 
	#R_SPARC_GOT10
 13

	)

1244 
	#R_SPARC_GOT13
 14

	)

1245 
	#R_SPARC_GOT22
 15

	)

1246 
	#R_SPARC_PC10
 16

	)

1247 
	#R_SPARC_PC22
 17

	)

1248 
	#R_SPARC_WPLT30
 18

	)

1249 
	#R_SPARC_COPY
 19

	)

1250 
	#R_SPARC_GLOB_DAT
 20

	)

1251 
	#R_SPARC_JMP_SLOT
 21

	)

1252 
	#R_SPARC_RELATIVE
 22

	)

1253 
	#R_SPARC_UA32
 23

	)

1257 
	#R_SPARC_PLT32
 24

	)

1258 
	#R_SPARC_HIPLT22
 25

	)

1259 
	#R_SPARC_LOPLT10
 26

	)

1260 
	#R_SPARC_PCPLT32
 27

	)

1261 
	#R_SPARC_PCPLT22
 28

	)

1262 
	#R_SPARC_PCPLT10
 29

	)

1263 
	#R_SPARC_10
 30

	)

1264 
	#R_SPARC_11
 31

	)

1265 
	#R_SPARC_64
 32

	)

1266 
	#R_SPARC_OLO10
 33

	)

1267 
	#R_SPARC_HH22
 34

	)

1268 
	#R_SPARC_HM10
 35

	)

1269 
	#R_SPARC_LM22
 36

	)

1270 
	#R_SPARC_PC_HH22
 37

	)

1271 
	#R_SPARC_PC_HM10
 38

	)

1272 
	#R_SPARC_PC_LM22
 39

	)

1273 
	#R_SPARC_WDISP16
 40

	)

1274 
	#R_SPARC_WDISP19
 41

	)

1275 
	#R_SPARC_GLOB_JMP
 42

	)

1276 
	#R_SPARC_7
 43

	)

1277 
	#R_SPARC_5
 44

	)

1278 
	#R_SPARC_6
 45

	)

1279 
	#R_SPARC_DISP64
 46

	)

1280 
	#R_SPARC_PLT64
 47

	)

1281 
	#R_SPARC_HIX22
 48

	)

1282 
	#R_SPARC_LOX10
 49

	)

1283 
	#R_SPARC_H44
 50

	)

1284 
	#R_SPARC_M44
 51

	)

1285 
	#R_SPARC_L44
 52

	)

1286 
	#R_SPARC_REGISTER
 53

	)

1287 
	#R_SPARC_UA64
 54

	)

1288 
	#R_SPARC_UA16
 55

	)

1289 
	#R_SPARC_TLS_GD_HI22
 56

	)

1290 
	#R_SPARC_TLS_GD_LO10
 57

	)

1291 
	#R_SPARC_TLS_GD_ADD
 58

	)

1292 
	#R_SPARC_TLS_GD_CALL
 59

	)

1293 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1294 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1295 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1296 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1297 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1298 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1299 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1300 
	#R_SPARC_TLS_IE_HI22
 67

	)

1301 
	#R_SPARC_TLS_IE_LO10
 68

	)

1302 
	#R_SPARC_TLS_IE_LD
 69

	)

1303 
	#R_SPARC_TLS_IE_LDX
 70

	)

1304 
	#R_SPARC_TLS_IE_ADD
 71

	)

1305 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1306 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1307 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1308 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1309 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1310 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1311 
	#R_SPARC_TLS_TPOFF32
 78

	)

1312 
	#R_SPARC_TLS_TPOFF64
 79

	)

1313 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1314 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1315 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1316 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1317 
	#R_SPARC_GOTDATA_OP
 84

	)

1318 
	#R_SPARC_H34
 85

	)

1319 
	#R_SPARC_SIZE32
 86

	)

1320 
	#R_SPARC_SIZE64
 87

	)

1321 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1322 
	#R_SPARC_GNU_VTENTRY
 251

	)

1323 
	#R_SPARC_REV32
 252

	)

1325 
	#R_SPARC_NUM
 253

	)

1329 
	#DT_SPARC_REGISTER
 0x70000001

	)

1330 
	#DT_SPARC_NUM
 2

	)

1334 
	#HWCAP_SPARC_FLUSH
 1

	)

1335 
	#HWCAP_SPARC_STBAR
 2

	)

1336 
	#HWCAP_SPARC_SWAP
 4

	)

1337 
	#HWCAP_SPARC_MULDIV
 8

	)

1338 
	#HWCAP_SPARC_V9
 16

	)

1339 
	#HWCAP_SPARC_ULTRA3
 32

	)

1340 
	#HWCAP_SPARC_BLKINIT
 64

	)

1341 
	#HWCAP_SPARC_N2
 128

	)

1347 
	#EF_MIPS_NOREORDER
 1

	)

1348 
	#EF_MIPS_PIC
 2

	)

1349 
	#EF_MIPS_CPIC
 4

	)

1350 
	#EF_MIPS_XGOT
 8

	)

1351 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1352 
	#EF_MIPS_ABI2
 32

	)

1353 
	#EF_MIPS_ABI_ON32
 64

	)

1354 
	#EF_MIPS_ARCH
 0xf0000000

	)

1358 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1359 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1360 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1361 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1362 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1363 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1364 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1368 
	#E_MIPS_ARCH_1
 0x00000000

	)

1369 
	#E_MIPS_ARCH_2
 0x10000000

	)

1370 
	#E_MIPS_ARCH_3
 0x20000000

	)

1371 
	#E_MIPS_ARCH_4
 0x30000000

	)

1372 
	#E_MIPS_ARCH_5
 0x40000000

	)

1373 
	#E_MIPS_ARCH_32
 0x60000000

	)

1374 
	#E_MIPS_ARCH_64
 0x70000000

	)

1378 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1379 
	#SHN_MIPS_TEXT
 0xff01

	)

1380 
	#SHN_MIPS_DATA
 0xff02

	)

1381 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1382 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1386 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1387 
	#SHT_MIPS_MSYM
 0x70000001

	)

1388 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1389 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1390 
	#SHT_MIPS_UCODE
 0x70000004

	)

1391 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1392 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1393 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1394 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1395 
	#SHT_MIPS_RELD
 0x70000009

	)

1396 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1397 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1398 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1399 
	#SHT_MIPS_SHDR
 0x70000010

	)

1400 
	#SHT_MIPS_FDESC
 0x70000011

	)

1401 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1402 
	#SHT_MIPS_DENSE
 0x70000013

	)

1403 
	#SHT_MIPS_PDESC
 0x70000014

	)

1404 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1405 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1406 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1407 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1408 
	#SHT_MIPS_LINE
 0x70000019

	)

1409 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1410 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1411 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1412 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1413 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1414 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1415 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1416 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1417 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1418 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1419 
	#SHT_MIPS_XLATE
 0x70000024

	)

1420 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1421 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1422 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1423 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1424 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1428 
	#SHF_MIPS_GPREL
 0x10000000

	)

1429 
	#SHF_MIPS_MERGE
 0x20000000

	)

1430 
	#SHF_MIPS_ADDR
 0x40000000

	)

1431 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1432 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1433 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1434 
	#SHF_MIPS_NAMES
 0x02000000

	)

1435 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1441 
	#STO_MIPS_DEFAULT
 0x0

	)

1442 
	#STO_MIPS_INTERNAL
 0x1

	)

1443 
	#STO_MIPS_HIDDEN
 0x2

	)

1444 
	#STO_MIPS_PROTECTED
 0x3

	)

1445 
	#STO_MIPS_PLT
 0x8

	)

1446 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1449 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1457 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1458 
Elf32_W‹d
 
	mgt_unu£d
;

1459 } 
	mgt_hódî
;

1462 
Elf32_W‹d
 
	mgt_g_vÆue
;

1463 
Elf32_W‹d
 
	mgt_byãs
;

1464 } 
	mgt_íåy
;

1465 } 
	tElf32_g±ab
;

1471 
Elf32_W‹d
 
	mri_g¥mask
;

1472 
Elf32_W‹d
 
	mri_˝rmask
[4];

1473 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1474 } 
	tElf32_RegInfo
;

1480 
	mköd
;

1482 
	msize
;

1483 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1485 
Elf32_W‹d
 
	möfo
;

1486 } 
	tElf_O±i⁄s
;

1490 
	#ODK_NULL
 0

	)

1491 
	#ODK_REGINFO
 1

	)

1492 
	#ODK_EXCEPTIONS
 2

	)

1493 
	#ODK_PAD
 3

	)

1494 
	#ODK_HWPATCH
 4

	)

1495 
	#ODK_FILL
 5

	)

1496 
	#ODK_TAGS
 6

	)

1497 
	#ODK_HWAND
 7

	)

1498 
	#ODK_HWOR
 8

	)

1502 
	#OEX_FPU_MIN
 0x1‡

	)

1503 
	#OEX_FPU_MAX
 0x1f00

	)

1504 
	#OEX_PAGE0
 0x10000

	)

1505 
	#OEX_SMM
 0x20000

	)

1506 
	#OEX_FPDBUG
 0x40000

	)

1507 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1508 
	#OEX_DISMISS
 0x80000

	)

1510 
	#OEX_FPU_INVAL
 0x10

	)

1511 
	#OEX_FPU_DIV0
 0x08

	)

1512 
	#OEX_FPU_OFLO
 0x04

	)

1513 
	#OEX_FPU_UFLO
 0x02

	)

1514 
	#OEX_FPU_INEX
 0x01

	)

1518 
	#OHW_R4KEOP
 0x1

	)

1519 
	#OHW_R8KPFETCH
 0x2

	)

1520 
	#OHW_R5KEOP
 0x4

	)

1521 
	#OHW_R5KCVTL
 0x8

	)

1523 
	#OPAD_PREFIX
 0x1

	)

1524 
	#OPAD_POSTFIX
 0x2

	)

1525 
	#OPAD_SYMBOL
 0x4

	)

1531 
Elf32_W‹d
 
	mhwp_Êags1
;

1532 
Elf32_W‹d
 
	mhwp_Êags2
;

1533 } 
	tElf_O±i⁄s_Hw
;

1537 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1538 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1542 
	#R_MIPS_NONE
 0

	)

1543 
	#R_MIPS_16
 1

	)

1544 
	#R_MIPS_32
 2

	)

1545 
	#R_MIPS_REL32
 3

	)

1546 
	#R_MIPS_26
 4

	)

1547 
	#R_MIPS_HI16
 5

	)

1548 
	#R_MIPS_LO16
 6

	)

1549 
	#R_MIPS_GPREL16
 7

	)

1550 
	#R_MIPS_LITERAL
 8

	)

1551 
	#R_MIPS_GOT16
 9

	)

1552 
	#R_MIPS_PC16
 10

	)

1553 
	#R_MIPS_CALL16
 11

	)

1554 
	#R_MIPS_GPREL32
 12

	)

1556 
	#R_MIPS_SHIFT5
 16

	)

1557 
	#R_MIPS_SHIFT6
 17

	)

1558 
	#R_MIPS_64
 18

	)

1559 
	#R_MIPS_GOT_DISP
 19

	)

1560 
	#R_MIPS_GOT_PAGE
 20

	)

1561 
	#R_MIPS_GOT_OFST
 21

	)

1562 
	#R_MIPS_GOT_HI16
 22

	)

1563 
	#R_MIPS_GOT_LO16
 23

	)

1564 
	#R_MIPS_SUB
 24

	)

1565 
	#R_MIPS_INSERT_A
 25

	)

1566 
	#R_MIPS_INSERT_B
 26

	)

1567 
	#R_MIPS_DELETE
 27

	)

1568 
	#R_MIPS_HIGHER
 28

	)

1569 
	#R_MIPS_HIGHEST
 29

	)

1570 
	#R_MIPS_CALL_HI16
 30

	)

1571 
	#R_MIPS_CALL_LO16
 31

	)

1572 
	#R_MIPS_SCN_DISP
 32

	)

1573 
	#R_MIPS_REL16
 33

	)

1574 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1575 
	#R_MIPS_PJUMP
 35

	)

1576 
	#R_MIPS_RELGOT
 36

	)

1577 
	#R_MIPS_JALR
 37

	)

1578 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1579 
	#R_MIPS_TLS_DTPREL32
 39

	)

1580 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1581 
	#R_MIPS_TLS_DTPREL64
 41

	)

1582 
	#R_MIPS_TLS_GD
 42

	)

1583 
	#R_MIPS_TLS_LDM
 43

	)

1584 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1585 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1586 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1587 
	#R_MIPS_TLS_TPREL32
 47

	)

1588 
	#R_MIPS_TLS_TPREL64
 48

	)

1589 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1590 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1591 
	#R_MIPS_GLOB_DAT
 51

	)

1592 
	#R_MIPS_COPY
 126

	)

1593 
	#R_MIPS_JUMP_SLOT
 127

	)

1595 
	#R_MIPS_NUM
 128

	)

1599 
	#PT_MIPS_REGINFO
 0x70000000

	)

1600 
	#PT_MIPS_RTPROC
 0x70000001

	)

1601 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1605 
	#PF_MIPS_LOCAL
 0x10000000

	)

1609 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1610 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1611 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1612 
	#DT_MIPS_IVERSION
 0x70000004

	)

1613 
	#DT_MIPS_FLAGS
 0x70000005

	)

1614 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1615 
	#DT_MIPS_MSYM
 0x70000007

	)

1616 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1617 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1618 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1619 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1620 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1621 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1622 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1623 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1624 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1625 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1626 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1627 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1629 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1630 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1632 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1633 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1635 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1637 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1639 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1641 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1643 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1644 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1645 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1646 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1647 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1648 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1649 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1650 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1651 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1652 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1653 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1654 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1656 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1658 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1659 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1660 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1662 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1666 
	#DT_MIPS_RWPLT
 0x70000034

	)

1667 
	#DT_MIPS_NUM
 0x35

	)

1671 
	#RHF_NONE
 0

	)

1672 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1673 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1674 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1675 
	#RHF_NO_MOVE
 (1 << 3)

	)

1676 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1677 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1678 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1679 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1680 
	#RHF_PIXIE
 (1 << 8)

	)

1681 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1682 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1683 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1684 
	#RHF_CORD
 (1 << 12)

	)

1685 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1686 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1692 
Elf32_W‹d
 
	ml_«me
;

1693 
Elf32_W‹d
 
	ml_time_°amp
;

1694 
Elf32_W‹d
 
	ml_checksum
;

1695 
Elf32_W‹d
 
	ml_vîsi⁄
;

1696 
Elf32_W‹d
 
	ml_Êags
;

1697 } 
	tElf32_Lib
;

1701 
Elf64_W‹d
 
	ml_«me
;

1702 
Elf64_W‹d
 
	ml_time_°amp
;

1703 
Elf64_W‹d
 
	ml_checksum
;

1704 
Elf64_W‹d
 
	ml_vîsi⁄
;

1705 
Elf64_W‹d
 
	ml_Êags
;

1706 } 
	tElf64_Lib
;

1711 
	#LL_NONE
 0

	)

1712 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1713 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1714 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1715 
	#LL_EXPORTS
 (1 << 3)

	)

1716 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1717 
	#LL_DELTA
 (1 << 5)

	)

1721 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1728 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1729 
	#EF_PARISC_EXT
 0x00020000

	)

1730 
	#EF_PARISC_LSB
 0x00040000

	)

1731 
	#EF_PARISC_WIDE
 0x00080000

	)

1732 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1734 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1735 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1739 
	#EFA_PARISC_1_0
 0x020b

	)

1740 
	#EFA_PARISC_1_1
 0x0210

	)

1741 
	#EFA_PARISC_2_0
 0x0214

	)

1745 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1747 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1751 
	#SHT_PARISC_EXT
 0x70000000

	)

1752 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1753 
	#SHT_PARISC_DOC
 0x70000002

	)

1757 
	#SHF_PARISC_SHORT
 0x20000000

	)

1758 
	#SHF_PARISC_HUGE
 0x40000000

	)

1759 
	#SHF_PARISC_SBP
 0x80000000

	)

1763 
	#STT_PARISC_MILLICODE
 13

	)

1765 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1766 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1770 
	#R_PARISC_NONE
 0

	)

1771 
	#R_PARISC_DIR32
 1

	)

1772 
	#R_PARISC_DIR21L
 2

	)

1773 
	#R_PARISC_DIR17R
 3

	)

1774 
	#R_PARISC_DIR17F
 4

	)

1775 
	#R_PARISC_DIR14R
 6

	)

1776 
	#R_PARISC_PCREL32
 9

	)

1777 
	#R_PARISC_PCREL21L
 10

	)

1778 
	#R_PARISC_PCREL17R
 11

	)

1779 
	#R_PARISC_PCREL17F
 12

	)

1780 
	#R_PARISC_PCREL14R
 14

	)

1781 
	#R_PARISC_DPREL21L
 18

	)

1782 
	#R_PARISC_DPREL14R
 22

	)

1783 
	#R_PARISC_GPREL21L
 26

	)

1784 
	#R_PARISC_GPREL14R
 30

	)

1785 
	#R_PARISC_LTOFF21L
 34

	)

1786 
	#R_PARISC_LTOFF14R
 38

	)

1787 
	#R_PARISC_SECREL32
 41

	)

1788 
	#R_PARISC_SEGBASE
 48

	)

1789 
	#R_PARISC_SEGREL32
 49

	)

1790 
	#R_PARISC_PLTOFF21L
 50

	)

1791 
	#R_PARISC_PLTOFF14R
 54

	)

1792 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1793 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1794 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1795 
	#R_PARISC_FPTR64
 64

	)

1796 
	#R_PARISC_PLABEL32
 65

	)

1797 
	#R_PARISC_PLABEL21L
 66

	)

1798 
	#R_PARISC_PLABEL14R
 70

	)

1799 
	#R_PARISC_PCREL64
 72

	)

1800 
	#R_PARISC_PCREL22F
 74

	)

1801 
	#R_PARISC_PCREL14WR
 75

	)

1802 
	#R_PARISC_PCREL14DR
 76

	)

1803 
	#R_PARISC_PCREL16F
 77

	)

1804 
	#R_PARISC_PCREL16WF
 78

	)

1805 
	#R_PARISC_PCREL16DF
 79

	)

1806 
	#R_PARISC_DIR64
 80

	)

1807 
	#R_PARISC_DIR14WR
 83

	)

1808 
	#R_PARISC_DIR14DR
 84

	)

1809 
	#R_PARISC_DIR16F
 85

	)

1810 
	#R_PARISC_DIR16WF
 86

	)

1811 
	#R_PARISC_DIR16DF
 87

	)

1812 
	#R_PARISC_GPREL64
 88

	)

1813 
	#R_PARISC_GPREL14WR
 91

	)

1814 
	#R_PARISC_GPREL14DR
 92

	)

1815 
	#R_PARISC_GPREL16F
 93

	)

1816 
	#R_PARISC_GPREL16WF
 94

	)

1817 
	#R_PARISC_GPREL16DF
 95

	)

1818 
	#R_PARISC_LTOFF64
 96

	)

1819 
	#R_PARISC_LTOFF14WR
 99

	)

1820 
	#R_PARISC_LTOFF14DR
 100

	)

1821 
	#R_PARISC_LTOFF16F
 101

	)

1822 
	#R_PARISC_LTOFF16WF
 102

	)

1823 
	#R_PARISC_LTOFF16DF
 103

	)

1824 
	#R_PARISC_SECREL64
 104

	)

1825 
	#R_PARISC_SEGREL64
 112

	)

1826 
	#R_PARISC_PLTOFF14WR
 115

	)

1827 
	#R_PARISC_PLTOFF14DR
 116

	)

1828 
	#R_PARISC_PLTOFF16F
 117

	)

1829 
	#R_PARISC_PLTOFF16WF
 118

	)

1830 
	#R_PARISC_PLTOFF16DF
 119

	)

1831 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1832 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1833 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1834 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1835 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1836 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1837 
	#R_PARISC_LORESERVE
 128

	)

1838 
	#R_PARISC_COPY
 128

	)

1839 
	#R_PARISC_IPLT
 129

	)

1840 
	#R_PARISC_EPLT
 130

	)

1841 
	#R_PARISC_TPREL32
 153

	)

1842 
	#R_PARISC_TPREL21L
 154

	)

1843 
	#R_PARISC_TPREL14R
 158

	)

1844 
	#R_PARISC_LTOFF_TP21L
 162

	)

1845 
	#R_PARISC_LTOFF_TP14R
 166

	)

1846 
	#R_PARISC_LTOFF_TP14F
 167

	)

1847 
	#R_PARISC_TPREL64
 216

	)

1848 
	#R_PARISC_TPREL14WR
 219

	)

1849 
	#R_PARISC_TPREL14DR
 220

	)

1850 
	#R_PARISC_TPREL16F
 221

	)

1851 
	#R_PARISC_TPREL16WF
 222

	)

1852 
	#R_PARISC_TPREL16DF
 223

	)

1853 
	#R_PARISC_LTOFF_TP64
 224

	)

1854 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1855 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1856 
	#R_PARISC_LTOFF_TP16F
 229

	)

1857 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1858 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1859 
	#R_PARISC_GNU_VTENTRY
 232

	)

1860 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1861 
	#R_PARISC_TLS_GD21L
 234

	)

1862 
	#R_PARISC_TLS_GD14R
 235

	)

1863 
	#R_PARISC_TLS_GDCALL
 236

	)

1864 
	#R_PARISC_TLS_LDM21L
 237

	)

1865 
	#R_PARISC_TLS_LDM14R
 238

	)

1866 
	#R_PARISC_TLS_LDMCALL
 239

	)

1867 
	#R_PARISC_TLS_LDO21L
 240

	)

1868 
	#R_PARISC_TLS_LDO14R
 241

	)

1869 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1870 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1871 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1872 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1873 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1874 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1875 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1876 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1877 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1878 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1879 
	#R_PARISC_HIRESERVE
 255

	)

1883 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1884 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1885 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1886 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1887 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1888 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1889 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1890 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1891 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1892 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1893 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1894 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1895 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1896 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1897 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1899 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1900 
	#PT_PARISC_UNWIND
 0x70000001

	)

1904 
	#PF_PARISC_SBP
 0x08000000

	)

1906 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1907 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1908 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1909 
	#PF_HP_CODE
 0x01000000

	)

1910 
	#PF_HP_MODIFY
 0x02000000

	)

1911 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1912 
	#PF_HP_SBP
 0x08000000

	)

1919 
	#EF_ALPHA_32BIT
 1

	)

1920 
	#EF_ALPHA_CANRELAX
 2

	)

1925 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1926 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1930 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1933 
	#STO_ALPHA_NOPV
 0x80

	)

1934 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1938 
	#R_ALPHA_NONE
 0

	)

1939 
	#R_ALPHA_REFLONG
 1

	)

1940 
	#R_ALPHA_REFQUAD
 2

	)

1941 
	#R_ALPHA_GPREL32
 3

	)

1942 
	#R_ALPHA_LITERAL
 4

	)

1943 
	#R_ALPHA_LITUSE
 5

	)

1944 
	#R_ALPHA_GPDISP
 6

	)

1945 
	#R_ALPHA_BRADDR
 7

	)

1946 
	#R_ALPHA_HINT
 8

	)

1947 
	#R_ALPHA_SREL16
 9

	)

1948 
	#R_ALPHA_SREL32
 10

	)

1949 
	#R_ALPHA_SREL64
 11

	)

1950 
	#R_ALPHA_GPRELHIGH
 17

	)

1951 
	#R_ALPHA_GPRELLOW
 18

	)

1952 
	#R_ALPHA_GPREL16
 19

	)

1953 
	#R_ALPHA_COPY
 24

	)

1954 
	#R_ALPHA_GLOB_DAT
 25

	)

1955 
	#R_ALPHA_JMP_SLOT
 26

	)

1956 
	#R_ALPHA_RELATIVE
 27

	)

1957 
	#R_ALPHA_TLS_GD_HI
 28

	)

1958 
	#R_ALPHA_TLSGD
 29

	)

1959 
	#R_ALPHA_TLS_LDM
 30

	)

1960 
	#R_ALPHA_DTPMOD64
 31

	)

1961 
	#R_ALPHA_GOTDTPREL
 32

	)

1962 
	#R_ALPHA_DTPREL64
 33

	)

1963 
	#R_ALPHA_DTPRELHI
 34

	)

1964 
	#R_ALPHA_DTPRELLO
 35

	)

1965 
	#R_ALPHA_DTPREL16
 36

	)

1966 
	#R_ALPHA_GOTTPREL
 37

	)

1967 
	#R_ALPHA_TPREL64
 38

	)

1968 
	#R_ALPHA_TPRELHI
 39

	)

1969 
	#R_ALPHA_TPRELLO
 40

	)

1970 
	#R_ALPHA_TPREL16
 41

	)

1972 
	#R_ALPHA_NUM
 46

	)

1975 
	#LITUSE_ALPHA_ADDR
 0

	)

1976 
	#LITUSE_ALPHA_BASE
 1

	)

1977 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1978 
	#LITUSE_ALPHA_JSR
 3

	)

1979 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1980 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1983 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

1984 
	#DT_ALPHA_NUM
 1

	)

1989 
	#EF_PPC_EMB
 0x80000000

	)

1992 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1993 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

1997 
	#R_PPC_NONE
 0

	)

1998 
	#R_PPC_ADDR32
 1

	)

1999 
	#R_PPC_ADDR24
 2

	)

2000 
	#R_PPC_ADDR16
 3

	)

2001 
	#R_PPC_ADDR16_LO
 4

	)

2002 
	#R_PPC_ADDR16_HI
 5

	)

2003 
	#R_PPC_ADDR16_HA
 6

	)

2004 
	#R_PPC_ADDR14
 7

	)

2005 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2006 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2007 
	#R_PPC_REL24
 10

	)

2008 
	#R_PPC_REL14
 11

	)

2009 
	#R_PPC_REL14_BRTAKEN
 12

	)

2010 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2011 
	#R_PPC_GOT16
 14

	)

2012 
	#R_PPC_GOT16_LO
 15

	)

2013 
	#R_PPC_GOT16_HI
 16

	)

2014 
	#R_PPC_GOT16_HA
 17

	)

2015 
	#R_PPC_PLTREL24
 18

	)

2016 
	#R_PPC_COPY
 19

	)

2017 
	#R_PPC_GLOB_DAT
 20

	)

2018 
	#R_PPC_JMP_SLOT
 21

	)

2019 
	#R_PPC_RELATIVE
 22

	)

2020 
	#R_PPC_LOCAL24PC
 23

	)

2021 
	#R_PPC_UADDR32
 24

	)

2022 
	#R_PPC_UADDR16
 25

	)

2023 
	#R_PPC_REL32
 26

	)

2024 
	#R_PPC_PLT32
 27

	)

2025 
	#R_PPC_PLTREL32
 28

	)

2026 
	#R_PPC_PLT16_LO
 29

	)

2027 
	#R_PPC_PLT16_HI
 30

	)

2028 
	#R_PPC_PLT16_HA
 31

	)

2029 
	#R_PPC_SDAREL16
 32

	)

2030 
	#R_PPC_SECTOFF
 33

	)

2031 
	#R_PPC_SECTOFF_LO
 34

	)

2032 
	#R_PPC_SECTOFF_HI
 35

	)

2033 
	#R_PPC_SECTOFF_HA
 36

	)

2036 
	#R_PPC_TLS
 67

	)

2037 
	#R_PPC_DTPMOD32
 68

	)

2038 
	#R_PPC_TPREL16
 69

	)

2039 
	#R_PPC_TPREL16_LO
 70

	)

2040 
	#R_PPC_TPREL16_HI
 71

	)

2041 
	#R_PPC_TPREL16_HA
 72

	)

2042 
	#R_PPC_TPREL32
 73

	)

2043 
	#R_PPC_DTPREL16
 74

	)

2044 
	#R_PPC_DTPREL16_LO
 75

	)

2045 
	#R_PPC_DTPREL16_HI
 76

	)

2046 
	#R_PPC_DTPREL16_HA
 77

	)

2047 
	#R_PPC_DTPREL32
 78

	)

2048 
	#R_PPC_GOT_TLSGD16
 79

	)

2049 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2050 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2051 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2052 
	#R_PPC_GOT_TLSLD16
 83

	)

2053 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2054 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2055 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2056 
	#R_PPC_GOT_TPREL16
 87

	)

2057 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2058 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2059 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2060 
	#R_PPC_GOT_DTPREL16
 91

	)

2061 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2062 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2063 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2067 
	#R_PPC_EMB_NADDR32
 101

	)

2068 
	#R_PPC_EMB_NADDR16
 102

	)

2069 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2070 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2071 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2072 
	#R_PPC_EMB_SDAI16
 106

	)

2073 
	#R_PPC_EMB_SDA2I16
 107

	)

2074 
	#R_PPC_EMB_SDA2REL
 108

	)

2075 
	#R_PPC_EMB_SDA21
 109

	)

2076 
	#R_PPC_EMB_MRKREF
 110

	)

2077 
	#R_PPC_EMB_RELSEC16
 111

	)

2078 
	#R_PPC_EMB_RELST_LO
 112

	)

2079 
	#R_PPC_EMB_RELST_HI
 113

	)

2080 
	#R_PPC_EMB_RELST_HA
 114

	)

2081 
	#R_PPC_EMB_BIT_FLD
 115

	)

2082 
	#R_PPC_EMB_RELSDA
 116

	)

2085 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2086 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2087 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2088 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2089 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2090 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2093 
	#R_PPC_IRELATIVE
 248

	)

2096 
	#R_PPC_REL16
 249

	)

2097 
	#R_PPC_REL16_LO
 250

	)

2098 
	#R_PPC_REL16_HI
 251

	)

2099 
	#R_PPC_REL16_HA
 252

	)

2103 
	#R_PPC_TOC16
 255

	)

2106 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2107 
	#DT_PPC_NUM
 1

	)

2110 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2111 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2112 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2113 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2114 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2115 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2116 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2117 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2118 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2119 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2120 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2121 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2122 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2123 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2124 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2125 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2126 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2127 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2129 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2130 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2131 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2132 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2134 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2135 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2136 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2137 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2138 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2139 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2140 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2141 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2143 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2144 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2145 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2146 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2147 
	#R_PPC64_ADDR30
 37

	)

2148 
	#R_PPC64_ADDR64
 38

	)

2149 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2150 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2151 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2152 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2153 
	#R_PPC64_UADDR64
 43

	)

2154 
	#R_PPC64_REL64
 44

	)

2155 
	#R_PPC64_PLT64
 45

	)

2156 
	#R_PPC64_PLTREL64
 46

	)

2157 
	#R_PPC64_TOC16
 47

	)

2158 
	#R_PPC64_TOC16_LO
 48

	)

2159 
	#R_PPC64_TOC16_HI
 49

	)

2160 
	#R_PPC64_TOC16_HA
 50

	)

2161 
	#R_PPC64_TOC
 51

	)

2162 
	#R_PPC64_PLTGOT16
 52

	)

2163 
	#R_PPC64_PLTGOT16_LO
 53

	)

2164 
	#R_PPC64_PLTGOT16_HI
 54

	)

2165 
	#R_PPC64_PLTGOT16_HA
 55

	)

2167 
	#R_PPC64_ADDR16_DS
 56

	)

2168 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2169 
	#R_PPC64_GOT16_DS
 58

	)

2170 
	#R_PPC64_GOT16_LO_DS
 59

	)

2171 
	#R_PPC64_PLT16_LO_DS
 60

	)

2172 
	#R_PPC64_SECTOFF_DS
 61

	)

2173 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2174 
	#R_PPC64_TOC16_DS
 63

	)

2175 
	#R_PPC64_TOC16_LO_DS
 64

	)

2176 
	#R_PPC64_PLTGOT16_DS
 65

	)

2177 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2180 
	#R_PPC64_TLS
 67

	)

2181 
	#R_PPC64_DTPMOD64
 68

	)

2182 
	#R_PPC64_TPREL16
 69

	)

2183 
	#R_PPC64_TPREL16_LO
 70

	)

2184 
	#R_PPC64_TPREL16_HI
 71

	)

2185 
	#R_PPC64_TPREL16_HA
 72

	)

2186 
	#R_PPC64_TPREL64
 73

	)

2187 
	#R_PPC64_DTPREL16
 74

	)

2188 
	#R_PPC64_DTPREL16_LO
 75

	)

2189 
	#R_PPC64_DTPREL16_HI
 76

	)

2190 
	#R_PPC64_DTPREL16_HA
 77

	)

2191 
	#R_PPC64_DTPREL64
 78

	)

2192 
	#R_PPC64_GOT_TLSGD16
 79

	)

2193 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2194 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2195 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2196 
	#R_PPC64_GOT_TLSLD16
 83

	)

2197 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2198 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2199 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2200 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2201 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2202 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2203 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2204 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2205 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2206 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2207 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2208 
	#R_PPC64_TPREL16_DS
 95

	)

2209 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2210 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2211 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2212 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2213 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2214 
	#R_PPC64_DTPREL16_DS
 101

	)

2215 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2216 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2217 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2218 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2219 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2222 
	#R_PPC64_JMP_IREL
 247

	)

2223 
	#R_PPC64_IRELATIVE
 248

	)

2224 
	#R_PPC64_REL16
 249

	)

2225 
	#R_PPC64_REL16_LO
 250

	)

2226 
	#R_PPC64_REL16_HI
 251

	)

2227 
	#R_PPC64_REL16_HA
 252

	)

2230 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2231 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2232 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2233 
	#DT_PPC64_NUM
 3

	)

2239 
	#EF_ARM_RELEXEC
 0x01

	)

2240 
	#EF_ARM_HASENTRY
 0x02

	)

2241 
	#EF_ARM_INTERWORK
 0x04

	)

2242 
	#EF_ARM_APCS_26
 0x08

	)

2243 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2244 
	#EF_ARM_PIC
 0x20

	)

2245 
	#EF_ARM_ALIGN8
 0x40

	)

2246 
	#EF_ARM_NEW_ABI
 0x80

	)

2247 
	#EF_ARM_OLD_ABI
 0x100

	)

2248 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2249 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2250 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2255 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2256 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2257 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2258 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2261 
	#EF_ARM_BE8
 0x00800000

	)

2262 
	#EF_ARM_LE8
 0x00400000

	)

2264 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2265 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2266 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2267 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2268 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2269 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2270 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2273 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2274 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2277 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2278 
	#SHF_ARM_COMDEF
 0x80000000

	)

2282 
	#PF_ARM_SB
 0x10000000

	)

2284 
	#PF_ARM_PI
 0x20000000

	)

2285 
	#PF_ARM_ABS
 0x40000000

	)

2288 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2291 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2292 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2293 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2298 
	#R_ARM_NONE
 0

	)

2299 
	#R_ARM_PC24
 1

	)

2300 
	#R_ARM_ABS32
 2

	)

2301 
	#R_ARM_REL32
 3

	)

2302 
	#R_ARM_PC13
 4

	)

2303 
	#R_ARM_ABS16
 5

	)

2304 
	#R_ARM_ABS12
 6

	)

2305 
	#R_ARM_THM_ABS5
 7

	)

2306 
	#R_ARM_ABS8
 8

	)

2307 
	#R_ARM_SBREL32
 9

	)

2308 
	#R_ARM_THM_PC22
 10

	)

2309 
	#R_ARM_THM_PC8
 11

	)

2310 
	#R_ARM_AMP_VCALL9
 12

	)

2311 
	#R_ARM_SWI24
 13

	)

2312 
	#R_ARM_THM_SWI8
 14

	)

2313 
	#R_ARM_XPC25
 15

	)

2314 
	#R_ARM_THM_XPC22
 16

	)

2315 
	#R_ARM_TLS_DTPMOD32
 17

	)

2316 
	#R_ARM_TLS_DTPOFF32
 18

	)

2317 
	#R_ARM_TLS_TPOFF32
 19

	)

2318 
	#R_ARM_COPY
 20

	)

2319 
	#R_ARM_GLOB_DAT
 21

	)

2320 
	#R_ARM_JUMP_SLOT
 22

	)

2321 
	#R_ARM_RELATIVE
 23

	)

2322 
	#R_ARM_GOTOFF
 24

	)

2323 
	#R_ARM_GOTPC
 25

	)

2324 
	#R_ARM_GOT32
 26

	)

2325 
	#R_ARM_PLT32
 27

	)

2326 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2327 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2328 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2329 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2330 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2331 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2332 
	#R_ARM_GNU_VTENTRY
 100

	)

2333 
	#R_ARM_GNU_VTINHERIT
 101

	)

2334 
	#R_ARM_THM_PC11
 102

	)

2335 
	#R_ARM_THM_PC9
 103

	)

2336 
	#R_ARM_TLS_GD32
 104

	)

2338 
	#R_ARM_TLS_LDM32
 105

	)

2340 
	#R_ARM_TLS_LDO32
 106

	)

2342 
	#R_ARM_TLS_IE32
 107

	)

2344 
	#R_ARM_TLS_LE32
 108

	)

2346 
	#R_ARM_RXPC25
 249

	)

2347 
	#R_ARM_RSBREL32
 250

	)

2348 
	#R_ARM_THM_RPC22
 251

	)

2349 
	#R_ARM_RREL32
 252

	)

2350 
	#R_ARM_RABS22
 253

	)

2351 
	#R_ARM_RPC24
 254

	)

2352 
	#R_ARM_RBASE
 255

	)

2354 
	#R_ARM_NUM
 256

	)

2359 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2360 
	#EF_IA_64_ABI64
 0x00000010

	)

2361 
	#EF_IA_64_ARCH
 0xff000000

	)

2364 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2365 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2366 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2367 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2368 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2371 
	#PF_IA_64_NORECOV
 0x80000000

	)

2374 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2375 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2378 
	#SHF_IA_64_SHORT
 0x10000000

	)

2379 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2382 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2383 
	#DT_IA_64_NUM
 1

	)

2386 
	#R_IA64_NONE
 0x00

	)

2387 
	#R_IA64_IMM14
 0x21

	)

2388 
	#R_IA64_IMM22
 0x22

	)

2389 
	#R_IA64_IMM64
 0x23

	)

2390 
	#R_IA64_DIR32MSB
 0x24

	)

2391 
	#R_IA64_DIR32LSB
 0x25

	)

2392 
	#R_IA64_DIR64MSB
 0x26

	)

2393 
	#R_IA64_DIR64LSB
 0x27

	)

2394 
	#R_IA64_GPREL22
 0x2®

	)

2395 
	#R_IA64_GPREL64I
 0x2b

	)

2396 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2397 
	#R_IA64_GPREL32LSB
 0x2d

	)

2398 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2399 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2400 
	#R_IA64_LTOFF22
 0x32

	)

2401 
	#R_IA64_LTOFF64I
 0x33

	)

2402 
	#R_IA64_PLTOFF22
 0x3®

	)

2403 
	#R_IA64_PLTOFF64I
 0x3b

	)

2404 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2405 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2406 
	#R_IA64_FPTR64I
 0x43

	)

2407 
	#R_IA64_FPTR32MSB
 0x44

	)

2408 
	#R_IA64_FPTR32LSB
 0x45

	)

2409 
	#R_IA64_FPTR64MSB
 0x46

	)

2410 
	#R_IA64_FPTR64LSB
 0x47

	)

2411 
	#R_IA64_PCREL60B
 0x48

	)

2412 
	#R_IA64_PCREL21B
 0x49

	)

2413 
	#R_IA64_PCREL21M
 0x4®

	)

2414 
	#R_IA64_PCREL21F
 0x4b

	)

2415 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2416 
	#R_IA64_PCREL32LSB
 0x4d

	)

2417 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2418 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2419 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2420 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2421 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2422 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2423 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2424 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2425 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2426 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2427 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2428 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2429 
	#R_IA64_SECREL32MSB
 0x64

	)

2430 
	#R_IA64_SECREL32LSB
 0x65

	)

2431 
	#R_IA64_SECREL64MSB
 0x66

	)

2432 
	#R_IA64_SECREL64LSB
 0x67

	)

2433 
	#R_IA64_REL32MSB
 0x6¯

	)

2434 
	#R_IA64_REL32LSB
 0x6d

	)

2435 
	#R_IA64_REL64MSB
 0x6ê

	)

2436 
	#R_IA64_REL64LSB
 0x6‡

	)

2437 
	#R_IA64_LTV32MSB
 0x74

	)

2438 
	#R_IA64_LTV32LSB
 0x75

	)

2439 
	#R_IA64_LTV64MSB
 0x76

	)

2440 
	#R_IA64_LTV64LSB
 0x77

	)

2441 
	#R_IA64_PCREL21BI
 0x79

	)

2442 
	#R_IA64_PCREL22
 0x7®

	)

2443 
	#R_IA64_PCREL64I
 0x7b

	)

2444 
	#R_IA64_IPLTMSB
 0x80

	)

2445 
	#R_IA64_IPLTLSB
 0x81

	)

2446 
	#R_IA64_COPY
 0x84

	)

2447 
	#R_IA64_SUB
 0x85

	)

2448 
	#R_IA64_LTOFF22X
 0x86

	)

2449 
	#R_IA64_LDXMOV
 0x87

	)

2450 
	#R_IA64_TPREL14
 0x91

	)

2451 
	#R_IA64_TPREL22
 0x92

	)

2452 
	#R_IA64_TPREL64I
 0x93

	)

2453 
	#R_IA64_TPREL64MSB
 0x96

	)

2454 
	#R_IA64_TPREL64LSB
 0x97

	)

2455 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2456 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2457 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2458 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2459 
	#R_IA64_DTPREL14
 0xb1

	)

2460 
	#R_IA64_DTPREL22
 0xb2

	)

2461 
	#R_IA64_DTPREL64I
 0xb3

	)

2462 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2463 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2464 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2465 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2466 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2471 
	#R_SH_NONE
 0

	)

2472 
	#R_SH_DIR32
 1

	)

2473 
	#R_SH_REL32
 2

	)

2474 
	#R_SH_DIR8WPN
 3

	)

2475 
	#R_SH_IND12W
 4

	)

2476 
	#R_SH_DIR8WPL
 5

	)

2477 
	#R_SH_DIR8WPZ
 6

	)

2478 
	#R_SH_DIR8BP
 7

	)

2479 
	#R_SH_DIR8W
 8

	)

2480 
	#R_SH_DIR8L
 9

	)

2481 
	#R_SH_SWITCH16
 25

	)

2482 
	#R_SH_SWITCH32
 26

	)

2483 
	#R_SH_USES
 27

	)

2484 
	#R_SH_COUNT
 28

	)

2485 
	#R_SH_ALIGN
 29

	)

2486 
	#R_SH_CODE
 30

	)

2487 
	#R_SH_DATA
 31

	)

2488 
	#R_SH_LABEL
 32

	)

2489 
	#R_SH_SWITCH8
 33

	)

2490 
	#R_SH_GNU_VTINHERIT
 34

	)

2491 
	#R_SH_GNU_VTENTRY
 35

	)

2492 
	#R_SH_TLS_GD_32
 144

	)

2493 
	#R_SH_TLS_LD_32
 145

	)

2494 
	#R_SH_TLS_LDO_32
 146

	)

2495 
	#R_SH_TLS_IE_32
 147

	)

2496 
	#R_SH_TLS_LE_32
 148

	)

2497 
	#R_SH_TLS_DTPMOD32
 149

	)

2498 
	#R_SH_TLS_DTPOFF32
 150

	)

2499 
	#R_SH_TLS_TPOFF32
 151

	)

2500 
	#R_SH_GOT32
 160

	)

2501 
	#R_SH_PLT32
 161

	)

2502 
	#R_SH_COPY
 162

	)

2503 
	#R_SH_GLOB_DAT
 163

	)

2504 
	#R_SH_JMP_SLOT
 164

	)

2505 
	#R_SH_RELATIVE
 165

	)

2506 
	#R_SH_GOTOFF
 166

	)

2507 
	#R_SH_GOTPC
 167

	)

2509 
	#R_SH_NUM
 256

	)

2513 
	#R_390_NONE
 0

	)

2514 
	#R_390_8
 1

	)

2515 
	#R_390_12
 2

	)

2516 
	#R_390_16
 3

	)

2517 
	#R_390_32
 4

	)

2518 
	#R_390_PC32
 5

	)

2519 
	#R_390_GOT12
 6

	)

2520 
	#R_390_GOT32
 7

	)

2521 
	#R_390_PLT32
 8

	)

2522 
	#R_390_COPY
 9

	)

2523 
	#R_390_GLOB_DAT
 10

	)

2524 
	#R_390_JMP_SLOT
 11

	)

2525 
	#R_390_RELATIVE
 12

	)

2526 
	#R_390_GOTOFF32
 13

	)

2527 
	#R_390_GOTPC
 14

	)

2528 
	#R_390_GOT16
 15

	)

2529 
	#R_390_PC16
 16

	)

2530 
	#R_390_PC16DBL
 17

	)

2531 
	#R_390_PLT16DBL
 18

	)

2532 
	#R_390_PC32DBL
 19

	)

2533 
	#R_390_PLT32DBL
 20

	)

2534 
	#R_390_GOTPCDBL
 21

	)

2535 
	#R_390_64
 22

	)

2536 
	#R_390_PC64
 23

	)

2537 
	#R_390_GOT64
 24

	)

2538 
	#R_390_PLT64
 25

	)

2539 
	#R_390_GOTENT
 26

	)

2540 
	#R_390_GOTOFF16
 27

	)

2541 
	#R_390_GOTOFF64
 28

	)

2542 
	#R_390_GOTPLT12
 29

	)

2543 
	#R_390_GOTPLT16
 30

	)

2544 
	#R_390_GOTPLT32
 31

	)

2545 
	#R_390_GOTPLT64
 32

	)

2546 
	#R_390_GOTPLTENT
 33

	)

2547 
	#R_390_PLTOFF16
 34

	)

2548 
	#R_390_PLTOFF32
 35

	)

2549 
	#R_390_PLTOFF64
 36

	)

2550 
	#R_390_TLS_LOAD
 37

	)

2551 
	#R_390_TLS_GDCALL
 38

	)

2553 
	#R_390_TLS_LDCALL
 39

	)

2555 
	#R_390_TLS_GD32
 40

	)

2557 
	#R_390_TLS_GD64
 41

	)

2559 
	#R_390_TLS_GOTIE12
 42

	)

2561 
	#R_390_TLS_GOTIE32
 43

	)

2563 
	#R_390_TLS_GOTIE64
 44

	)

2565 
	#R_390_TLS_LDM32
 45

	)

2567 
	#R_390_TLS_LDM64
 46

	)

2569 
	#R_390_TLS_IE32
 47

	)

2571 
	#R_390_TLS_IE64
 48

	)

2573 
	#R_390_TLS_IEENT
 49

	)

2575 
	#R_390_TLS_LE32
 50

	)

2577 
	#R_390_TLS_LE64
 51

	)

2579 
	#R_390_TLS_LDO32
 52

	)

2581 
	#R_390_TLS_LDO64
 53

	)

2583 
	#R_390_TLS_DTPMOD
 54

	)

2584 
	#R_390_TLS_DTPOFF
 55

	)

2585 
	#R_390_TLS_TPOFF
 56

	)

2587 
	#R_390_20
 57

	)

2588 
	#R_390_GOT20
 58

	)

2589 
	#R_390_GOTPLT20
 59

	)

2590 
	#R_390_TLS_GOTIE20
 60

	)

2593 
	#R_390_NUM
 61

	)

2597 
	#R_CRIS_NONE
 0

	)

2598 
	#R_CRIS_8
 1

	)

2599 
	#R_CRIS_16
 2

	)

2600 
	#R_CRIS_32
 3

	)

2601 
	#R_CRIS_8_PCREL
 4

	)

2602 
	#R_CRIS_16_PCREL
 5

	)

2603 
	#R_CRIS_32_PCREL
 6

	)

2604 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2605 
	#R_CRIS_GNU_VTENTRY
 8

	)

2606 
	#R_CRIS_COPY
 9

	)

2607 
	#R_CRIS_GLOB_DAT
 10

	)

2608 
	#R_CRIS_JUMP_SLOT
 11

	)

2609 
	#R_CRIS_RELATIVE
 12

	)

2610 
	#R_CRIS_16_GOT
 13

	)

2611 
	#R_CRIS_32_GOT
 14

	)

2612 
	#R_CRIS_16_GOTPLT
 15

	)

2613 
	#R_CRIS_32_GOTPLT
 16

	)

2614 
	#R_CRIS_32_GOTREL
 17

	)

2615 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2616 
	#R_CRIS_32_PLT_PCREL
 19

	)

2618 
	#R_CRIS_NUM
 20

	)

2622 
	#R_X86_64_NONE
 0

	)

2623 
	#R_X86_64_64
 1

	)

2624 
	#R_X86_64_PC32
 2

	)

2625 
	#R_X86_64_GOT32
 3

	)

2626 
	#R_X86_64_PLT32
 4

	)

2627 
	#R_X86_64_COPY
 5

	)

2628 
	#R_X86_64_GLOB_DAT
 6

	)

2629 
	#R_X86_64_JUMP_SLOT
 7

	)

2630 
	#R_X86_64_RELATIVE
 8

	)

2631 
	#R_X86_64_GOTPCREL
 9

	)

2633 
	#R_X86_64_32
 10

	)

2634 
	#R_X86_64_32S
 11

	)

2635 
	#R_X86_64_16
 12

	)

2636 
	#R_X86_64_PC16
 13

	)

2637 
	#R_X86_64_8
 14

	)

2638 
	#R_X86_64_PC8
 15

	)

2639 
	#R_X86_64_DTPMOD64
 16

	)

2640 
	#R_X86_64_DTPOFF64
 17

	)

2641 
	#R_X86_64_TPOFF64
 18

	)

2642 
	#R_X86_64_TLSGD
 19

	)

2644 
	#R_X86_64_TLSLD
 20

	)

2646 
	#R_X86_64_DTPOFF32
 21

	)

2647 
	#R_X86_64_GOTTPOFF
 22

	)

2649 
	#R_X86_64_TPOFF32
 23

	)

2650 
	#R_X86_64_PC64
 24

	)

2651 
	#R_X86_64_GOTOFF64
 25

	)

2652 
	#R_X86_64_GOTPC32
 26

	)

2655 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

2656 
	#R_X86_64_TLSDESC_CALL
 35

	)

2658 
	#R_X86_64_TLSDESC
 36

	)

2659 
	#R_X86_64_IRELATIVE
 37

	)

2661 
	#R_X86_64_NUM
 38

	)

2665 
	#R_MN10300_NONE
 0

	)

2666 
	#R_MN10300_32
 1

	)

2667 
	#R_MN10300_16
 2

	)

2668 
	#R_MN10300_8
 3

	)

2669 
	#R_MN10300_PCREL32
 4

	)

2670 
	#R_MN10300_PCREL16
 5

	)

2671 
	#R_MN10300_PCREL8
 6

	)

2672 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2673 
	#R_MN10300_GNU_VTENTRY
 8

	)

2674 
	#R_MN10300_24
 9

	)

2675 
	#R_MN10300_GOTPC32
 10

	)

2676 
	#R_MN10300_GOTPC16
 11

	)

2677 
	#R_MN10300_GOTOFF32
 12

	)

2678 
	#R_MN10300_GOTOFF24
 13

	)

2679 
	#R_MN10300_GOTOFF16
 14

	)

2680 
	#R_MN10300_PLT32
 15

	)

2681 
	#R_MN10300_PLT16
 16

	)

2682 
	#R_MN10300_GOT32
 17

	)

2683 
	#R_MN10300_GOT24
 18

	)

2684 
	#R_MN10300_GOT16
 19

	)

2685 
	#R_MN10300_COPY
 20

	)

2686 
	#R_MN10300_GLOB_DAT
 21

	)

2687 
	#R_MN10300_JMP_SLOT
 22

	)

2688 
	#R_MN10300_RELATIVE
 23

	)

2690 
	#R_MN10300_NUM
 24

	)

2694 
	#R_M32R_NONE
 0

	)

2695 
	#R_M32R_16
 1

	)

2696 
	#R_M32R_32
 2

	)

2697 
	#R_M32R_24
 3

	)

2698 
	#R_M32R_10_PCREL
 4

	)

2699 
	#R_M32R_18_PCREL
 5

	)

2700 
	#R_M32R_26_PCREL
 6

	)

2701 
	#R_M32R_HI16_ULO
 7

	)

2702 
	#R_M32R_HI16_SLO
 8

	)

2703 
	#R_M32R_LO16
 9

	)

2704 
	#R_M32R_SDA16
 10

	)

2705 
	#R_M32R_GNU_VTINHERIT
 11

	)

2706 
	#R_M32R_GNU_VTENTRY
 12

	)

2708 
	#R_M32R_16_RELA
 33

	)

2709 
	#R_M32R_32_RELA
 34

	)

2710 
	#R_M32R_24_RELA
 35

	)

2711 
	#R_M32R_10_PCREL_RELA
 36

	)

2712 
	#R_M32R_18_PCREL_RELA
 37

	)

2713 
	#R_M32R_26_PCREL_RELA
 38

	)

2714 
	#R_M32R_HI16_ULO_RELA
 39

	)

2715 
	#R_M32R_HI16_SLO_RELA
 40

	)

2716 
	#R_M32R_LO16_RELA
 41

	)

2717 
	#R_M32R_SDA16_RELA
 42

	)

2718 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2719 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2720 
	#R_M32R_REL32
 45

	)

2722 
	#R_M32R_GOT24
 48

	)

2723 
	#R_M32R_26_PLTREL
 49

	)

2724 
	#R_M32R_COPY
 50

	)

2725 
	#R_M32R_GLOB_DAT
 51

	)

2726 
	#R_M32R_JMP_SLOT
 52

	)

2727 
	#R_M32R_RELATIVE
 53

	)

2728 
	#R_M32R_GOTOFF
 54

	)

2729 
	#R_M32R_GOTPC24
 55

	)

2730 
	#R_M32R_GOT16_HI_ULO
 56

	)

2732 
	#R_M32R_GOT16_HI_SLO
 57

	)

2734 
	#R_M32R_GOT16_LO
 58

	)

2735 
	#R_M32R_GOTPC_HI_ULO
 59

	)

2737 
	#R_M32R_GOTPC_HI_SLO
 60

	)

2739 
	#R_M32R_GOTPC_LO
 61

	)

2741 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

2743 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

2745 
	#R_M32R_GOTOFF_LO
 64

	)

2746 
	#R_M32R_NUM
 256

	)

2749 
	g__END_DECLS


	@/usr/include/syscall.h

1 
	~<sys/sysˇŒ.h
>

	@/usr/include/wait.h

1 
	~<sys/waô.h
>

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

95 #unde‡
__USE_ISOC99


96 #unde‡
__USE_ISOC95


97 #unde‡
__USE_POSIX


98 #unde‡
__USE_POSIX2


99 #unde‡
__USE_POSIX199309


100 #unde‡
__USE_POSIX199506


101 #unde‡
__USE_XOPEN


102 #unde‡
__USE_XOPEN_EXTENDED


103 #unde‡
__USE_UNIX98


104 #unde‡
__USE_XOPEN2K


105 #unde‡
__USE_XOPEN2K8


106 #unde‡
__USE_LARGEFILE


107 #unde‡
__USE_LARGEFILE64


108 #unde‡
__USE_FILE_OFFSET64


109 #unde‡
__USE_BSD


110 #unde‡
__USE_SVID


111 #unde‡
__USE_MISC


112 #unde‡
__USE_ATFILE


113 #unde‡
__USE_GNU


114 #unde‡
__USE_REENTRANT


115 #unde‡
__USE_FORTIFY_LEVEL


116 #unde‡
__FAVOR_BSD


117 #unde‡
__KERNEL_STRICT_NAMES


121 #i‚de‡
_LOOSE_KERNEL_NAMES


122 
	#__KERNEL_STRICT_NAMES


	)

126 
	#__USE_ANSI
 1

	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

144 #i‡
deföed
 
_BSD_SOURCE
 && \

145 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

146 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

147 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

148 
	#__FAVOR_BSD
 1

	)

152 #ifde‡
_GNU_SOURCE


153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_POSIX_SOURCE


156 
	#_POSIX_SOURCE
 1

	)

157 #unde‡
_POSIX_C_SOURCE


158 
	#_POSIX_C_SOURCE
 200809L

	)

159 #unde‡
_XOPEN_SOURCE


160 
	#_XOPEN_SOURCE
 700

	)

161 #unde‡
_XOPEN_SOURCE_EXTENDED


162 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

163 #unde‡
_LARGEFILE64_SOURCE


164 
	#_LARGEFILE64_SOURCE
 1

	)

165 #unde‡
_BSD_SOURCE


166 
	#_BSD_SOURCE
 1

	)

167 #unde‡
_SVID_SOURCE


168 
	#_SVID_SOURCE
 1

	)

169 #unde‡
_ATFILE_SOURCE


170 
	#_ATFILE_SOURCE
 1

	)

175 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

176 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

177 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

178 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

179 
	#_BSD_SOURCE
 1

	)

180 
	#_SVID_SOURCE
 1

	)

187 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

188 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

189 
	#__USE_ISOC99
 1

	)

193 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

194 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

195 
	#__USE_ISOC95
 1

	)

200 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

201 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

202 
	#_POSIX_SOURCE
 1

	)

203 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

204 
	#_POSIX_C_SOURCE
 2

	)

205 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

206 
	#_POSIX_C_SOURCE
 199506L

	)

207 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

208 
	#_POSIX_C_SOURCE
 200112L

	)

210 
	#_POSIX_C_SOURCE
 200809L

	)

212 
	#__USE_POSIX_IMPLICITLY
 1

	)

215 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


216 
	#__USE_POSIX
 1

	)

219 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX2
 1

	)

223 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

224 
	#__USE_POSIX199309
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

228 
	#__USE_POSIX199506
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

232 
	#__USE_XOPEN2K
 1

	)

233 #unde‡
__USE_ISOC99


234 
	#__USE_ISOC99
 1

	)

237 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

238 
	#__USE_XOPEN2K8
 1

	)

239 #unde‡
_ATFILE_SOURCE


240 
	#_ATFILE_SOURCE
 1

	)

243 #ifdef 
_XOPEN_SOURCE


244 
	#__USE_XOPEN
 1

	)

245 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

246 
	#__USE_XOPEN_EXTENDED
 1

	)

247 
	#__USE_UNIX98
 1

	)

248 #unde‡
_LARGEFILE_SOURCE


249 
	#_LARGEFILE_SOURCE
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

252 
	#__USE_XOPEN2K8
 1

	)

254 
	#__USE_XOPEN2K
 1

	)

255 #unde‡
__USE_ISOC99


256 
	#__USE_ISOC99
 1

	)

259 #ifde‡
_XOPEN_SOURCE_EXTENDED


260 
	#__USE_XOPEN_EXTENDED
 1

	)

265 #ifde‡
_LARGEFILE_SOURCE


266 
	#__USE_LARGEFILE
 1

	)

269 #ifde‡
_LARGEFILE64_SOURCE


270 
	#__USE_LARGEFILE64
 1

	)

273 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

274 
	#__USE_FILE_OFFSET64
 1

	)

277 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


278 
	#__USE_MISC
 1

	)

281 #ifdef 
_BSD_SOURCE


282 
	#__USE_BSD
 1

	)

285 #ifdef 
_SVID_SOURCE


286 
	#__USE_SVID
 1

	)

289 #ifdef 
_ATFILE_SOURCE


290 
	#__USE_ATFILE
 1

	)

293 #ifdef 
_GNU_SOURCE


294 
	#__USE_GNU
 1

	)

297 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


298 
	#__USE_REENTRANT
 1

	)

301 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

302 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

303 #i‡
_FORTIFY_SOURCE
 > 1

304 
	#__USE_FORTIFY_LEVEL
 2

	)

306 
	#__USE_FORTIFY_LEVEL
 1

	)

309 
	#__USE_FORTIFY_LEVEL
 0

	)

313 
	~<bôs/¥edefs.h
>

316 
	#__STDC_ISO_10646__
 200009L

	)

324 #unde‡
__GNU_LIBRARY__


325 
	#__GNU_LIBRARY__
 6

	)

329 
	#__GLIBC__
 2

	)

330 
	#__GLIBC_MINOR__
 11

	)

332 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

333 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

336 #i‡
deföed
 
__GNUC__
 \

337 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

338 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

339 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

340 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

344 #i‚de‡
__ASSEMBLER__


345 #i‚de‡
_SYS_CDEFS_H


346 
	~<sys/cdefs.h
>

351 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


352 
	#__USE_LARGEFILE
 1

	)

353 
	#__USE_LARGEFILE64
 1

	)

359 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

360 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

361 && 
deföed
 
	g__exã∫_ölöe


362 
	#__USE_EXTERN_INLINES
 1

	)

367 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

368 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

369 && 
deföed
 
	g__exã∫_ölöe


370 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

378 
	~<gnu/°ubs.h
>

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/syscall.h

19 #i‚de‡
_SYSCALL_H


20 
	#_SYSCALL_H
 1

	)

25 
	~<asm/uni°d.h
>

27 #i‚de‡
_LIBC


32 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/wait.h

24 #i‚def 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/ªsour˚.h
>

35 #i‡!
deföed
 
_STDLIB_H
 || !deföed 
__USE_XOPEN


38 
	~<bôs/waôÊags.h
>

40 #ifdef 
__USE_BSD


45 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

48 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

58 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waô
 *
	m__u±r
;

66 *
	m__ùå
;

67 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bôs/waô°©us.h
>

82 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

88 #ifde‡
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

96 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

97 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

101 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1Ë

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

141 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


142 
	#__√ed_sigöfo_t


	)

143 
	~<bôs/sigöfo.h
>

155 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

156 
__›ti⁄s
);

159 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


162 
	grußge
;

169 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

170 
rußge
 * 
__ußge
Ë
__THROW
;

173 #ifde‡
__USE_BSD


175 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

176 
rußge
 *
__ußge
Ë
__THROW
;

180 
__END_DECLS


	@/usr/include/asm/unistd.h

1 #ifde‡
__i386__


2 
	~"uni°d_32.h
"

4 
	~"uni°d_64.h
"

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


7 
	~<bôs/w‹dsize.h
>

9 
	#SYS__sys˘l
 
__NR__sys˘l


	)

10 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

11 
	#SYS_ac˘
 
__NR_ac˘


	)

12 
	#SYS_add_key
 
__NR_add_key


	)

13 
	#SYS_adjtimex
 
__NR_adjtimex


	)

14 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

15 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

16 
	#SYS_brk
 
__NR_brk


	)

17 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

18 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

19 
	#SYS_chdú
 
__NR_chdú


	)

20 
	#SYS_chmod
 
__NR_chmod


	)

21 
	#SYS_chown
 
__NR_chown


	)

22 
	#SYS_chroŸ
 
__NR_chroŸ


	)

23 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

24 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

25 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

26 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

27 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

28 
	#SYS_˛o£
 
__NR_˛o£


	)

29 
	#SYS_¸ót
 
__NR_¸ót


	)

30 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

31 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

32 
	#SYS_dup
 
__NR_dup


	)

33 
	#SYS_dup2
 
__NR_dup2


	)

34 
	#SYS_dup3
 
__NR_dup3


	)

35 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

36 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

37 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

38 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

39 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

40 
	#SYS_evítfd
 
__NR_evítfd


	)

41 
	#SYS_evítfd2
 
__NR_evítfd2


	)

42 
	#SYS_execve
 
__NR_execve


	)

43 
	#SYS_exô
 
__NR_exô


	)

44 
	#SYS_exô_group
 
__NR_exô_group


	)

45 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

46 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

47 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

48 
	#SYS_fchdú
 
__NR_fchdú


	)

49 
	#SYS_fchmod
 
__NR_fchmod


	)

50 
	#SYS_fchmod©
 
__NR_fchmod©


	)

51 
	#SYS_fchown
 
__NR_fchown


	)

52 
	#SYS_fchow«t
 
__NR_fchow«t


	)

53 
	#SYS_f˙é
 
__NR_f˙é


	)

54 
	#SYS_fd©async
 
__NR_fd©async


	)

55 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

56 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

57 
	#SYS_Êock
 
__NR_Êock


	)

58 
	#SYS_f‹k
 
__NR_f‹k


	)

59 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

60 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

61 
	#SYS_f°©
 
__NR_f°©


	)

62 
	#SYS_f°©fs
 
__NR_f°©fs


	)

63 
	#SYS_fsync
 
__NR_fsync


	)

64 
	#SYS_·runˇã
 
__NR_·runˇã


	)

65 
	#SYS_fuãx
 
__NR_fuãx


	)

66 
	#SYS_futimeßt
 
__NR_futimeßt


	)

67 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

68 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

69 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

70 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

71 
	#SYS_gëcwd
 
__NR_gëcwd


	)

72 
	#SYS_gëdíts
 
__NR_gëdíts


	)

73 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

74 
	#SYS_gëegid
 
__NR_gëegid


	)

75 
	#SYS_gëeuid
 
__NR_gëeuid


	)

76 
	#SYS_gëgid
 
__NR_gëgid


	)

77 
	#SYS_gëgroups
 
__NR_gëgroups


	)

78 
	#SYS_gëôimî
 
__NR_gëôimî


	)

79 
	#SYS_gëpgid
 
__NR_gëpgid


	)

80 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

81 
	#SYS_gëpid
 
__NR_gëpid


	)

82 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

83 
	#SYS_gëµid
 
__NR_gëµid


	)

84 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

85 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

86 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

87 
	#SYS_gëæimô
 
__NR_gëæimô


	)

88 
	#SYS_gërußge
 
__NR_gërußge


	)

89 
	#SYS_gësid
 
__NR_gësid


	)

90 
	#SYS_gëtid
 
__NR_gëtid


	)

91 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

92 
	#SYS_gëuid
 
__NR_gëuid


	)

93 
	#SYS_gëx©å
 
__NR_gëx©å


	)

94 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

95 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

96 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

97 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

98 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

99 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

100 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

101 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

102 
	#SYS_io_£tup
 
__NR_io_£tup


	)

103 
	#SYS_io_submô
 
__NR_io_submô


	)

104 
	#SYS_io˘l
 
__NR_io˘l


	)

105 
	#SYS_i›îm
 
__NR_i›îm


	)

106 
	#SYS_i›l
 
__NR_i›l


	)

107 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

108 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

109 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

110 
	#SYS_key˘l
 
__NR_key˘l


	)

111 
	#SYS_kûl
 
__NR_kûl


	)

112 
	#SYS_lchown
 
__NR_lchown


	)

113 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

114 
	#SYS_lök
 
__NR_lök


	)

115 
	#SYS_lök©
 
__NR_lök©


	)

116 
	#SYS_li°x©å
 
__NR_li°x©å


	)

117 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

118 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

119 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

120 
	#SYS_l£ek
 
__NR_l£ek


	)

121 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

122 
	#SYS_l°©
 
__NR_l°©


	)

123 
	#SYS_madvi£
 
__NR_madvi£


	)

124 
	#SYS_mböd
 
__NR_mböd


	)

125 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

126 
	#SYS_möc‹e
 
__NR_möc‹e


	)

127 
	#SYS_mkdú
 
__NR_mkdú


	)

128 
	#SYS_mkdú©
 
__NR_mkdú©


	)

129 
	#SYS_mknod
 
__NR_mknod


	)

130 
	#SYS_mknod©
 
__NR_mknod©


	)

131 
	#SYS_mlock
 
__NR_mlock


	)

132 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

133 
	#SYS_mm≠
 
__NR_mm≠


	)

134 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

135 
	#SYS_mou¡
 
__NR_mou¡


	)

136 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

137 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

138 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

139 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

140 
	#SYS_mq_›í
 
__NR_mq_›í


	)

141 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

142 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

143 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

144 
	#SYS_mªm≠
 
__NR_mªm≠


	)

145 
	#SYS_msync
 
__NR_msync


	)

146 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

147 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

148 
	#SYS_munm≠
 
__NR_munm≠


	)

149 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

150 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

151 
	#SYS_›í
 
__NR_›í


	)

152 
	#SYS_›í©
 
__NR_›í©


	)

153 
	#SYS_∑u£
 
__NR_∑u£


	)

154 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

155 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

156 
	#SYS_pùe
 
__NR_pùe


	)

157 
	#SYS_pùe2
 
__NR_pùe2


	)

158 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

159 
	#SYS_pﬁl
 
__NR_pﬁl


	)

160 
	#SYS_µﬁl
 
__NR_µﬁl


	)

161 
	#SYS_¥˘l
 
__NR_¥˘l


	)

162 
	#SYS_¥ód64
 
__NR_¥ód64


	)

163 
	#SYS_¥ódv
 
__NR_¥ódv


	)

164 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

165 
	#SYS_±ø˚
 
__NR_±ø˚


	)

166 
	#SYS_puçmsg
 
__NR_puçmsg


	)

167 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

168 
	#SYS_pwrôev
 
__NR_pwrôev


	)

169 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

170 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

171 
	#SYS_ªad
 
__NR_ªad


	)

172 
	#SYS_ªadahód
 
__NR_ªadahód


	)

173 
	#SYS_ªadlök
 
__NR_ªadlök


	)

174 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

175 
	#SYS_ªadv
 
__NR_ªadv


	)

176 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

177 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

178 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

179 
	#SYS_ª«me
 
__NR_ª«me


	)

180 
	#SYS_ª«mót
 
__NR_ª«mót


	)

181 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

182 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

183 
	#SYS_rmdú
 
__NR_rmdú


	)

184 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

185 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

186 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

187 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

188 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

189 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

190 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

191 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

192 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

193 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

194 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

195 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

196 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

197 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

198 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

199 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

200 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

201 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

202 
	#SYS_£À˘
 
__NR_£À˘


	)

203 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

204 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

205 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

206 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

207 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

208 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

209 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

210 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

211 
	#SYS_£tgid
 
__NR_£tgid


	)

212 
	#SYS_£tgroups
 
__NR_£tgroups


	)

213 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

214 
	#SYS_£tôimî
 
__NR_£tôimî


	)

215 
	#SYS_£çgid
 
__NR_£çgid


	)

216 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

217 
	#SYS_£åegid
 
__NR_£åegid


	)

218 
	#SYS_£åesgid
 
__NR_£åesgid


	)

219 
	#SYS_£åesuid
 
__NR_£åesuid


	)

220 
	#SYS_£åeuid
 
__NR_£åeuid


	)

221 
	#SYS_£ålimô
 
__NR_£ålimô


	)

222 
	#SYS_£tsid
 
__NR_£tsid


	)

223 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

224 
	#SYS_£tuid
 
__NR_£tuid


	)

225 
	#SYS_£tx©å
 
__NR_£tx©å


	)

226 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

227 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

228 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

229 
	#SYS_•li˚
 
__NR_•li˚


	)

230 
	#SYS_°©
 
__NR_°©


	)

231 
	#SYS_°©fs
 
__NR_°©fs


	)

232 
	#SYS_sw≠off
 
__NR_sw≠off


	)

233 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

234 
	#SYS_symlök
 
__NR_symlök


	)

235 
	#SYS_symlök©
 
__NR_symlök©


	)

236 
	#SYS_sync
 
__NR_sync


	)

237 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

238 
	#SYS_sysfs
 
__NR_sysfs


	)

239 
	#SYS_sysöfo
 
__NR_sysöfo


	)

240 
	#SYS_sy¶og
 
__NR_sy¶og


	)

241 
	#SYS_ãe
 
__NR_ãe


	)

242 
	#SYS_tgkûl
 
__NR_tgkûl


	)

243 
	#SYS_time
 
__NR_time


	)

244 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

245 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

246 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

247 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

248 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

249 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

250 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

251 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

252 
	#SYS_times
 
__NR_times


	)

253 
	#SYS_tkûl
 
__NR_tkûl


	)

254 
	#SYS_åunˇã
 
__NR_åunˇã


	)

255 
	#SYS_umask
 
__NR_umask


	)

256 
	#SYS_umou¡2
 
__NR_umou¡2


	)

257 
	#SYS_u«me
 
__NR_u«me


	)

258 
	#SYS_u∆ök
 
__NR_u∆ök


	)

259 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

260 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

261 
	#SYS_u£lib
 
__NR_u£lib


	)

262 
	#SYS_u°©
 
__NR_u°©


	)

263 
	#SYS_utime
 
__NR_utime


	)

264 
	#SYS_utimíßt
 
__NR_utimíßt


	)

265 
	#SYS_utimes
 
__NR_utimes


	)

266 
	#SYS_vf‹k
 
__NR_vf‹k


	)

267 
	#SYS_vh™gup
 
__NR_vh™gup


	)

268 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

269 
	#SYS_v£rvî
 
__NR_v£rvî


	)

270 
	#SYS_waô4
 
__NR_waô4


	)

271 
	#SYS_waôid
 
__NR_waôid


	)

272 
	#SYS_wrôe
 
__NR_wrôe


	)

273 
	#SYS_wrôev
 
__NR_wrôev


	)

274 #i‡
__WORDSIZE
 == 64

275 
	#SYS_ac˚±
 
__NR_ac˚±


	)

276 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

277 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

278 
	#SYS_böd
 
__NR_böd


	)

279 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

280 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

281 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

282 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

283 
	#SYS_gësock«me
 
__NR_gësock«me


	)

284 
	#SYS_gësock›t
 
__NR_gësock›t


	)

285 
	#SYS_li°í
 
__NR_li°í


	)

286 
	#SYS_msg˘l
 
__NR_msg˘l


	)

287 
	#SYS_msggë
 
__NR_msggë


	)

288 
	#SYS_msgrcv
 
__NR_msgrcv


	)

289 
	#SYS_msg¢d
 
__NR_msg¢d


	)

290 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

291 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

292 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

293 
	#SYS_£curôy
 
__NR_£curôy


	)

294 
	#SYS_£m˘l
 
__NR_£m˘l


	)

295 
	#SYS_£mgë
 
__NR_£mgë


	)

296 
	#SYS_£m›
 
__NR_£m›


	)

297 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

298 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

299 
	#SYS_£ndto
 
__NR_£ndto


	)

300 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

301 
	#SYS_shm©
 
__NR_shm©


	)

302 
	#SYS_shm˘l
 
__NR_shm˘l


	)

303 
	#SYS_shmdt
 
__NR_shmdt


	)

304 
	#SYS_shmgë
 
__NR_shmgë


	)

305 
	#SYS_shutdown
 
__NR_shutdown


	)

306 
	#SYS_sockë
 
__NR_sockë


	)

307 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

308 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

310 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

311 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

312 
	#SYS_bdÊush
 
__NR_bdÊush


	)

313 
	#SYS_bªak
 
__NR_bªak


	)

314 
	#SYS_chown32
 
__NR_chown32


	)

315 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

316 
	#SYS_fchown32
 
__NR_fchown32


	)

317 
	#SYS_f˙é64
 
__NR_f˙é64


	)

318 
	#SYS_f°©64
 
__NR_f°©64


	)

319 
	#SYS_f°©©64
 
__NR_f°©©64


	)

320 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

321 
	#SYS_·ime
 
__NR_·ime


	)

322 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

323 
	#SYS_gë˝u
 
__NR_gë˝u


	)

324 
	#SYS_gëegid32
 
__NR_gëegid32


	)

325 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

326 
	#SYS_gëgid32
 
__NR_gëgid32


	)

327 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

328 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

329 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

330 
	#SYS_gëuid32
 
__NR_gëuid32


	)

331 
	#SYS_gây
 
__NR_gây


	)

332 
	#SYS_idÀ
 
__NR_idÀ


	)

333 
	#SYS_ùc
 
__NR_ùc


	)

334 
	#SYS_lchown32
 
__NR_lchown32


	)

335 
	#SYS_lock
 
__NR_lock


	)

336 
	#SYS_l°©64
 
__NR_l°©64


	)

337 
	#SYS_madvi£1
 
__NR_madvi£1


	)

338 
	#SYS_mm≠2
 
__NR_mm≠2


	)

339 
	#SYS_mpx
 
__NR_mpx


	)

340 
	#SYS_ni˚
 
__NR_ni˚


	)

341 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

342 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

343 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

344 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

345 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

346 
	#SYS_¥of
 
__NR_¥of


	)

347 
	#SYS_¥ofû
 
__NR_¥ofû


	)

348 
	#SYS_ªaddú
 
__NR_ªaddú


	)

349 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

350 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

351 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

352 
	#SYS_£tgid32
 
__NR_£tgid32


	)

353 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

354 
	#SYS_£åegid32
 
__NR_£åegid32


	)

355 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

356 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

357 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

358 
	#SYS_£tuid32
 
__NR_£tuid32


	)

359 
	#SYS_sgëmask
 
__NR_sgëmask


	)

360 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

361 
	#SYS_sig«l
 
__NR_sig«l


	)

362 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

363 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

364 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

365 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

366 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

367 
	#SYS_s£tmask
 
__NR_s£tmask


	)

368 
	#SYS_°©64
 
__NR_°©64


	)

369 
	#SYS_°©fs64
 
__NR_°©fs64


	)

370 
	#SYS_°ime
 
__NR_°ime


	)

371 
	#SYS_°ty
 
__NR_°ty


	)

372 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

373 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

374 
	#SYS_ulimô
 
__NR_ulimô


	)

375 
	#SYS_umou¡
 
__NR_umou¡


	)

376 
	#SYS_vm86
 
__NR_vm86


	)

377 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

378 
	#SYS_waôpid
 
__NR_waôpid


	)

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #ifde‡
__USE_XOPEN


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


167 
	mRUSAGE_THREAD
 = 1

168 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

170 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

174 
	#__√ed_timevÆ


	)

175 
	~<bôs/time.h
>

178 
	srußge


181 
timevÆ
 
	mru_utime
;

183 
timevÆ
 
	mru_°ime
;

185 
	mru_maxrss
;

188 
	mru_ixrss
;

190 
	mru_idrss
;

192 
	mru_i§ss
;

195 
	mru_möÊt
;

197 
	mru_majÊt
;

199 
	mru_nsw≠
;

202 
	mru_öblock
;

204 
	mru_oublock
;

206 
	mru_msg¢d
;

208 
	mru_msgrcv
;

210 
	mru_nsig«ls
;

214 
	mru_nvcsw
;

217 
	mru_nivcsw
;

221 
	#PRIO_MIN
 -20

	)

222 
	#PRIO_MAX
 20

	)

226 
	e__¥i‹ôy_which


228 
	mPRIO_PROCESS
 = 0,

229 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

230 
	mPRIO_PGRP
 = 1,

231 
	#PRIO_PGRP
 
PRIO_PGRP


	)

232 
	mPRIO_USER
 = 2

233 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@
1
.
1
/usr/include
225
4825
arch/mips/include/asmdefs.h
arch/mips/include/bus.h
arch/mips/include/ktypes.h
arch/mips/include/pcb.h
arch/mips/include/setjmp.h
arch/mips/include/specialreg.h
arch/mips/include/spl.h
arch/mips/include/switchframe.h
arch/mips/include/tlb.h
arch/mips/include/trapframe.h
arch/mips/include/types.h
arch/mips/include/vm.h
arch/mips/mips/cache_mips1.S
arch/mips/mips/dumbvm.c
arch/mips/mips/exception.S
arch/mips/mips/interrupt.c
arch/mips/mips/lamebus_mips.c
arch/mips/mips/pcb.c
arch/mips/mips/ram.c
arch/mips/mips/spl.c
arch/mips/mips/start.S
arch/mips/mips/switch.S
arch/mips/mips/syscall.c
arch/mips/mips/threadstart.S
arch/mips/mips/tlb_mips1.S
arch/mips/mips/trap.c
asst1/catlock.c
asst1/catsem.c
asst1/stoplight.c
compile/ASST0/autoconf.c
compile/ASST0/autoconf.h
compile/ASST0/opt-dumbvm.h
compile/ASST0/opt-net.h
compile/ASST0/opt-netfs.h
compile/ASST0/opt-sfs.h
compile/ASST0/opt-synchprobs.h
compile/ASST0/vers.c
compile/ASST1/autoconf.c
compile/ASST1/autoconf.h
compile/ASST1/opt-dumbvm.h
compile/ASST1/opt-net.h
compile/ASST1/opt-netfs.h
compile/ASST1/opt-sfs.h
compile/ASST1/opt-synchprobs.h
compile/ASST1/vers.c
compile/ASST2/autoconf.c
compile/ASST2/autoconf.h
compile/ASST2/opt-dumbvm.h
compile/ASST2/opt-net.h
compile/ASST2/opt-netfs.h
compile/ASST2/opt-sfs.h
compile/ASST2/opt-synchprobs.h
compile/ASST2/vers.c
compile/ASST3/autoconf.c
compile/ASST3/autoconf.h
compile/ASST3/opt-dumbvm.h
compile/ASST3/opt-net.h
compile/ASST3/opt-netfs.h
compile/ASST3/opt-sfs.h
compile/ASST3/opt-synchprobs.h
compile/ASST3/vers.c
dev/generic/beep.c
dev/generic/beep.h
dev/generic/console.c
dev/generic/console.h
dev/generic/pseudorand.c
dev/generic/pseudorand.h
dev/generic/pseudorand_att.c
dev/generic/random.c
dev/generic/random.h
dev/generic/rtclock.c
dev/generic/rtclock.h
dev/init.c
dev/lamebus/beep_ltimer.c
dev/lamebus/con_lscreen.c
dev/lamebus/con_lser.c
dev/lamebus/emu.c
dev/lamebus/emu.h
dev/lamebus/emu_att.c
dev/lamebus/lamebus.c
dev/lamebus/lamebus.h
dev/lamebus/lhd.c
dev/lamebus/lhd.h
dev/lamebus/lhd_att.c
dev/lamebus/lnet.c
dev/lamebus/lnet_att.c
dev/lamebus/lrandom.c
dev/lamebus/lrandom.h
dev/lamebus/lrandom_att.c
dev/lamebus/lscreen.c
dev/lamebus/lscreen.h
dev/lamebus/lscreen_att.c
dev/lamebus/lser.c
dev/lamebus/lser.h
dev/lamebus/lser_att.c
dev/lamebus/ltimer.c
dev/lamebus/ltimer.h
dev/lamebus/ltimer_att.c
dev/lamebus/ltrace.c
dev/lamebus/ltrace.h
dev/lamebus/ltrace_att.c
dev/lamebus/random_lrandom.c
dev/lamebus/rtclock_ltimer.c
fs/sfs/sfs_fs.c
fs/sfs/sfs_io.c
fs/sfs/sfs_vnode.c
fs/vfs/device.c
fs/vfs/devnull.c
fs/vfs/vfscwd.c
fs/vfs/vfslist.c
fs/vfs/vfslookup.c
fs/vfs/vfspath.c
fs/vfs/vnode.c
include/addrspace.h
include/array.h
include/bitmap.h
include/clock.h
include/curthread.h
include/dev.h
include/elf.h
include/emufs.h
include/fork.h
include/fs.h
include/get_pid.h
include/hello.h
include/kern/callno.h
include/kern/errmsg.h
include/kern/errno.h
include/kern/ioctl.h
include/kern/limits.h
include/kern/sfs.h
include/kern/stat.h
include/kern/types.h
include/kern/unistd.h
include/lib.h
include/queue.h
include/scheduler.h
include/sfs.h
include/stdarg.h
include/synch.h
include/syscall.h
include/test.h
include/thread.h
include/trapframe.h
include/types.h
include/uio.h
include/version.h
include/vfs.h
include/vm.h
include/vnode.h
include/wait.h
lib/array.c
lib/bitmap.c
lib/copyinout.c
lib/kgets.c
lib/kheap.c
lib/kprintf.c
lib/misc.c
lib/ntoh.c
lib/queue.c
main/hello.c
main/main.c
main/menu.c
test/arraytest.c
test/bitmaptest.c
test/fstest.c
test/malloctest.c
test/nettest.c
test/queuetest.c
test/synchtest.c
test/threadtest.c
test/tt3.c
thread/hardclock.c
thread/scheduler.c
thread/synch.c
thread/thread.c
userprog/execv.c
userprog/exit.c
userprog/fork.c
userprog/get_pid.c
userprog/loadelf.c
userprog/printchar.c
userprog/runprogram.c
userprog/uio.c
userprog/wait.c
vm/.svn/vm.c
vm/addrspace.c
vm/vm.c
/usr/include/elf.h
/usr/include/syscall.h
/usr/include/wait.h
/usr/include/features.h
/usr/include/stdint.h
/usr/include/sys/syscall.h
/usr/include/sys/wait.h
/usr/include/asm/unistd.h
/usr/include/bits/predefs.h
/usr/include/bits/siginfo.h
/usr/include/bits/syscall.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs.h
/usr/include/signal.h
/usr/include/sys/cdefs.h
/usr/include/sys/resource.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/gnu/stubs-32.h
/usr/include/sys/ucontext.h
/usr/include/time.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/xlocale.h
